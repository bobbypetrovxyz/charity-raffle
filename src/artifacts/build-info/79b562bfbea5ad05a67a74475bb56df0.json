{
	"id": "79b562bfbea5ad05a67a74475bb56df0",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"settings": {
			"viaIR": true,
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": [
				"ds-test/=lib/forge-std/lib/ds-test/src/",
				"forge-std/=lib/forge-std/src/",
				"@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/",
				"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
				"@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/"
			]
		},
		"sources": {
			"src/CharityRaffle.sol": {
				"content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.26;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {VRFV2PlusClient} from \"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\";\nimport \"./VRFConsumerBaseV2PlusCustom.sol\";\n\ncontract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {\n    uint256 public constant DENOMINATOR = 10000; // 100% in basis points\n    uint256 public ticketPrice;\n    uint256 public numOfWinners;\n    uint256 public pricePersentageBPS;\n    address public charityWallet;\n    uint256 public vrfSubsciptionId;\n    bytes32 public vrfKeyHash;\n    uint256 public vrfRequestId;\n    bytes32 public merkleRoot;\n\n    uint256 public winnerReward;\n    uint256 public charityFunds;\n\n    address[] public participants;\n    mapping(address => bool) public winners;\n    bool public winnersSelected;\n\n    event WinnersSelected(address[] winners);\n    event TicketPurchased(address indexed buyer, uint256 quantity);\n    event RandomnessRequested(uint256 requestId);\n    event PrizeClaimed(address indexed winner);\n    event CharityWithdrawal(uint256 amount);\n\n    error InsufficientValue();\n    error InvalidProof();\n    error VRFRequestAlreadyMade();\n    error InvalidRequest();\n    error InvalidRandomWords();\n    error NotAWinner();\n    error TransferFailed();\n    error InsufficientFunds();\n    error WinnersNotSelected();\n\n    function initialize(\n        address _owner,\n        address _charityWallet,\n        uint256 _vrfSubsciptionId,\n        bytes32 _vrfKeyHash,\n        bytes32 _merkleRoot\n    ) public initializer {\n        __Ownable_init(_owner);\n        s_vrfCoordinator = IVRFCoordinatorV2Plus(\n            0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B\n        ); // Set the VRF Coordinator address for Sepolia\n        ticketPrice = 0.001 ether; // Set a default ticket price\n        numOfWinners = 2; // Set a default number of winners\n        pricePersentageBPS = 3000; // Set a default percentage for the prize pool\n        charityWallet = _charityWallet;\n        vrfSubsciptionId = _vrfSubsciptionId;\n        vrfKeyHash = _vrfKeyHash;\n        merkleRoot = _merkleRoot;\n    }\n\n    function buyTicket(uint256 _qty, bytes32[] memory _proof) external payable {\n        require(msg.value == ticketPrice * _qty, InsufficientValue());\n\n        bytes32 leaf = keccak256(abi.encode(msg.sender));\n        require(\n            MerkleProof.verify(\n                _proof,\n                merkleRoot,\n                keccak256(abi.encodePacked(leaf))\n            ),\n            InvalidProof()\n        );\n\n        for (uint256 i = 0; i < _qty; i++) {\n            participants.push(msg.sender);\n        }\n\n        emit TicketPurchased(msg.sender, _qty);\n    }\n\n    function requestRandomWinners() external onlyOwner {\n        require(vrfRequestId == 0, VRFRequestAlreadyMade());\n        vrfRequestId = s_vrfCoordinator.requestRandomWords(\n            VRFV2PlusClient.RandomWordsRequest({\n                keyHash: vrfKeyHash,\n                subId: vrfSubsciptionId,\n                requestConfirmations: 3,\n                callbackGasLimit: 1000000,\n                numWords: uint32(numOfWinners),\n                extraArgs: VRFV2PlusClient._argsToBytes(\n                    // Set nativePayment to true to pay for VRF requests with Sepolia ETH instead of LINK\n                    VRFV2PlusClient.ExtraArgsV1({nativePayment: false})\n                )\n            })\n        );\n\n        uint256 fundsCollected = participants.length * ticketPrice;\n        winnerReward = (fundsCollected * pricePersentageBPS) / DENOMINATOR;\n        charityFunds = fundsCollected - (winnerReward * numOfWinners);\n\n        emit RandomnessRequested(vrfRequestId);\n    }\n\n    function owner()\n        public\n        view\n        override(OwnableUpgradeable, VRFConsumerBaseV2PlusCustom)\n        returns (address)\n    {\n        return OwnableUpgradeable.owner();\n    }\n\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] calldata randomWords\n    ) internal override {\n        require(requestId == vrfRequestId, InvalidRequest());\n        require(randomWords.length == numOfWinners, InvalidRandomWords());\n\n        address[] memory winnersArray = new address[](numOfWinners);\n\n        for (uint256 i = 0; i < numOfWinners; i++) {\n            uint256 randomWord = randomWords[i];\n\n            while (true) {\n                uint256 winnerIndex = randomWord % participants.length;\n                address winner = participants[winnerIndex];\n\n                if (!winners[winner]) {\n                    winners[winner] = true;\n                    winnersArray[i] = winner;\n                    break;\n                }\n\n                randomWord = (randomWord + 1) % type(uint256).max; // Increment to find a new winner\n            }\n\n            winnersSelected = true;\n\n            emit WinnersSelected(winnersArray);\n        }\n    }\n\n    function claimPrize() external {\n        require(winners[msg.sender], NotAWinner());\n        require(\n            address(this).balance >= winnerReward,\n            \"Insufficient contract balance\"\n        );\n\n        winners[msg.sender] = false; // Prevent double claiming\n        (bool success, ) = payable(msg.sender).call{value: winnerReward}(\"\");\n        require(success, TransferFailed());\n\n        emit PrizeClaimed(msg.sender);\n    }\n\n    function claimCharityFunds() external onlyOwner {\n        require(charityFunds > 0, InsufficientFunds());\n        require(winnersSelected, WinnersNotSelected());\n        require(\n            address(this).balance >= charityFunds,\n            \"Insufficient contract balance for charity funds\"\n        );\n        require(charityWallet != address(0), \"Charity wallet not set\");\n\n        (bool success, ) = payable(charityWallet).call{value: charityFunds}(\"\");\n        require(success, TransferFailed());\n        charityFunds = 0; // Reset charity funds after claiming\n\n        emit CharityWithdrawal(charityFunds);\n    }\n}\n"
			},
			"src/VRFConsumerBaseV2PlusCustom.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport {IVRFCoordinatorV2Plus} from \"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\";\nimport {IVRFMigratableConsumerV2Plus} from \"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\n * @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\n * @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create a subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords, extraArgs),\n * @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\n *\n * @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2PlusCustom is IVRFMigratableConsumerV2Plus {\n    error OnlyCoordinatorCanFulfill(address have, address want);\n    error OnlyOwnerOrCoordinator(\n        address have,\n        address owner,\n        address coordinator\n    );\n    error ZeroAddress();\n\n    // s_vrfCoordinator should be used by consumers to make requests to vrfCoordinator\n    // so that coordinator reference is updated after migration\n    IVRFCoordinatorV2Plus public s_vrfCoordinator;\n\n    /**\n     * @notice fulfillRandomness handles the VRF response. Your contract must\n     * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n     * @notice principles to keep in mind when implementing your fulfillRandomness\n     * @notice method.\n     *\n     * @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\n     * @dev signature, and will call it once it has verified the proof\n     * @dev associated with the randomness. (It is triggered via a call to\n     * @dev rawFulfillRandomness, below.)\n     *\n     * @param requestId The Id initially returned by requestRandomness\n     * @param randomWords the VRF output expanded to the requested number of words\n     */\n    // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n    function fulfillRandomWords(\n        uint256 requestId,\n        uint256[] calldata randomWords\n    ) internal virtual;\n\n    // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n    // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n    // the origin of the call\n    function rawFulfillRandomWords(\n        uint256 requestId,\n        uint256[] calldata randomWords\n    ) external {\n        if (msg.sender != address(s_vrfCoordinator)) {\n            revert OnlyCoordinatorCanFulfill(\n                msg.sender,\n                address(s_vrfCoordinator)\n            );\n        }\n        fulfillRandomWords(requestId, randomWords);\n    }\n\n    /**\n     * @inheritdoc IVRFMigratableConsumerV2Plus\n     */\n    function setCoordinator(\n        address _vrfCoordinator\n    ) external override onlyOwnerOrCoordinator {\n        if (_vrfCoordinator == address(0)) {\n            revert ZeroAddress();\n        }\n        s_vrfCoordinator = IVRFCoordinatorV2Plus(_vrfCoordinator);\n\n        emit CoordinatorSet(_vrfCoordinator);\n    }\n\n    modifier onlyOwnerOrCoordinator() {\n        if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {\n            revert OnlyOwnerOrCoordinator(\n                msg.sender,\n                owner(),\n                address(s_vrfCoordinator)\n            );\n        }\n        _;\n    }\n\n    function owner() public view virtual returns (address);\n}\n"
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n// End consumer library.\nlibrary VRFV2PlusClient {\n  // extraArgs will evolve to support new features\n  bytes4 public constant EXTRA_ARGS_V1_TAG = bytes4(keccak256(\"VRF ExtraArgsV1\"));\n  struct ExtraArgsV1 {\n    bool nativePayment;\n  }\n\n  struct RandomWordsRequest {\n    bytes32 keyHash;\n    uint256 subId;\n    uint16 requestConfirmations;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n    bytes extraArgs;\n  }\n\n  function _argsToBytes(ExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n    return abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs);\n  }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The IVRFMigratableConsumerV2Plus interface defines the\n/// @notice method required to be implemented by all V2Plus consumers.\n/// @dev This interface is designed to be used in VRFConsumerBaseV2Plus.\ninterface IVRFMigratableConsumerV2Plus {\n  event CoordinatorSet(address vrfCoordinator);\n\n  /// @notice Sets the VRF Coordinator address\n  /// @notice This method should only be callable by the coordinator or contract owner\n  function setCoordinator(address vrfCoordinator) external;\n}\n"
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {VRFV2PlusClient} from \"../libraries/VRFV2PlusClient.sol\";\nimport {IVRFSubscriptionV2Plus} from \"./IVRFSubscriptionV2Plus.sol\";\n\n// Interface that enables consumers of VRFCoordinatorV2Plus to be future-proof for upgrades\n// This interface is supported by subsequent versions of VRFCoordinatorV2Plus\ninterface IVRFCoordinatorV2Plus is IVRFSubscriptionV2Plus {\n  /**\n   * @notice Request a set of random words.\n   * @param req - a struct containing following fields for randomness request:\n   * keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * requestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * extraArgs - abi-encoded extra args\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(VRFV2PlusClient.RandomWordsRequest calldata req) external returns (uint256 requestId);\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function efficientKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @notice The IVRFSubscriptionV2Plus interface defines the subscription\n/// @notice related methods implemented by the V2Plus coordinator.\ninterface IVRFSubscriptionV2Plus {\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint256 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint256 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint256 subId, address to) external;\n\n  /**\n   * @notice Accept subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint256 subId) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint256 subId, address newOwner) external;\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription with LINK, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   * @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\n   * @dev  to send Native with the call, for example:\n   * @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\n   */\n  function createSubscription() external returns (uint256 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return nativeBalance - native balance of the subscription in wei.\n   * @return reqCount - Requests count of subscription.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint256 subId\n  )\n    external\n    view\n    returns (uint96 balance, uint96 nativeBalance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint256 subId) external view returns (bool);\n\n  /**\n   * @notice Paginate through all active VRF subscriptions.\n   * @param startIndex index of the subscription to start from\n   * @param maxCount maximum number of subscriptions to return, 0 to return all\n   * @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\n   * @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state\n   */\n  function getActiveSubscriptionIds(uint256 startIndex, uint256 maxCount) external view returns (uint256[] memory);\n\n  /**\n   * @notice Fund a subscription with native.\n   * @param subId - ID of the subscription\n   * @notice This method expects msg.value to be greater than or equal to 0.\n   */\n  function fundSubscriptionWithNative(uint256 subId) external payable;\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol": {
				"IVRFCoordinatorV2Plus": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								}
							],
							"name": "acceptSubscriptionOwnerTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "consumer",
									"type": "address"
								}
							],
							"name": "addConsumer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "cancelSubscription",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "createSubscription",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								}
							],
							"name": "fundSubscriptionWithNative",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "startIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "maxCount",
									"type": "uint256"
								}
							],
							"name": "getActiveSubscriptionIds",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								}
							],
							"name": "getSubscription",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "balance",
									"type": "uint96"
								},
								{
									"internalType": "uint96",
									"name": "nativeBalance",
									"type": "uint96"
								},
								{
									"internalType": "uint64",
									"name": "reqCount",
									"type": "uint64"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "consumers",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								}
							],
							"name": "pendingRequestExists",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "consumer",
									"type": "address"
								}
							],
							"name": "removeConsumer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "bytes32",
											"name": "keyHash",
											"type": "bytes32"
										},
										{
											"internalType": "uint256",
											"name": "subId",
											"type": "uint256"
										},
										{
											"internalType": "uint16",
											"name": "requestConfirmations",
											"type": "uint16"
										},
										{
											"internalType": "uint32",
											"name": "callbackGasLimit",
											"type": "uint32"
										},
										{
											"internalType": "uint32",
											"name": "numWords",
											"type": "uint32"
										},
										{
											"internalType": "bytes",
											"name": "extraArgs",
											"type": "bytes"
										}
									],
									"internalType": "struct VRFV2PlusClient.RandomWordsRequest",
									"name": "req",
									"type": "tuple"
								}
							],
							"name": "requestRandomWords",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "requestId",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "requestSubscriptionOwnerTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"acceptSubscriptionOwnerTransfer(uint256)": {
								"details": "will revert if original owner of subId has not requested that msg.sender become the new owner.",
								"params": {
									"subId": "- ID of the subscription"
								}
							},
							"addConsumer(uint256,address)": {
								"params": {
									"consumer": "- New consumer which can use the subscription",
									"subId": "- ID of the subscription"
								}
							},
							"cancelSubscription(uint256,address)": {
								"params": {
									"subId": "- ID of the subscription",
									"to": "- Where to send the remaining LINK to"
								}
							},
							"createSubscription()": {
								"details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);",
								"returns": {
									"subId": "- A unique subscription id."
								}
							},
							"fundSubscriptionWithNative(uint256)": {
								"params": {
									"subId": "- ID of the subscription"
								}
							},
							"getActiveSubscriptionIds(uint256,uint256)": {
								"details": "the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state",
								"params": {
									"maxCount": "maximum number of subscriptions to return, 0 to return all",
									"startIndex": "index of the subscription to start from"
								}
							},
							"getSubscription(uint256)": {
								"params": {
									"subId": "- ID of the subscription"
								},
								"returns": {
									"balance": "- LINK balance of the subscription in juels.",
									"consumers": "- list of consumer address which are able to use this subscription.",
									"nativeBalance": "- native balance of the subscription in wei.",
									"owner": "- owner of the subscription.",
									"reqCount": "- Requests count of subscription."
								}
							},
							"removeConsumer(uint256,address)": {
								"params": {
									"consumer": "- Consumer to remove from the subscription",
									"subId": "- ID of the subscription"
								}
							},
							"requestRandomWords((bytes32,uint256,uint16,uint32,uint32,bytes))": {
								"params": {
									"req": "- a struct containing following fields for randomness request: keyHash - Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost. subId  - The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash. requestConfirmations - How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200]. callbackGasLimit - How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit] numWords - The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle. extraArgs - abi-encoded extra args"
								},
								"returns": {
									"requestId": "- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."
								}
							},
							"requestSubscriptionOwnerTransfer(uint256,address)": {
								"params": {
									"newOwner": "- proposed new owner of the subscription",
									"subId": "- ID of the subscription"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"acceptSubscriptionOwnerTransfer(uint256)": "b2a7cac5",
							"addConsumer(uint256,address)": "bec4c08c",
							"cancelSubscription(uint256,address)": "0ae09540",
							"createSubscription()": "a21a23e4",
							"fundSubscriptionWithNative(uint256)": "95b55cfc",
							"getActiveSubscriptionIds(uint256,uint256)": "aefb212f",
							"getSubscription(uint256)": "dc311dd3",
							"pendingRequestExists(uint256)": "41af6c87",
							"removeConsumer(uint256,address)": "cb631797",
							"requestRandomWords((bytes32,uint256,uint16,uint32,uint32,bytes))": "9b1c385e",
							"requestSubscriptionOwnerTransfer(uint256,address)": "dac83d29"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"fundSubscriptionWithNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"getActiveSubscriptionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"nativeBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct VRFV2PlusClient.RandomWordsRequest\",\"name\":\"req\",\"type\":\"tuple\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint256,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"fundSubscriptionWithNative(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"}},\"getActiveSubscriptionIds(uint256,uint256)\":{\"details\":\"the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state\",\"params\":{\"maxCount\":\"maximum number of subscriptions to return, 0 to return all\",\"startIndex\":\"index of the subscription to start from\"}},\"getSubscription(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"nativeBalance\":\"- native balance of the subscription in wei.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- Requests count of subscription.\"}},\"removeConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords((bytes32,uint256,uint16,uint32,uint32,bytes))\":{\"params\":{\"req\":\"- a struct containing following fields for randomness request: keyHash - Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost. subId  - The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash. requestConfirmations - How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200]. callbackGasLimit - How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit] numWords - The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle. extraArgs - abi-encoded extra args\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"notice\":\"Accept subscription owner transfer.\"},\"addConsumer(uint256,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint256,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"fundSubscriptionWithNative(uint256)\":{\"notice\":\"Fund a subscription with native.This method expects msg.value to be greater than or equal to 0.\"},\"getActiveSubscriptionIds(uint256,uint256)\":{\"notice\":\"Paginate through all active VRF subscriptions.\"},\"getSubscription(uint256)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint256,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords((bytes32,uint256,uint16,uint32,uint32,bytes))\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":\"IVRFCoordinatorV2Plus\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8a347ae8d28007a7537abdc153d3d400d330e02339e8070dd4d783dbdb4de2e\",\"dweb:/ipfs/QmT4rCRw9LBkTYnjRSLNoVP6qhMWA1xg7Hp3wGrRSsV5YL\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b67dd54c0f1083d804f9c0ac6b6a62db1727b090f6d1afb0a8107baea7b40d8\",\"dweb:/ipfs/QmbD4vuTA7sBtR4DxeDjKr2pC51xgw8RRef2AmodnH5B1F\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://882f7357f1a4d7479adda35f81c130bb9a7bfa024d5b9617c75a0539116c2a1d\",\"dweb:/ipfs/QmWzLDgcS9jUh4AT65dQRr46ZhGHgQ4KoNfSdFiFTFqneQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"acceptSubscriptionOwnerTransfer(uint256)": {
								"notice": "Accept subscription owner transfer."
							},
							"addConsumer(uint256,address)": {
								"notice": "Add a consumer to a VRF subscription."
							},
							"cancelSubscription(uint256,address)": {
								"notice": "Cancel a subscription"
							},
							"createSubscription()": {
								"notice": "Create a VRF subscription."
							},
							"fundSubscriptionWithNative(uint256)": {
								"notice": "Fund a subscription with native.This method expects msg.value to be greater than or equal to 0."
							},
							"getActiveSubscriptionIds(uint256,uint256)": {
								"notice": "Paginate through all active VRF subscriptions."
							},
							"getSubscription(uint256)": {
								"notice": "Get a VRF subscription."
							},
							"removeConsumer(uint256,address)": {
								"notice": "Remove a consumer from a VRF subscription."
							},
							"requestRandomWords((bytes32,uint256,uint16,uint32,uint32,bytes))": {
								"notice": "Request a set of random words."
							},
							"requestSubscriptionOwnerTransfer(uint256,address)": {
								"notice": "Request subscription owner transfer."
							}
						},
						"version": 1
					}
				}
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol": {
				"IVRFMigratableConsumerV2Plus": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "vrfCoordinator",
									"type": "address"
								}
							],
							"name": "CoordinatorSet",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "vrfCoordinator",
									"type": "address"
								}
							],
							"name": "setCoordinator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "This interface is designed to be used in VRFConsumerBaseV2Plus.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"setCoordinator(address)": "8ea98117"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This interface is designed to be used in VRFConsumerBaseV2Plus.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"}},\"notice\":\"The IVRFMigratableConsumerV2Plus interface defines themethod required to be implemented by all V2Plus consumers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":\"IVRFMigratableConsumerV2Plus\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12df6d3bd2130709c9f923e5dc8d6e8014c1d4bc35a2722c849f46bdbe1ea9cb\",\"dweb:/ipfs/QmVswk94A2g9KEbK792tw5o4X27HWzP2cw7wPmuRr116js\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"setCoordinator(address)": {
								"notice": "Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"
							}
						},
						"notice": "The IVRFMigratableConsumerV2Plus interface defines themethod required to be implemented by all V2Plus consumers.",
						"version": 1
					}
				}
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol": {
				"IVRFSubscriptionV2Plus": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								}
							],
							"name": "acceptSubscriptionOwnerTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "consumer",
									"type": "address"
								}
							],
							"name": "addConsumer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "cancelSubscription",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "createSubscription",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								}
							],
							"name": "fundSubscriptionWithNative",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "startIndex",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "maxCount",
									"type": "uint256"
								}
							],
							"name": "getActiveSubscriptionIds",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								}
							],
							"name": "getSubscription",
							"outputs": [
								{
									"internalType": "uint96",
									"name": "balance",
									"type": "uint96"
								},
								{
									"internalType": "uint96",
									"name": "nativeBalance",
									"type": "uint96"
								},
								{
									"internalType": "uint64",
									"name": "reqCount",
									"type": "uint64"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address[]",
									"name": "consumers",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								}
							],
							"name": "pendingRequestExists",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "consumer",
									"type": "address"
								}
							],
							"name": "removeConsumer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "subId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "requestSubscriptionOwnerTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"acceptSubscriptionOwnerTransfer(uint256)": {
								"details": "will revert if original owner of subId has not requested that msg.sender become the new owner.",
								"params": {
									"subId": "- ID of the subscription"
								}
							},
							"addConsumer(uint256,address)": {
								"params": {
									"consumer": "- New consumer which can use the subscription",
									"subId": "- ID of the subscription"
								}
							},
							"cancelSubscription(uint256,address)": {
								"params": {
									"subId": "- ID of the subscription",
									"to": "- Where to send the remaining LINK to"
								}
							},
							"createSubscription()": {
								"details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);",
								"returns": {
									"subId": "- A unique subscription id."
								}
							},
							"fundSubscriptionWithNative(uint256)": {
								"params": {
									"subId": "- ID of the subscription"
								}
							},
							"getActiveSubscriptionIds(uint256,uint256)": {
								"details": "the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state",
								"params": {
									"maxCount": "maximum number of subscriptions to return, 0 to return all",
									"startIndex": "index of the subscription to start from"
								}
							},
							"getSubscription(uint256)": {
								"params": {
									"subId": "- ID of the subscription"
								},
								"returns": {
									"balance": "- LINK balance of the subscription in juels.",
									"consumers": "- list of consumer address which are able to use this subscription.",
									"nativeBalance": "- native balance of the subscription in wei.",
									"owner": "- owner of the subscription.",
									"reqCount": "- Requests count of subscription."
								}
							},
							"removeConsumer(uint256,address)": {
								"params": {
									"consumer": "- Consumer to remove from the subscription",
									"subId": "- ID of the subscription"
								}
							},
							"requestSubscriptionOwnerTransfer(uint256,address)": {
								"params": {
									"newOwner": "- proposed new owner of the subscription",
									"subId": "- ID of the subscription"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"acceptSubscriptionOwnerTransfer(uint256)": "b2a7cac5",
							"addConsumer(uint256,address)": "bec4c08c",
							"cancelSubscription(uint256,address)": "0ae09540",
							"createSubscription()": "a21a23e4",
							"fundSubscriptionWithNative(uint256)": "95b55cfc",
							"getActiveSubscriptionIds(uint256,uint256)": "aefb212f",
							"getSubscription(uint256)": "dc311dd3",
							"pendingRequestExists(uint256)": "41af6c87",
							"removeConsumer(uint256,address)": "cb631797",
							"requestSubscriptionOwnerTransfer(uint256,address)": "dac83d29"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"fundSubscriptionWithNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"getActiveSubscriptionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"nativeBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint256,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription with LINK, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sureto send Native with the call, for example:COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"fundSubscriptionWithNative(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"}},\"getActiveSubscriptionIds(uint256,uint256)\":{\"details\":\"the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, oneshould consider keeping the blockheight constant to ensure a holistic picture of the contract state\",\"params\":{\"maxCount\":\"maximum number of subscriptions to return, 0 to return all\",\"startIndex\":\"index of the subscription to start from\"}},\"getSubscription(uint256)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"nativeBalance\":\"- native balance of the subscription in wei.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- Requests count of subscription.\"}},\"removeConsumer(uint256,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint256)\":{\"notice\":\"Accept subscription owner transfer.\"},\"addConsumer(uint256,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint256,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"fundSubscriptionWithNative(uint256)\":{\"notice\":\"Fund a subscription with native.This method expects msg.value to be greater than or equal to 0.\"},\"getActiveSubscriptionIds(uint256,uint256)\":{\"notice\":\"Paginate through all active VRF subscriptions.\"},\"getSubscription(uint256)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint256,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestSubscriptionOwnerTransfer(uint256,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"notice\":\"The IVRFSubscriptionV2Plus interface defines the subscriptionrelated methods implemented by the V2Plus coordinator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":\"IVRFSubscriptionV2Plus\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b67dd54c0f1083d804f9c0ac6b6a62db1727b090f6d1afb0a8107baea7b40d8\",\"dweb:/ipfs/QmbD4vuTA7sBtR4DxeDjKr2pC51xgw8RRef2AmodnH5B1F\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"acceptSubscriptionOwnerTransfer(uint256)": {
								"notice": "Accept subscription owner transfer."
							},
							"addConsumer(uint256,address)": {
								"notice": "Add a consumer to a VRF subscription."
							},
							"cancelSubscription(uint256,address)": {
								"notice": "Cancel a subscription"
							},
							"createSubscription()": {
								"notice": "Create a VRF subscription."
							},
							"fundSubscriptionWithNative(uint256)": {
								"notice": "Fund a subscription with native.This method expects msg.value to be greater than or equal to 0."
							},
							"getActiveSubscriptionIds(uint256,uint256)": {
								"notice": "Paginate through all active VRF subscriptions."
							},
							"getSubscription(uint256)": {
								"notice": "Get a VRF subscription."
							},
							"removeConsumer(uint256,address)": {
								"notice": "Remove a consumer from a VRF subscription."
							},
							"requestSubscriptionOwnerTransfer(uint256,address)": {
								"notice": "Request subscription owner transfer."
							}
						},
						"notice": "The IVRFSubscriptionV2Plus interface defines the subscriptionrelated methods implemented by the V2Plus coordinator.",
						"version": 1
					}
				}
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol": {
				"VRFV2PlusClient": {
					"abi": [
						{
							"inputs": [],
							"name": "EXTRA_ARGS_V1_TAG",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":82:640  library VRFV2PlusClient {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":82:640  library VRFV2PlusClient {... */\n      0x80\n      dup1\n      0x40\n      mstore\n      jumpi(tag_1, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_1:\n      jumpi(tag_3, eq(0xf7514ab4, shr(0xe0, calldataload(0x00))))\n      0x00\n      dup1\n      revert\n    tag_3:\n      jumpi(tag_5, slt(add(not(0x03), calldatasize), 0x00))\n      shl(0xe3, 0x125fa267)\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_5:\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220deba8fe2c46d1ecefd44f2708caa6ba260915ed68a462c888286f05e5806527064736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760769081601c823930815050f35b5f80fdfe60808060405260043610156011575f80fd5b5f3560e01c63f7514ab4146023575f80fd5b5f366003190112603c5763125fa26760e31b8152602090f35b5f80fdfea2646970667358221220deba8fe2c46d1ecefd44f2708caa6ba260915ed68a462c888286f05e5806527064736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x76 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xF7514AB4 EQ PUSH1 0x23 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0x3C JUMPI PUSH4 0x125FA267 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE 0xBA DUP16 0xE2 0xC4 PUSH14 0x1ECEFD44F2708CAA6BA260915ED6 DUP11 CHAINID 0x2C DUP9 DUP3 DUP7 CREATE MCOPY PC MOD MSTORE PUSH17 0x64736F6C634300081E0033000000000000 ",
							"sourceMap": "82:558:3:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60808060405260043610156011575f80fd5b5f3560e01c63f7514ab4146023575f80fd5b5f366003190112603c5763125fa26760e31b8152602090f35b5f80fdfea2646970667358221220deba8fe2c46d1ecefd44f2708caa6ba260915ed68a462c888286f05e5806527064736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH1 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR PUSH4 0xF7514AB4 EQ PUSH1 0x23 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH1 0x3C JUMPI PUSH4 0x125FA267 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE 0xBA DUP16 0xE2 0xC4 PUSH14 0x1ECEFD44F2708CAA6BA260915ED6 DUP11 CHAINID 0x2C DUP9 DUP3 DUP7 CREATE MCOPY PC MOD MSTORE PUSH17 0x64736F6C634300081E0033000000000000 ",
							"sourceMap": "82:558:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;82:558:3;;;;-1:-1:-1;;;82:558:3;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "23600",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"EXTRA_ARGS_V1_TAG()": "133"
							},
							"internal": {
								"_argsToBytes(struct VRFV2PlusClient.ExtraArgsV1 memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 82,
									"end": 640,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 82,
									"end": 640,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 82,
									"end": 640,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 82,
									"end": 640,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 82,
									"end": 640,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 82,
									"end": 640,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "ASSIGNIMMUTABLE",
									"source": 3,
									"value": "library_deploy_address"
								},
								{
									"begin": 82,
									"end": 640,
									"name": "RETURN",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 82,
									"end": 640,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 82,
									"end": 640,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 82,
									"end": 640,
									"name": "REVERT",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220deba8fe2c46d1ecefd44f2708caa6ba260915ed68a462c888286f05e5806527064736f6c634300081e0033",
									".code": [
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "F7514AB4"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 82,
											"end": 640,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "SLT",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "125FA267"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 82,
											"end": 640,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 82,
											"end": 640,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 82,
											"end": 640,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/CharityRaffle.sol",
								"src/VRFConsumerBaseV2PlusCustom.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"EXTRA_ARGS_V1_TAG()": "f7514ab4"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EXTRA_ARGS_V1_TAG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":\"VRFV2PlusClient\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://882f7357f1a4d7479adda35f81c130bb9a7bfa024d5b9617c75a0539116c2a1d\",\"dweb:/ipfs/QmWzLDgcS9jUh4AT65dQRr46ZhGHgQ4KoNfSdFiFTFqneQ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"Hashes": {
					"abi": [],
					"devdoc": {
						"details": "Library of standard hash functions. _Available since v5.1._",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":221:1032  library Hashes {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":221:1032  library Hashes {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212201547fe255cc6387449fac9f7c04db0e63413453e3be3e6435ebaf66b8633fdd064736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212201547fe255cc6387449fac9f7c04db0e63413453e3be3e6435ebaf66b8633fdd064736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO SELFBALANCE INVALID 0x25 TLOAD 0xC6 CODESIZE PUSH21 0x49FAC9F7C04DB0E63413453E3BE3E6435EBAF66B86 CALLER REVERT 0xD0 PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "221:811:7:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212201547fe255cc6387449fac9f7c04db0e63413453e3be3e6435ebaf66b8633fdd064736f6c634300081e0033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO SELFBALANCE INVALID 0x25 TLOAD 0xC6 CODESIZE PUSH21 0x49FAC9F7C04DB0E63413453E3BE3E6435EBAF66B86 CALLER REVERT 0xD0 PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "221:811:7:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"commutativeKeccak256(bytes32,bytes32)": "infinite",
								"efficientKeccak256(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "library_deploy_address"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "RETURN",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 221,
									"end": 1032,
									"name": "REVERT",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201547fe255cc6387449fac9f7c04db0e63413453e3be3e6435ebaf66b8633fdd064736f6c634300081e0033",
									".code": [
										{
											"begin": 221,
											"end": 1032,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 221,
											"end": 1032,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/CharityRaffle.sol",
								"src/VRFConsumerBaseV2PlusCustom.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
				"MerkleProof": {
					"abi": [
						{
							"inputs": [],
							"name": "MerkleProofInvalidMultiproof",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.",
						"errors": {
							"MerkleProofInvalidMultiproof()": [
								{
									"details": "The multiproof provided is not valid."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1353:24335  library MerkleProof {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":1353:24335  library MerkleProof {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212209afef5c067d8a5397ca824f2420c2ba523c0e0ab22bcc30e331efbe1ac0e7dfc64736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212209afef5c067d8a5397ca824f2420c2ba523c0e0ab22bcc30e331efbe1ac0e7dfc64736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP11 INVALID CREATE2 0xC0 PUSH8 0xD8A5397CA824F242 0xC 0x2B 0xA5 0x23 0xC0 RJUMP 0xAB22 0xBC 0xC3 0xE CALLER 0x1E EXTSTATICCALL RJUMPI 0xAC0E PUSH30 0xFC64736F6C634300081E0033000000000000000000000000000000000000 ",
							"sourceMap": "1353:22982:8:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212209afef5c067d8a5397ca824f2420c2ba523c0e0ab22bcc30e331efbe1ac0e7dfc64736f6c634300081e0033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP11 INVALID CREATE2 0xC0 PUSH8 0xD8A5397CA824F242 0xC 0x2B 0xA5 0x23 0xC0 RJUMP 0xAB22 0xBC 0xC3 0xE CALLER 0x1E EXTSTATICCALL RJUMPI 0xAC0E PUSH30 0xFC64736F6C634300081E0033000000000000000000000000000000000000 ",
							"sourceMap": "1353:22982:8:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)": "infinite",
								"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)": "infinite",
								"multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)": "infinite",
								"processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)": "infinite",
								"processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processProof(bytes32[] memory,bytes32)": "infinite",
								"processProof(bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"processProofCalldata(bytes32[] calldata,bytes32)": "infinite",
								"processProofCalldata(bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32)": "infinite",
								"verify(bytes32[] memory,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite",
								"verifyCalldata(bytes32[] calldata,bytes32,bytes32)": "infinite",
								"verifyCalldata(bytes32[] calldata,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 8,
									"value": "80"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 8,
									"value": "40"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "CALLVALUE",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "SWAP1",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "ASSIGNIMMUTABLE",
									"source": 8,
									"value": "library_deploy_address"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "RETURN",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 1353,
									"end": 24335,
									"name": "REVERT",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209afef5c067d8a5397ca824f2420c2ba523c0e0ab22bcc30e331efbe1ac0e7dfc64736f6c634300081e0033",
									".code": [
										{
											"begin": 1353,
											"end": 24335,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1353,
											"end": 24335,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/CharityRaffle.sol",
								"src/VRFConsumerBaseV2PlusCustom.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"src/CharityRaffle.sol": {
				"CharityRaffle": {
					"abi": [
						{
							"inputs": [],
							"name": "InsufficientFunds",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InsufficientValue",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidProof",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidRandomWords",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidRequest",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotAWinner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "have",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "want",
									"type": "address"
								}
							],
							"name": "OnlyCoordinatorCanFulfill",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "have",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "coordinator",
									"type": "address"
								}
							],
							"name": "OnlyOwnerOrCoordinator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "TransferFailed",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "VRFRequestAlreadyMade",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "WinnersNotSelected",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAddress",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "CharityWithdrawal",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "vrfCoordinator",
									"type": "address"
								}
							],
							"name": "CoordinatorSet",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "winner",
									"type": "address"
								}
							],
							"name": "PrizeClaimed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "requestId",
									"type": "uint256"
								}
							],
							"name": "RandomnessRequested",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "quantity",
									"type": "uint256"
								}
							],
							"name": "TicketPurchased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address[]",
									"name": "winners",
									"type": "address[]"
								}
							],
							"name": "WinnersSelected",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DENOMINATOR",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_qty",
									"type": "uint256"
								},
								{
									"internalType": "bytes32[]",
									"name": "_proof",
									"type": "bytes32[]"
								}
							],
							"name": "buyTicket",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "charityFunds",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "charityWallet",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimCharityFunds",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "claimPrize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_charityWallet",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_vrfSubsciptionId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "_vrfKeyHash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "_merkleRoot",
									"type": "bytes32"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "merkleRoot",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "numOfWinners",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "participants",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pricePersentageBPS",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "requestId",
									"type": "uint256"
								},
								{
									"internalType": "uint256[]",
									"name": "randomWords",
									"type": "uint256[]"
								}
							],
							"name": "rawFulfillRandomWords",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "requestRandomWinners",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "s_vrfCoordinator",
							"outputs": [
								{
									"internalType": "contract IVRFCoordinatorV2Plus",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_vrfCoordinator",
									"type": "address"
								}
							],
							"name": "setCoordinator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "ticketPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vrfKeyHash",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vrfRequestId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "vrfSubsciptionId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "winnerReward",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "winners",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "winnersSelected",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x80\n      dup1\n      0x40\n      mstore\n      jumpi(tag_11, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_11:\n      shr(0xe0, calldataload(0x00))\n      swap1\n      dup2\n      0x041d443e\n      eq\n      tag_13\n      jumpi\n      pop\n      dup1\n      0x1209b1f6\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x18a7ea5f\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x1fe543e3\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x2eb4a7ab\n      eq\n      tag_21\n      jumpi\n      dup1\n      0x35c1d349\n      eq\n      tag_23\n      jumpi\n      dup1\n      0x6bd5450a\n      eq\n      tag_25\n      jumpi\n      dup1\n      0x70740ac9\n      eq\n      tag_27\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_29\n      jumpi\n      dup1\n      0x74552552\n      eq\n      tag_31\n      jumpi\n      dup1\n      0x7b208769\n      eq\n      tag_33\n      jumpi\n      dup1\n      0x8a89c8c9\n      eq\n      tag_35\n      jumpi\n      dup1\n      0x8b39989b\n      eq\n      tag_37\n      jumpi\n      dup1\n      0x8bc53285\n      eq\n      tag_39\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_41\n      jumpi\n      dup1\n      0x8ea98117\n      eq\n      tag_43\n      jumpi\n      dup1\n      0x918f8674\n      eq\n      tag_45\n      jumpi\n      dup1\n      0x98617e2a\n      eq\n      tag_47\n      jumpi\n      dup1\n      0x98afca73\n      eq\n      tag_49\n      jumpi\n      dup1\n      0x9eccacf6\n      eq\n      tag_51\n      jumpi\n      dup1\n      0xb9705a03\n      eq\n      tag_53\n      jumpi\n      dup1\n      0xc7383be8\n      eq\n      tag_55\n      jumpi\n      dup1\n      0xe17901d8\n      eq\n      tag_57\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_59\n      jumpi\n      0xf9f23186\n      eq\n      tag_61\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_61:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0xa0))\n      tag_67\n      tag_2\n      jump\t// in\n    tag_67:\n      calldataload(0x24)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      swap1\n      dup2\n      swap1\n      sub\n      tag_68\n      jumpi\n      mload(0x00)\n      codecopy(0x00, data_e28a5566b8a884201ab44e2d991177ce8b88325e02e52cbc3da6e67b3ecf29c6, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sload\n      0xff\n      dup2\n      0x40\n      shr\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4301:4317  !$._initializing */\n      iszero\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap3\n      0xffffffffffffffff\n      dup3\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4724:4740  initialized == 0 */\n      dup1\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4724:4758  initialized == 0 && isTopLevelCall */\n      swap1\n      dup2\n      tag_70\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_71:\n      0x01\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4804  initialized == 1 */\n      eq\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4838  initialized == 1 && address(this).code.length == 0 */\n      swap1\n      dup2\n      tag_72\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_73:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4853:4866  !initialSetup */\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4853:4883  !initialSetup && !construction */\n      swap1\n      dup2\n      tag_74\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_75:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4849:4940  if (!initialSetup && !construction) {... */\n      pop\n      tag_76\n      jumpi\n      not(0xffffffffffffffff)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup3\n      and\n      0x01\n      or\n      mload(0x00)\n      codecopy(0x00, data_e28a5566b8a884201ab44e2d991177ce8b88325e02e52cbc3da6e67b3ecf29c6, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6959:6960  _ */\n      tag_78\n      swap2\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup5\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4977:5044  if (isTopLevelCall) {... */\n      tag_79\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_80:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6891:6967  modifier onlyInitializing() {... */\n      pop\n      tag_81\n      tag_10\n      jump\t// in\n    tag_81:\n      tag_82\n      tag_10\n      jump\t// in\n    tag_82:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":6959:6960  _ */\n      tag_7\n      jump\t// in\n    tag_78:\n        /* \"src/CharityRaffle.sol\":1777:1819  0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B */\n      0x9ddfaca8183c41ad55329bdeed9f6a8d53168b1b\n      sub(shl(0x60, 0x01), 0x01)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0xa0\n      shl\n      sload(0x00)\n      and\n      or\n      0x00\n      sstore\n        /* \"src/CharityRaffle.sol\":1900:1911  0.001 ether */\n      0x038d7ea4c68000\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x01\n      sstore\n        /* \"src/CharityRaffle.sol\":1966:1967  2 */\n      0x02\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup1\n      sstore\n        /* \"src/CharityRaffle.sol\":2033:2037  3000 */\n      0x0bb8\n        /* \"src/CharityRaffle.sol\":2012:2037  pricePersentageBPS = 3000 */\n      0x03\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sstore\n      and(sload(0x04), shl(0xa0, sub(shl(0x60, 0x01), 0x01)))\n      or\n      0x04\n      sstore\n      calldataload(0x44)\n        /* \"src/CharityRaffle.sol\":2134:2170  vrfSubsciptionId = _vrfSubsciptionId */\n      0x05\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sstore\n      calldataload(0x64)\n        /* \"src/CharityRaffle.sol\":2180:2204  vrfKeyHash = _vrfKeyHash */\n      0x06\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sstore\n      calldataload(0x84)\n        /* \"src/CharityRaffle.sol\":2214:2238  merkleRoot = _merkleRoot */\n      0x08\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5064:5165  if (isTopLevelCall) {... */\n      tag_83\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      stop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5064:5165  if (isTopLevelCall) {... */\n    tag_83:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      not(0xff0000000000000000)\n      mload(0x00)\n      codecopy(0x00, data_e28a5566b8a884201ab44e2d991177ce8b88325e02e52cbc3da6e67b3ecf29c6, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sload\n      and\n      mload(0x00)\n      codecopy(0x00, data_e28a5566b8a884201ab44e2d991177ce8b88325e02e52cbc3da6e67b3ecf29c6, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n      mload(0x40)\n      0x01\n      dup2\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":5140:5154  Initialized(1) */\n      log1\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      stop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4977:5044  if (isTopLevelCall) {... */\n    tag_79:\n      not(0xffffffffffffffffff)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      and\n      0x010000000000000001\n      or\n      mload(0x00)\n      codecopy(0x00, data_e28a5566b8a884201ab44e2d991177ce8b88325e02e52cbc3da6e67b3ecf29c6, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4977:5044  if (isTopLevelCall) {... */\n      0x00\n      jump(tag_80)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4849:4940  if (!initialSetup && !construction) {... */\n    tag_76:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4906:4929  InvalidInitialization() */\n      shl(0xe0, 0xf92ee8a9)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4906:4929  InvalidInitialization() */\n      mstore\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x04\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4906:4929  InvalidInitialization() */\n      revert\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4853:4883  !initialSetup && !construction */\n    tag_74:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4870:4883  !construction */\n      swap1\n      pop\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4853:4883  !initialSetup && !construction */\n      0x00\n      jump(tag_75)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4838  initialized == 1 && address(this).code.length == 0 */\n    tag_72:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4816:4820  this */\n      address\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4808:4833  address(this).code.length */\n      extcodesize\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4808:4838  address(this).code.length == 0 */\n      iszero\n      swap2\n      pop\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4788:4838  initialized == 1 && address(this).code.length == 0 */\n      jump(tag_73)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":4724:4758  initialized == 0 && isTopLevelCall */\n    tag_70:\n      dup6\n      swap2\n      pop\n      jump(tag_71)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_68:\n      0x00\n      dup1\n      revert\n    tag_59:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x20))\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2357:2358  _ */\n      tag_89\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      tag_90\n      tag_2\n      jump\t// in\n    tag_90:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2303:2365  modifier onlyOwner() {... */\n      tag_82\n      tag_9\n      jump\t// in\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2357:2358  _ */\n    tag_89:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      stop\n    tag_57:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"src/CharityRaffle.sol\":813:840  uint256 public charityFunds */\n      0x0a\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_55:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"src/CharityRaffle.sol\":541:568  uint256 public numOfWinners */\n      0x02\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_53:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"src/CharityRaffle.sol\":780:807  uint256 public winnerReward */\n      0x09\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_51:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      sload(0x00)\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_49:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2303:2365  modifier onlyOwner() {... */\n      tag_112\n      tag_9\n      jump\t// in\n    tag_112:\n        /* \"src/CharityRaffle.sol\":2890:2902  vrfRequestId */\n      0x07\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      tag_113\n      jumpi\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      sload(0x00)\n      and\n        /* \"src/CharityRaffle.sol\":3069:3079  vrfKeyHash */\n      0x06\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n        /* \"src/CharityRaffle.sol\":3104:3120  vrfSubsciptionId */\n      0x05\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      swap2\n      0xffffffff\n        /* \"src/CharityRaffle.sol\":3239:3251  numOfWinners */\n      0x02\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      and\n      swap1\n      mload(0x40)\n      swap4\n      0x20\n      dup6\n      add\n      dup6\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_118\n      jumpi\n      0x40\n      mstore\n      0x00\n      dup6\n      mstore\n      mload(0x40)\n      swap5\n      shl(0xe3, 0x125fa267)\n      0x20\n        /* \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":581:633  abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs) */\n      dup8\n      add\n      mstore\n        /* \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":204:240  bytes4(keccak256(\"VRF ExtraArgsV1\")) */\n      mload\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      iszero\n      iszero\n        /* \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":581:633  abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs) */\n      0x24\n      dup7\n      add\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mstore\n        /* \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":581:633  abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs) */\n      0x24\n      dup6\n      mstore\n      tag_117\n      0x44\n      dup7\n      tag_3\n      jump\t// in\n    tag_117:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mload(0x40)\n      swap5\n      0xc0\n      dup7\n      add\n      swap5\n      dup7\n      dup7\n      lt\n      0xffffffffffffffff\n      dup8\n      gt\n      or\n      tag_118\n      jumpi\n      0xffff\n      swap7\n      0x20\n      0x00\n      swap4\n      0x0104\n      swap4\n      dup3\n      swap10\n      0x40\n      mstore\n      dup4\n      mstore\n        /* \"src/CharityRaffle.sol\":3007:3521  VRFV2PlusClient.RandomWordsRequest({... */\n      dup2\n      dup4\n      add\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap6\n      dup7\n      mstore\n      0xffffffff\n      0x40\n        /* \"src/CharityRaffle.sol\":3007:3521  VRFV2PlusClient.RandomWordsRequest({... */\n      dup5\n      add\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap9\n        /* \"src/CharityRaffle.sol\":3160:3161  3 */\n      0x03\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup11\n      mstore\n        /* \"src/CharityRaffle.sol\":3007:3521  VRFV2PlusClient.RandomWordsRequest({... */\n      dup2\n      0x60\n      dup7\n      add\n        /* \"src/CharityRaffle.sol\":3197:3204  1000000 */\n      0x0f4240\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup2\n      mstore\n        /* \"src/CharityRaffle.sol\":3007:3521  VRFV2PlusClient.RandomWordsRequest({... */\n      0x80\n      dup8\n      add\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap3\n      dup4\n      mstore\n        /* \"src/CharityRaffle.sol\":3007:3521  VRFV2PlusClient.RandomWordsRequest({... */\n      0xa0\n      dup8\n      add\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap5\n      dup6\n      mstore\n      mload(0x40)\n      swap14\n      dup15\n      swap13\n      dup14\n      swap12\n      dup13\n      swap10\n      shl(0xe1, 0x4d8e1c2f)\n        /* \"src/CharityRaffle.sol\":2958:3531  s_vrfCoordinator.requestRandomWords(... */\n      dup12\n      mstore\n      dup10\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x04\n        /* \"src/CharityRaffle.sol\":2958:3531  s_vrfCoordinator.requestRandomWords(... */\n      dup13\n      add\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mstore\n      mload\n        /* \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":581:633  abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs) */\n      0x24\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup12\n      add\n      mstore\n      mload\n        /* \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":581:633  abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs) */\n      0x44\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup11\n      add\n      mstore\n      mload\n      and\n      0x64\n      dup9\n      add\n      mstore\n      mload\n      and\n      0x84\n      dup7\n      add\n      mstore\n      mload\n      and\n      0xa4\n      dup5\n      add\n      mstore\n      mload\n      0xc0\n      0xc4\n      dup5\n      add\n      mstore\n      dup1\n      mload\n      swap2\n      dup3\n      swap2\n      dup3\n      0xe4\n      dup7\n      add\n      mstore\n      add\n      dup5\n      dup5\n      add\n      mcopy\n      dup2\n      dup2\n      add\n      dup4\n      add\n      dup5\n      swap1\n      mstore\n      0x1f\n      add\n      not(0x1f)\n      and\n      dup2\n      add\n        /* \"src/CharityRaffle.sol\":2958:3531  s_vrfCoordinator.requestRandomWords(... */\n      sub\n      add\n      swap3\n      gas\n      call\n      swap1\n      dup2\n      iszero\n      tag_120\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n        /* \"src/CharityRaffle.sol\":2958:3531  s_vrfCoordinator.requestRandomWords(... */\n      swap2\n      tag_122\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_123:\n      pop\n      dup1\n        /* \"src/CharityRaffle.sol\":2890:2902  vrfRequestId */\n      0x07\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sstore\n        /* \"src/CharityRaffle.sol\":3567:3600  participants.length * ticketPrice */\n      tag_124\n        /* \"src/CharityRaffle.sol\":3567:3579  participants */\n      0x0b\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      sload(0x01)\n        /* \"src/CharityRaffle.sol\":3567:3600  participants.length * ticketPrice */\n      swap1\n      tag_6\n      jump\t// in\n    tag_124:\n        /* \"src/CharityRaffle.sol\":3719:3746  winnerReward * numOfWinners */\n      tag_125\n        /* \"src/CharityRaffle.sol\":474:479  10000 */\n      0x2710\n        /* \"src/CharityRaffle.sol\":3626:3661  fundsCollected * pricePersentageBPS */\n      tag_126\n        /* \"src/CharityRaffle.sol\":3160:3161  3 */\n      0x03\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n        /* \"src/CharityRaffle.sol\":3626:3661  fundsCollected * pricePersentageBPS */\n      dup5\n      tag_6\n      jump\t// in\n    tag_126:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      div\n      dup1\n        /* \"src/CharityRaffle.sol\":3610:3676  winnerReward = (fundsCollected * pricePersentageBPS) / DENOMINATOR */\n      0x09\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sstore\n        /* \"src/CharityRaffle.sol\":3239:3251  numOfWinners */\n      0x02\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n        /* \"src/CharityRaffle.sol\":3719:3746  winnerReward * numOfWinners */\n      swap1\n      tag_6\n      jump\t// in\n    tag_125:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup2\n      sub\n      swap1\n      dup2\n      gt\n      tag_127\n      jumpi\n        /* \"src/CharityRaffle.sol\":3763:3796  RandomnessRequested(vrfRequestId) */\n      0x9ac10fb18c93d33ad7b0a941897aef048d0f8d30756684e82b4552ba12764d45\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap2\n      0x20\n      swap2\n        /* \"src/CharityRaffle.sol\":3686:3747  charityFunds = fundsCollected - (winnerReward * numOfWinners) */\n      0x0a\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"src/CharityRaffle.sol\":3763:3796  RandomnessRequested(vrfRequestId) */\n      log1\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      stop\n    tag_127:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n        /* \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":581:633  abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs) */\n      0x24\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n      revert\n        /* \"src/CharityRaffle.sol\":2958:3531  s_vrfCoordinator.requestRandomWords(... */\n    tag_122:\n      swap1\n      pop\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n        /* \"src/CharityRaffle.sol\":2958:3531  s_vrfCoordinator.requestRandomWords(... */\n      dup2\n      returndatasize\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n        /* \"src/CharityRaffle.sol\":2958:3531  s_vrfCoordinator.requestRandomWords(... */\n      gt\n      tag_129\n      jumpi\n    tag_130:\n      dup2\n      tag_131\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n        /* \"src/CharityRaffle.sol\":2958:3531  s_vrfCoordinator.requestRandomWords(... */\n      swap4\n      dup4\n      tag_3\n      jump\t// in\n    tag_131:\n      dup2\n      add\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sub\n      slt\n      tag_68\n      jumpi\n      mload\n        /* \"src/CharityRaffle.sol\":2958:3531  s_vrfCoordinator.requestRandomWords(... */\n      dup2\n      jump(tag_123)\n    tag_129:\n      returndatasize\n      swap2\n      pop\n      jump(tag_130)\n    tag_120:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n    tag_118:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n        /* \"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":581:633  abi.encodeWithSelector(EXTRA_ARGS_V1_TAG, extraArgs) */\n      0x24\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n      revert\n    tag_113:\n      mstore(0x00, shl(0xe0, 0x0d5bae95))\n      revert(0x00, 0x04)\n    tag_47:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"src/CharityRaffle.sol\":574:607  uint256 public pricePersentageBPS */\n      0x03\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_45:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      mload(0x40)\n        /* \"src/CharityRaffle.sol\":474:479  10000 */\n      0x2710\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup2\n      mstore\n      return\n    tag_43:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x20))\n      tag_146\n      tag_2\n      jump\t// in\n    tag_146:\n      mload(0x00)\n      codecopy(0x00, data_47f5c767712c0cb55e0943de27dbb2db3b8bdac1e899af22d477462089a99558, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8104:8114  msg.sender */\n      caller\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8104:8125  msg.sender != owner() */\n      dup2\n      eq\n      iszero\n      dup1\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8104:8168  msg.sender != owner() && msg.sender != address(s_vrfCoordinator) */\n      tag_147\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_148:\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8100:8334  if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {... */\n      tag_149\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      and\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7854:7883  _vrfCoordinator == address(0) */\n      dup1\n      iszero\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7850:7930  if (_vrfCoordinator == address(0)) {... */\n      tag_151\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n      dup2\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8012:8043  CoordinatorSet(_vrfCoordinator) */\n      0xd1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be6\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap3\n      and(sload(0x00), shl(0xa0, sub(shl(0x60, 0x01), 0x01)))\n      or\n      0x00\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8012:8043  CoordinatorSet(_vrfCoordinator) */\n      log1\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      stop\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7850:7930  if (_vrfCoordinator == address(0)) {... */\n    tag_151:\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7906:7919  ZeroAddress() */\n      shl(0xe0, 0xd92e233d)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7906:7919  ZeroAddress() */\n      mstore\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x04\n      0x00\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7906:7919  ZeroAddress() */\n      revert\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8100:8334  if (msg.sender != owner() && msg.sender != address(s_vrfCoordinator)) {... */\n    tag_149:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      sload(0x00)\n      and\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8191:8323  OnlyOwnerOrCoordinator(... */\n      swap1\n      shl(0xe0, 0x061db9c1)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8191:8323  OnlyOwnerOrCoordinator(... */\n      mstore\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8104:8114  msg.sender */\n      caller\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x04\n      mstore\n      0x24\n      mstore\n      0x44\n      mstore\n      0x64\n      0x00\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8191:8323  OnlyOwnerOrCoordinator(... */\n      revert\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8104:8168  msg.sender != owner() && msg.sender != address(s_vrfCoordinator) */\n    tag_147:\n      pop\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8104:8114  msg.sender */\n      caller\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8129:8168  msg.sender != address(s_vrfCoordinator) */\n      eq\n      iszero\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":8104:8168  msg.sender != owner() && msg.sender != address(s_vrfCoordinator) */\n      jump(tag_148)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_41:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      mload(0x00)\n      codecopy(0x00, data_47f5c767712c0cb55e0943de27dbb2db3b8bdac1e899af22d477462089a99558, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sload\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_39:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      0xff\n        /* \"src/CharityRaffle.sol\":927:954  bool public winnersSelected */\n      0x0d\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      and\n      mload(0x40)\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n    tag_37:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"src/CharityRaffle.sol\":647:678  uint256 public vrfSubsciptionId */\n      0x05\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_35:\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x40))\n      calldataload(0x24)\n      calldataload(0x04)\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_68\n      jumpi\n      calldatasize\n      0x23\n      dup4\n      add\n      slt\n      iszero\n      tag_68\n      jumpi\n      dup2\n      0x04\n      add\n      calldataload\n      swap2\n      tag_171\n      dup4\n      tag_4\n      jump\t// in\n    tag_171:\n      swap3\n      tag_172\n      mload(0x40)\n      swap5\n      dup6\n      tag_3\n      jump\t// in\n    tag_172:\n      dup1\n      dup5\n      mstore\n      0x24\n      0x20\n      dup6\n      add\n      swap2\n      0x05\n      shl\n      dup4\n      add\n      add\n      swap2\n      calldatasize\n      dup4\n      gt\n      tag_68\n      jumpi\n      0x24\n      add\n      swap1\n    tag_175:\n      dup3\n      dup3\n      lt\n      tag_176\n      jumpi\n      pop\n      pop\n      pop\n        /* \"src/CharityRaffle.sol\":2357:2375  ticketPrice * _qty */\n      tag_178\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup2\n      sload(0x01)\n        /* \"src/CharityRaffle.sol\":2357:2375  ticketPrice * _qty */\n      tag_6\n      jump\t// in\n    tag_178:\n        /* \"src/CharityRaffle.sol\":2344:2353  msg.value */\n      callvalue\n        /* \"src/CharityRaffle.sol\":2344:2375  msg.value == ticketPrice * _qty */\n      sub\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      tag_179\n      jumpi\n      mload(0x40)\n      0x20\n        /* \"src/CharityRaffle.sol\":2433:2455  abi.encode(msg.sender) */\n      dup2\n      add\n        /* \"src/CharityRaffle.sol\":2444:2454  msg.sender */\n      swap1\n      caller\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup3\n      mstore\n      0x20\n        /* \"src/CharityRaffle.sol\":2433:2455  abi.encode(msg.sender) */\n      dup2\n      mstore\n      tag_181\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x40\n        /* \"src/CharityRaffle.sol\":2433:2455  abi.encode(msg.sender) */\n      dup3\n      tag_3\n      jump\t// in\n    tag_181:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mload\n        /* \"src/CharityRaffle.sol\":2423:2456  keccak256(abi.encode(msg.sender)) */\n      swap1\n      keccak256\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap1\n        /* \"src/CharityRaffle.sol\":2547:2557  merkleRoot */\n      0x08\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      swap2\n      mload(0x40)\n      0x20\n        /* \"src/CharityRaffle.sol\":2585:2607  abi.encodePacked(leaf) */\n      dup2\n      add\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap2\n      dup3\n      mstore\n      0x20\n        /* \"src/CharityRaffle.sol\":2585:2607  abi.encodePacked(leaf) */\n      dup2\n      mstore\n      tag_182\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x40\n        /* \"src/CharityRaffle.sol\":2585:2607  abi.encodePacked(leaf) */\n      dup3\n      tag_3\n      jump\t// in\n    tag_182:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mload\n        /* \"src/CharityRaffle.sol\":2575:2608  keccak256(abi.encodePacked(leaf)) */\n      swap1\n      keccak256\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2601:2614  uint256 i = 0 */\n      swap1\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2596:2730  for (uint256 i = 0; i < proof.length; i++) {... */\n      swap2\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2634:2637  i++ */\n    tag_183:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup5\n      mload\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2616:2632  i < proof.length */\n      dup4\n      lt\n      iszero\n      tag_184\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2710:2718  proof[i] */\n      tag_186\n      dup4\n      dup7\n      tag_8\n      jump\t// in\n    tag_186:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mload\n      swap1\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:610  a < b */\n      dup2\n      dup2\n      lt\n      iszero\n      tag_187\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":889:1024  assembly (\"memory-safe\") {... */\n      mstore\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":889:1024  assembly (\"memory-safe\") {... */\n      mstore\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x01\n      0x40\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":889:1024  assembly (\"memory-safe\") {... */\n      keccak256\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:664  a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n    tag_189:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2634:2637  i++ */\n      swap3\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      add\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2601:2614  uint256 i = 0 */\n      swap2\n      jump(tag_183)\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:664  a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n    tag_187:\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":889:1024  assembly (\"memory-safe\") {... */\n      swap1\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":889:1024  assembly (\"memory-safe\") {... */\n      mstore\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":889:1024  assembly (\"memory-safe\") {... */\n      mstore\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x01\n      0x40\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":889:1024  assembly (\"memory-safe\") {... */\n      keccak256\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":605:664  a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a) */\n      jump(tag_189)\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2616:2632  i < proof.length */\n    tag_184:\n      dup4\n        /* \"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":2016:2049  processProof(proof, leaf) == root */\n      sub\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      tag_190\n      jumpi\n      0x00\n        /* \"src/CharityRaffle.sol\":2691:2699  i < _qty */\n    tag_192:\n      dup2\n      dup2\n      lt\n      tag_193\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      pop\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"src/CharityRaffle.sol\":2775:2808  TicketPurchased(msg.sender, _qty) */\n      0x0668f5b446eb814fe35b3206f43f14bd8567ba04ddaf7a3ee56516929ab22ccb\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n        /* \"src/CharityRaffle.sol\":2444:2454  msg.sender */\n      caller\n        /* \"src/CharityRaffle.sol\":2775:2808  TicketPurchased(msg.sender, _qty) */\n      swap3\n      log2\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      stop\n        /* \"src/CharityRaffle.sol\":2701:2704  i++ */\n    tag_193:\n        /* \"src/CharityRaffle.sol\":2720:2732  participants */\n      0x0b\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      swap1\n      0x010000000000000000\n      dup3\n      lt\n      iszero\n      tag_118\n      jumpi\n      tag_197\n      dup3\n      0x01\n      dup1\n      swap5\n      add\n        /* \"src/CharityRaffle.sol\":2720:2732  participants */\n      0x0b\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sstore\n      tag_1\n      jump\t// in\n    tag_197:\n      dup2\n      sload\n      swap1\n      0x03\n      shl\n        /* \"src/CharityRaffle.sol\":2444:2454  msg.sender */\n      swap1\n      caller\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup3\n      shl\n      swap2\n      dup6\n      dup1\n      0xa0\n      shl\n      sub\n      swap1\n      shl\n      not\n      and\n      or\n      swap1\n      sstore\n      add\n        /* \"src/CharityRaffle.sol\":2676:2689  uint256 i = 0 */\n      jump(tag_192)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_190:\n      mstore(0x00, shl(0xe0, 0x09bde339))\n      revert(0x00, 0x04)\n    tag_179:\n      mstore(0x00, shl(0xe2, 0x044044a5))\n      revert(0x00, 0x04)\n    tag_176:\n      dup2\n      calldataload\n      dup2\n      mstore\n      0x20\n      swap2\n      dup3\n      add\n      swap2\n      add\n      jump(tag_175)\n    tag_33:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      sload(0x04)\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap2\n      and\n      dup2\n      mstore\n      0x20\n      swap1\n      return\n    tag_31:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2303:2365  modifier onlyOwner() {... */\n      tag_206\n      tag_9\n      jump\t// in\n    tag_206:\n        /* \"src/CharityRaffle.sol\":5508:5520  charityFunds */\n      0x0a\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n        /* \"src/CharityRaffle.sol\":5508:5524  charityFunds > 0 */\n      dup1\n      iszero\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      tag_207\n      jumpi\n      0xff\n        /* \"src/CharityRaffle.sol\":5564:5579  winnersSelected */\n      0x0d\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      and\n      iszero\n      tag_209\n      jumpi\n        /* \"src/CharityRaffle.sol\":5633:5654  address(this).balance */\n      dup1\n      selfbalance\n        /* \"src/CharityRaffle.sol\":5633:5670  address(this).balance >= charityFunds */\n      lt\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      tag_211\n      jumpi\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x04))\n        /* \"src/CharityRaffle.sol\":5761:5788  charityWallet != address(0) */\n      dup1\n      iszero\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      tag_213\n      jumpi\n      0x00\n        /* \"src/CharityRaffle.sol\":5845:5897  payable(charityWallet).call{value: charityFunds}(\"\") */\n      dup1\n      dup1\n      swap4\n      dup2\n      swap4\n      gas\n      call\n      tag_215\n      tag_5\n      jump\t// in\n    tag_215:\n      pop\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      iszero\n      tag_216\n      jumpi\n      0x00\n        /* \"src/CharityRaffle.sol\":5508:5520  charityFunds */\n      0x0a\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sstore\n        /* \"src/CharityRaffle.sol\":6021:6052  CharityWithdrawal(charityFunds) */\n      0x5689f9ef5be164071958e27dca7a9df000791288fb23c621501d67b6a808848b\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n      mload(0x40)\n      0x00\n      dup2\n      mstore\n        /* \"src/CharityRaffle.sol\":6021:6052  CharityWithdrawal(charityFunds) */\n      log1\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      stop\n    tag_216:\n      mstore(0x00, shl(0xe3, 0x12171d83))\n      revert(0x00, 0x04)\n    tag_213:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x16\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x52, 0x10da185c9a5d1e481dd85b1b195d081b9bdd081cd95d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_211:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x2f\n      0x24\n      dup3\n      add\n      mstore\n      0x496e73756666696369656e7420636f6e74726163742062616c616e636520666f\n      0x44\n      dup3\n      add\n      mstore\n      shl(0x88, 0x7220636861726974792066756e6473)\n      0x64\n      dup3\n      add\n      mstore\n      0x84\n      swap1\n      revert\n    tag_209:\n      mstore(0x00, shl(0xe2, 0x30d747f9))\n      revert(0x00, 0x04)\n    tag_207:\n      mstore(0x00, shl(0xe0, 0x356680b7))\n      revert(0x00, 0x04)\n    tag_29:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2303:2365  modifier onlyOwner() {... */\n      tag_222\n      tag_9\n      jump\t// in\n    tag_222:\n      mload(0x00)\n      codecopy(0x00, data_47f5c767712c0cb55e0943de27dbb2db3b8bdac1e899af22d477462089a99558, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      swap1\n      swap2\n      sstore\n      0x00\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup3\n      dup1\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      stop\n    tag_27:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n        /* \"src/CharityRaffle.sol\":5053:5063  msg.sender */\n      caller\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n      mstore\n        /* \"src/CharityRaffle.sol\":5045:5052  winners */\n      0x0c\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n      mstore\n      jumpi(tag_227, iszero(and(sload(keccak256(0x00, 0x40)), 0xff)))\n        /* \"src/CharityRaffle.sol\":5110:5131  address(this).balance */\n      selfbalance\n        /* \"src/CharityRaffle.sol\":5135:5147  winnerReward */\n      0x09\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      gt\n      tag_229\n      jumpi\n        /* \"src/CharityRaffle.sol\":5053:5063  msg.sender */\n      caller\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n      mstore\n        /* \"src/CharityRaffle.sol\":5045:5052  winners */\n      0x0c\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      not(0xff)\n      dup2\n      sload\n      and\n      swap1\n      sstore\n      0x00\n      dup1\n      dup1\n      dup1\n        /* \"src/CharityRaffle.sol\":5135:5147  winnerReward */\n      0x09\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n        /* \"src/CharityRaffle.sol\":5053:5063  msg.sender */\n      caller\n        /* \"src/CharityRaffle.sol\":5296:5345  payable(msg.sender).call{value: winnerReward}(\"\") */\n      gas\n      call\n      tag_231\n      tag_5\n      jump\t// in\n    tag_231:\n      pop\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      iszero\n      tag_216\n      jumpi\n        /* \"src/CharityRaffle.sol\":5053:5063  msg.sender */\n      caller\n        /* \"src/CharityRaffle.sol\":5405:5429  PrizeClaimed(msg.sender) */\n      0x09f058359c5a4d11027ce8027f5f0f4df210cb3ebac92f2c584170ed78624dd8\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n        /* \"src/CharityRaffle.sol\":5405:5429  PrizeClaimed(msg.sender) */\n      dup1\n      log2\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      stop\n    tag_229:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x1d\n      0x24\n      dup3\n      add\n      mstore\n      0x496e73756666696369656e7420636f6e74726163742062616c616e6365000000\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_227:\n      mstore(0x00, shl(0xe1, 0x58cd4fc1))\n      revert(0x00, 0x04)\n    tag_25:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x20))\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_238\n      tag_2\n      jump\t// in\n    tag_238:\n      and\n      0x00\n      mstore\n        /* \"src/CharityRaffle.sol\":882:921  mapping(address => bool) public winners */\n      0x0c\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n      mstore\n      0x20\n      and(sload(keccak256(0x00, 0x40)), 0xff)\n      mload(0x40)\n      swap1\n      iszero\n      iszero\n      dup2\n      mstore\n      return\n    tag_23:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x20))\n      calldataload(0x04)\n        /* \"src/CharityRaffle.sol\":847:876  address[] public participants */\n      0x0b\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n        /* \"src/CharityRaffle.sol\":847:876  address[] public participants */\n      dup2\n      lt\n      iszero\n      tag_68\n      jumpi\n      tag_245\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n        /* \"src/CharityRaffle.sol\":847:876  address[] public participants */\n      swap2\n      tag_1\n      jump\t// in\n    tag_245:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap1\n      sload\n      mload(0x40)\n      0x03\n      swap3\n      swap1\n      swap3\n      shl\n      shr\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      mstore\n      return\n    tag_21:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"src/CharityRaffle.sol\":748:773  bytes32 public merkleRoot */\n      0x08\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_19:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x40))\n      calldataload(0x24)\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_68\n      jumpi\n      calldatasize\n      0x23\n      dup3\n      add\n      slt\n      iszero\n      tag_68\n      jumpi\n      dup1\n      0x04\n      add\n      calldataload\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_68\n      jumpi\n      calldatasize\n      0x24\n      dup3\n      0x05\n      shl\n      dup5\n      add\n      add\n      gt\n      tag_68\n      jumpi\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7425:7435  msg.sender */\n      caller\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7425:7464  msg.sender != address(s_vrfCoordinator) */\n      dup2\n      swap1\n      sub\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7421:7608  if (msg.sender != address(s_vrfCoordinator)) {... */\n      tag_262\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      pop\n        /* \"src/CharityRaffle.sol\":4156:4168  vrfRequestId */\n      0x07\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      calldataload(0x04)\n        /* \"src/CharityRaffle.sol\":4143:4168  requestId == vrfRequestId */\n      sub\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      tag_264\n      jumpi\n        /* \"src/CharityRaffle.sol\":4227:4239  numOfWinners */\n      0x02\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n        /* \"src/CharityRaffle.sol\":4205:4239  randomWords.length == numOfWinners */\n      dup1\n      dup3\n      sub\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      tag_266\n      jumpi\n      tag_268\n      tag_269\n      dup3\n      tag_4\n      jump\t// in\n    tag_269:\n      swap2\n      tag_270\n      mload(0x40)\n      swap4\n      dup5\n      tag_3\n      jump\t// in\n    tag_270:\n      dup1\n      dup4\n      mstore\n      tag_4\n      jump\t// in\n    tag_268:\n      0x20\n      dup3\n      add\n      swap4\n      swap1\n      not(0x1f)\n      add\n      calldatasize\n      dup6\n      calldatacopy\n      0x00\n        /* \"src/CharityRaffle.sol\":4343:4984  for (uint256 i = 0; i < numOfWinners; i++) {... */\n      swap3\n        /* \"src/CharityRaffle.sol\":4381:4384  i++ */\n    tag_271:\n        /* \"src/CharityRaffle.sol\":4227:4239  numOfWinners */\n      0x02\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n        /* \"src/CharityRaffle.sol\":4363:4379  i < numOfWinners */\n      dup5\n      lt\n      iszero\n      tag_89\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup1\n      dup5\n      lt\n      iszero\n      tag_274\n      jumpi\n      0x24\n      dup5\n      0x05\n      shl\n      dup4\n      add\n      add\n      calldataload\n        /* \"src/CharityRaffle.sol\":4450:4888  while (true) {... */\n    tag_276:\n        /* \"src/CharityRaffle.sol\":4516:4528  participants */\n      0x0b\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      dup1\n      iszero\n      tag_277\n      jumpi\n        /* \"src/CharityRaffle.sol\":4570:4595  participants[winnerIndex] */\n      tag_279\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap1\n      dup3\n      mod\n        /* \"src/CharityRaffle.sol\":4570:4595  participants[winnerIndex] */\n      tag_1\n      jump\t// in\n    tag_279:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      swap1\n      sload\n      0x03\n      swap2\n      swap1\n      swap2\n      shl\n      shr\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"src/CharityRaffle.sol\":4619:4626  winners */\n      0x0c\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"src/CharityRaffle.sol\":4618:4634  !winners[winner] */\n      iszero\n        /* \"src/CharityRaffle.sol\":4614:4772  if (!winners[winner]) {... */\n      tag_280\n      jumpi\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      pop\n      0x01\n      dup2\n      add\n      dup1\n      swap2\n      gt\n      tag_127\n      jumpi\n      not(0x00)\n      swap1\n      mod\n        /* \"src/CharityRaffle.sol\":4450:4888  while (true) {... */\n      jump(tag_276)\n        /* \"src/CharityRaffle.sol\":4614:4772  if (!winners[winner]) {... */\n    tag_280:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup1\n      swap2\n      pop\n      0x00\n      swap6\n      swap3\n      swap6\n      mstore\n        /* \"src/CharityRaffle.sol\":4619:4626  winners */\n      0x0c\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      0x01\n      not(0xff)\n      dup3\n      sload\n      and\n      or\n      swap1\n      sstore\n        /* \"src/CharityRaffle.sol\":4702:4726  winnersArray[i] = winner */\n      tag_284\n      dup3\n      dup6\n      tag_8\n      jump\t// in\n    tag_284:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mstore\n      0x01\n      not(0xff)\n        /* \"src/CharityRaffle.sol\":4902:4924  winnersSelected = true */\n      0x0d\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      and\n      or\n        /* \"src/CharityRaffle.sol\":4902:4924  winnersSelected = true */\n      0x0d\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sstore\n      mload(0x40)\n      0x20\n      dup2\n      add\n      0x20\n      dup3\n      mstore\n      dup5\n      mload\n      dup1\n      swap2\n      mstore\n      0x40\n      dup3\n      add\n      swap1\n      dup8\n      swap1\n      0x00\n      swap1\n    tag_285:\n      dup1\n      dup3\n      lt\n      tag_286\n      jumpi\n        /* \"src/CharityRaffle.sol\":4944:4973  WinnersSelected(winnersArray) */\n      pop\n      pop\n      pop\n      dup2\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x01\n        /* \"src/CharityRaffle.sol\":4944:4973  WinnersSelected(winnersArray) */\n      swap4\n      swap3\n      0x32a1b5731a757f192a06ca973715ca4dbc42c2d15323cabaa74e0a2d5dc088e4\n      swap3\n      sub\n      swap1\n      log1\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      add\n        /* \"src/CharityRaffle.sol\":4348:4361  uint256 i = 0 */\n      swap3\n      jump(tag_271)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_286:\n      dup3\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup5\n      mstore\n      0x20\n      swap4\n      dup5\n      add\n      swap4\n      swap1\n      swap3\n      add\n      swap2\n      0x01\n      swap1\n      swap2\n      add\n      swap1\n      jump(tag_285)\n    tag_277:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n    tag_274:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_266:\n      mstore(0x00, shl(0xe1, 0x1f9efadb))\n      revert(0x00, 0x04)\n    tag_264:\n      mstore(0x00, shl(0xe0, 0x41abc801))\n      revert(0x00, 0x04)\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7421:7608  if (msg.sender != address(s_vrfCoordinator)) {... */\n    tag_262:\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7487:7597  OnlyCoordinatorCanFulfill(... */\n      shl(0xe2, 0x073e64fd)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x00\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7487:7597  OnlyCoordinatorCanFulfill(... */\n      mstore\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7425:7435  msg.sender */\n      caller\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0x04\n      mstore\n      0x24\n      mstore\n      0x44\n      0x00\n        /* \"src/VRFConsumerBaseV2PlusCustom.sol\":7487:7597  OnlyCoordinatorCanFulfill(... */\n      revert\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_17:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"src/CharityRaffle.sol\":715:742  uint256 public vrfRequestId */\n      0x07\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_15:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"src/CharityRaffle.sol\":509:535  uint256 public ticketPrice */\n      0x01\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_13:\n      jumpi(tag_68, callvalue)\n      jumpi(tag_68, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      swap1\n        /* \"src/CharityRaffle.sol\":684:709  bytes32 public vrfKeyHash */\n      0x06\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      dup2\n      mstore\n      return\n    tag_1:\n        /* \"src/CharityRaffle.sol\":4516:4528  participants */\n      0x0b\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      dup2\n      lt\n      iszero\n      tag_274\n      jumpi\n        /* \"src/CharityRaffle.sol\":4516:4528  participants */\n      0x0b\n      0x00\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      swap1\n      0x00\n      swap1\n      jump\t// out\n    tag_2:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_68\n      jumpi\n      jump\t// out\n    tag_3:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_118\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_4:\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_118\n      jumpi\n      0x05\n      shl\n      0x20\n      add\n      swap1\n      jump\t// out\n    tag_5:\n      jumpi(tag_308, iszero(returndatasize))\n      returndatasize\n      swap1\n      0xffffffffffffffff\n      dup3\n      gt\n      tag_118\n      jumpi\n      mload(0x40)\n      swap2\n      tag_312\n      0x1f\n      dup3\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup5\n      tag_3\n      jump\t// in\n    tag_312:\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump\t// out\n    tag_308:\n      0x60\n      swap1\n      jump\t// out\n    tag_6:\n      dup2\n      dup2\n      mul\n      swap3\n      swap2\n      dup2\n      iszero\n      swap2\n      dup5\n      div\n      eq\n      or\n      iszero\n      tag_127\n      jumpi\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_7:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3489:3511  newOwner == address(0) */\n      dup1\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n      tag_316\n      jumpi\n      mload(0x00)\n      codecopy(0x00, data_47f5c767712c0cb55e0943de27dbb2db3b8bdac1e899af22d477462089a99558, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup2\n      and\n      dup4\n      or\n      swap1\n      swap2\n      sstore\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3975:4015  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      0x00\n      dup1\n      log3\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3405:3620  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3485:3576  if (newOwner == address(0)) {... */\n    tag_316:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      shl(0xe0, 0x1e4fbdf7)\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3509:3510  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      mstore\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3509:3510  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      0x04\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mstore\n      0x24\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3509:3510  0 */\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":3534:3565  OwnableInvalidOwner(address(0)) */\n      revert\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n    tag_8:\n      dup1\n      mload\n      dup3\n      lt\n      iszero\n      tag_274\n      jumpi\n      0x20\n      swap2\n      0x05\n      shl\n      add\n      add\n      swap1\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n    tag_9:\n      mload(0x00)\n      codecopy(0x00, data_47f5c767712c0cb55e0943de27dbb2db3b8bdac1e899af22d477462089a99558, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2717:2740  owner() != _msgSender() */\n      sub\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n      tag_320\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2658:2820  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2713:2814  if (owner() != _msgSender()) {... */\n    tag_320:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      mstore(0x00, shl(0xe0, 0x118cdaa7))\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      mstore\n      0x24\n      0x00\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":2763:2803  OwnableUnauthorizedAccount(_msgSender()) */\n      revert\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7082:7223  function _checkInitializing() internal view virtual {... */\n    tag_10:\n        /* \"src/CharityRaffle.sol\":356:6061  contract CharityRaffle is OwnableUpgradeable, VRFConsumerBaseV2PlusCustom {... */\n      0xff\n      mload(0x00)\n      codecopy(0x00, data_e28a5566b8a884201ab44e2d991177ce8b88325e02e52cbc3da6e67b3ecf29c6, 0x20)\n      mload(0x00)\n      swap1\n      0x00\n      mstore\n      sload\n      0x40\n      shr\n      and\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7148:7166  !_isInitializing() */\n      iszero\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7144:7217  if (!_isInitializing()) {... */\n      tag_322\n      jumpi\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7082:7223  function _checkInitializing() internal view virtual {... */\n      jump\t// out\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7144:7217  if (!_isInitializing()) {... */\n    tag_322:\n        /* \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":7189:7206  NotInitializing() */\n      mstore(0x00, shl(0xe3, 0x1afcd79f))\n      revert(0x00, 0x04)\n    stop\n    data_47f5c767712c0cb55e0943de27dbb2db3b8bdac1e899af22d477462089a99558 9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n    data_e28a5566b8a884201ab44e2d991177ce8b88325e02e52cbc3da6e67b3ecf29c6 f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n\n    auxdata: 0xa2646970667358221220f856e70277f81e88c99771502b6a8ad444179617e01bd60cc7e8c8daf9d1686364736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x15 JUMPI PUSH2 0x10E3 SWAP1 DUP2 PUSH2 0x1A DUP3 CODECOPY RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x41D443E EQ PUSH2 0xEB6 JUMPI POP DUP1 PUSH4 0x1209B1F6 EQ PUSH2 0xE99 JUMPI DUP1 PUSH4 0x18A7EA5F EQ PUSH2 0xE7C JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0xC5B JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0xC3E JUMPI DUP1 PUSH4 0x35C1D349 EQ PUSH2 0xBFC JUMPI DUP1 PUSH4 0x6BD5450A EQ PUSH2 0xBBF JUMPI DUP1 PUSH4 0x70740AC9 EQ PUSH2 0xAEA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA83 JUMPI DUP1 PUSH4 0x74552552 EQ PUSH2 0x930 JUMPI DUP1 PUSH4 0x7B208769 EQ PUSH2 0x908 JUMPI DUP1 PUSH4 0x8A89C8C9 EQ PUSH2 0x752 JUMPI DUP1 PUSH4 0x8B39989B EQ PUSH2 0x735 JUMPI DUP1 PUSH4 0x8BC53285 EQ PUSH2 0x713 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0x8EA98117 EQ PUSH2 0x60A JUMPI DUP1 PUSH4 0x918F8674 EQ PUSH2 0x5EE JUMPI DUP1 PUSH4 0x98617E2A EQ PUSH2 0x5D1 JUMPI DUP1 PUSH4 0x98AFCA73 EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x9ECCACF6 EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0xB9705A03 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0xC7383BE8 EQ PUSH2 0x338 JUMPI DUP1 PUSH4 0xE17901D8 EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2F5 JUMPI PUSH4 0xF9F23186 EQ PUSH2 0x12F JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0x148 PUSH2 0xEE8 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2F1 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0xFF DUP2 PUSH1 0x40 SHR AND ISZERO SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND DUP1 ISZERO SWAP1 DUP2 PUSH2 0x2E9 JUMPI JUMPDEST PUSH1 0x1 EQ SWAP1 DUP2 PUSH2 0x2DF JUMPI JUMPDEST ISZERO SWAP1 DUP2 PUSH2 0x2D6 JUMPI JUMPDEST POP PUSH2 0x2C7 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP3 AND PUSH1 0x1 OR PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SSTORE PUSH2 0x1DE SWAP2 DUP5 PUSH2 0x29B JUMPI JUMPDEST POP PUSH2 0x1D1 PUSH2 0x1042 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x1042 JUMP JUMPDEST PUSH2 0xF8A JUMP JUMPDEST PUSH20 0x9DDFACA8183C41AD55329BDEED9F6A8D53168B1B PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH0 SLOAD AND OR PUSH0 SSTORE PUSH7 0x38D7EA4C68000 PUSH1 0x1 SSTORE PUSH1 0x2 DUP1 SSTORE PUSH2 0xBB8 PUSH1 0x3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x5 SSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x6 SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x8 SSTORE PUSH2 0x244 JUMPI STOP JUMPDEST PUSH9 0xFF0000000000000000 NOT PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD AND PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH9 0xFFFFFFFFFFFFFFFFFF NOT AND PUSH9 0x10000000000000001 OR PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SSTORE PUSH0 PUSH2 0x1C8 JUMP JUMPDEST PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 POP ISZERO PUSH0 PUSH2 0x19B JUMP JUMPDEST ADDRESS EXTCODESIZE ISZERO SWAP2 POP PUSH2 0x193 JUMP JUMPDEST DUP6 SWAP2 POP PUSH2 0x189 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0x319 PUSH2 0x311 PUSH2 0xEE8 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x100F JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0xA SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0x3B1 PUSH2 0x100F JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x5C2 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH0 SLOAD AND PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD SWAP2 PUSH4 0xFFFFFFFF PUSH1 0x2 SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP4 PUSH1 0x20 DUP6 ADD DUP6 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5AE JUMPI PUSH1 0x40 MSTORE PUSH0 DUP6 MSTORE PUSH1 0x40 MLOAD SWAP5 PUSH4 0x125FA267 PUSH1 0xE3 SHL PUSH1 0x20 DUP8 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x24 DUP6 MSTORE PUSH2 0x41C PUSH1 0x44 DUP7 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP5 PUSH1 0xC0 DUP7 ADD SWAP5 DUP7 DUP7 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP8 GT OR PUSH2 0x5AE JUMPI PUSH2 0xFFFF SWAP7 PUSH1 0x20 PUSH0 SWAP4 PUSH2 0x104 SWAP4 DUP3 SWAP10 PUSH1 0x40 MSTORE DUP4 MSTORE DUP2 DUP4 ADD SWAP6 DUP7 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x40 DUP5 ADD SWAP9 PUSH1 0x3 DUP11 MSTORE DUP2 PUSH1 0x60 DUP7 ADD PUSH3 0xF4240 DUP2 MSTORE PUSH1 0x80 DUP8 ADD SWAP3 DUP4 MSTORE PUSH1 0xA0 DUP8 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 MLOAD SWAP14 DUP15 SWAP13 DUP14 SWAP12 DUP13 SWAP10 PUSH4 0x4D8E1C2F PUSH1 0xE1 SHL DUP12 MSTORE DUP10 PUSH1 0x4 DUP13 ADD MSTORE MLOAD PUSH1 0x24 DUP12 ADD MSTORE MLOAD PUSH1 0x44 DUP11 ADD MSTORE MLOAD AND PUSH1 0x64 DUP9 ADD MSTORE MLOAD AND PUSH1 0x84 DUP7 ADD MSTORE MLOAD AND PUSH1 0xA4 DUP5 ADD MSTORE MLOAD PUSH1 0xC0 PUSH1 0xC4 DUP5 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH1 0xE4 DUP7 ADD MSTORE ADD DUP5 DUP5 ADD MCOPY DUP2 DUP2 ADD DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x5A3 JUMPI PUSH0 SWAP2 PUSH2 0x571 JUMPI JUMPDEST POP DUP1 PUSH1 0x7 SSTORE PUSH2 0x503 PUSH1 0xB SLOAD PUSH1 0x1 SLOAD SWAP1 PUSH2 0xF77 JUMP JUMPDEST PUSH2 0x523 PUSH2 0x2710 PUSH2 0x515 PUSH1 0x3 SLOAD DUP5 PUSH2 0xF77 JUMP JUMPDEST DIV DUP1 PUSH1 0x9 SSTORE PUSH1 0x2 SLOAD SWAP1 PUSH2 0xF77 JUMP JUMPDEST DUP2 SUB SWAP1 DUP2 GT PUSH2 0x55D JUMPI PUSH32 0x9AC10FB18C93D33AD7B0A941897AEF048D0F8D30756684E82B4552BA12764D45 SWAP2 PUSH1 0x20 SWAP2 PUSH1 0xA SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x59B JUMPI JUMPDEST DUP2 PUSH2 0x58C PUSH1 0x20 SWAP4 DUP4 PUSH2 0xEFE JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2F1 JUMPI MLOAD DUP2 PUSH2 0x4EF JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x57F JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0xD5BAE95 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x2710 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0x623 PUSH2 0xEE8 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x106E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ ISZERO DUP1 PUSH2 0x6CB JUMPI JUMPDEST PUSH2 0x6A7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x698 JUMPI PUSH1 0x20 DUP2 PUSH32 0xD1A6A14209A385A964D036E404CB5CFB71F4000CDB03C9366292430787261BE6 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH0 SLOAD AND OR PUSH0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH4 0xD92E233D PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH0 SLOAD AND SWAP1 PUSH4 0x61DB9C1 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST POP PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x645 JUMP JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x106E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xD SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x2F1 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x2F1 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH2 0x78D DUP4 PUSH2 0xF20 JUMP JUMPDEST SWAP3 PUSH2 0x79B PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xEFE JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x24 PUSH1 0x20 DUP6 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x2F1 JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x8F8 JUMPI POP POP POP PUSH2 0x7CE DUP2 PUSH1 0x1 SLOAD PUSH2 0xF77 JUMP JUMPDEST CALLVALUE SUB PUSH2 0x8E9 JUMPI PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH2 0x7EE PUSH1 0x40 DUP3 PUSH2 0xEFE JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 PUSH1 0x8 SLOAD SWAP2 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH2 0x80F PUSH1 0x40 DUP3 PUSH2 0xEFE JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 PUSH0 SWAP2 JUMPDEST DUP5 MLOAD DUP4 LT ISZERO PUSH2 0x858 JUMPI PUSH2 0x829 DUP4 DUP7 PUSH2 0xFFB JUMP JUMPDEST MLOAD SWAP1 DUP2 DUP2 LT ISZERO PUSH2 0x847 JUMPI PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH0 KECCAK256 JUMPDEST SWAP3 ADD SWAP2 PUSH2 0x816 JUMP JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x83F JUMP JUMPDEST DUP4 SUB PUSH2 0x8DA JUMPI PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x896 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x668F5B446EB814FE35B3206F43F14BD8567BA04DDAF7A3EE56516929AB22CCB PUSH1 0x20 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH1 0xB SLOAD SWAP1 PUSH9 0x10000000000000000 DUP3 LT ISZERO PUSH2 0x5AE JUMPI PUSH2 0x8BC DUP3 PUSH1 0x1 DUP1 SWAP5 ADD PUSH1 0xB SSTORE PUSH2 0xED0 JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 CALLER DUP3 SHL SWAP2 DUP6 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SHL NOT AND OR SWAP1 SSTORE ADD PUSH2 0x860 JUMP JUMPDEST PUSH4 0x9BDE339 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x44044A5 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x7B8 JUMP JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0x948 PUSH2 0x100F JUMP JUMPDEST PUSH1 0xA SLOAD DUP1 ISZERO PUSH2 0xA74 JUMPI PUSH1 0xFF PUSH1 0xD SLOAD AND ISZERO PUSH2 0xA65 JUMPI DUP1 SELFBALANCE LT PUSH2 0xA08 JUMPI PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x9CA JUMPI PUSH0 DUP1 DUP1 SWAP4 DUP2 SWAP4 GAS CALL PUSH2 0x985 PUSH2 0xF38 JUMP JUMPDEST POP ISZERO PUSH2 0x9BB JUMPI PUSH0 PUSH1 0xA SSTORE PUSH32 0x5689F9EF5BE164071958E27DCA7A9DF000791288FB23C621501D67B6A808848B PUSH1 0x20 PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH4 0x12171D83 PUSH1 0xE3 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DA185C9A5D1E481DD85B1B195D081B9BDD081CD95D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420636F6E74726163742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x7220636861726974792066756E6473 PUSH1 0x88 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x30D747F9 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x356680B7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0xA9B PUSH2 0x100F JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x106E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI CALLER PUSH0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0xBB0 JUMPI SELFBALANCE PUSH1 0x9 SLOAD GT PUSH2 0xB6B JUMPI CALLER PUSH0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH0 DUP1 DUP1 DUP1 PUSH1 0x9 SLOAD CALLER GAS CALL PUSH2 0xB3E PUSH2 0xF38 JUMP JUMPDEST POP ISZERO PUSH2 0x9BB JUMPI CALLER PUSH32 0x9F058359C5A4D11027CE8027F5F0F4DF210CB3EBAC92F2C584170ED78624DD8 PUSH0 DUP1 LOG2 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420636F6E74726163742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x58CD4FC1 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xBE0 PUSH2 0xEE8 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0x2F1 JUMPI PUSH2 0xC25 PUSH1 0x20 SWAP2 PUSH2 0xED0 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2F1 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x2F1 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2F1 JUMPI CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT PUSH2 0x2F1 JUMPI PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 SWAP1 SUB PUSH2 0xE66 JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x4 CALLDATALOAD SUB PUSH2 0xE57 JUMPI PUSH1 0x2 SLOAD DUP1 DUP3 SUB PUSH2 0xE48 JUMPI PUSH2 0xCF7 PUSH2 0xCE1 DUP3 PUSH2 0xF20 JUMP JUMPDEST SWAP2 PUSH2 0xCEF PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xEFE JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH2 0xF20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 PUSH1 0x1F NOT ADD CALLDATASIZE DUP6 CALLDATACOPY PUSH0 SWAP3 JUMPDEST PUSH1 0x2 SLOAD DUP5 LT ISZERO PUSH2 0x319 JUMPI DUP1 DUP5 LT ISZERO PUSH2 0xE34 JUMPI PUSH1 0x24 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD CALLDATALOAD JUMPDEST PUSH1 0xB SLOAD DUP1 ISZERO PUSH2 0xE20 JUMPI PUSH2 0xD38 SWAP1 DUP3 MOD PUSH2 0xED0 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD75 JUMPI POP PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x55D JUMPI PUSH0 NOT SWAP1 MOD PUSH2 0xD24 JUMP JUMPDEST DUP1 SWAP2 POP PUSH0 SWAP6 SWAP3 SWAP6 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xD9B DUP3 DUP6 PUSH2 0xFFB JUMP JUMPDEST MSTORE PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0xD SLOAD AND OR PUSH1 0xD SSTORE PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x20 DUP3 MSTORE DUP5 MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP1 DUP8 SWAP1 PUSH0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0xDFE JUMPI POP POP POP DUP2 PUSH1 0x1 SWAP4 SWAP3 PUSH32 0x32A1B5731A757F192A06CA973715CA4DBC42C2D15323CABAA74E0A2D5DC088E4 SWAP3 SUB SWAP1 LOG1 ADD SWAP3 PUSH2 0xD07 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xDC3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x1F9EFADB PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x41ABC801 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x73E64FD PUSH1 0xE2 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x6 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0xE34 JUMPI PUSH1 0xB PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD SWAP1 PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x2F1 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5AE JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x5AE JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0xF72 JUMPI RETURNDATASIZE SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x5AE JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0xF67 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0xEFE JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x55D JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xFE8 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x106E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH0 DUP1 LOG3 JUMP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xE34 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x106E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x102F JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0xFF PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 SHR AND ISZERO PUSH2 0x105E JUMPI JUMP JUMPDEST PUSH4 0x1AFCD79F PUSH1 0xE3 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT INVALID SWAP1 AND 0xD0 SWAP14 PUSH19 0xD40FDAE2FD8CEAC6B6234C7706214FD39C1CD1 DUPN 0x9 LOG0 MSTORE DUP13 NOT SWAP4 STOP CREATE 0xC5 PUSH31 0x16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00A264 PUSH10 0x70667358221220F856E7 MUL PUSH24 0xF81E88C99771502B6A8AD444179617E01BD60CC7E8C8DAF9 DATALOADN 0x6863 PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "356:5705:9:-:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 3816,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_allocation_size_array_bytes32_dyn": {
									"entryPoint": 3872,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_mul_uint256": {
									"entryPoint": 3959,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_returndata": {
									"entryPoint": 3896,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 3838,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_checkInitializing": {
									"entryPoint": 4162,
									"id": 533,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_checkOwner": {
									"entryPoint": 4111,
									"id": 285,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"fun_transferOwnership_inner": {
									"entryPoint": 3978,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"memory_array_index_access_address_dyn": {
									"entryPoint": 4091,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_array_index_access_address_dyn": {
									"entryPoint": 3792,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 2
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x12 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x41D443E EQ PUSH2 0xEB6 JUMPI POP DUP1 PUSH4 0x1209B1F6 EQ PUSH2 0xE99 JUMPI DUP1 PUSH4 0x18A7EA5F EQ PUSH2 0xE7C JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0xC5B JUMPI DUP1 PUSH4 0x2EB4A7AB EQ PUSH2 0xC3E JUMPI DUP1 PUSH4 0x35C1D349 EQ PUSH2 0xBFC JUMPI DUP1 PUSH4 0x6BD5450A EQ PUSH2 0xBBF JUMPI DUP1 PUSH4 0x70740AC9 EQ PUSH2 0xAEA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xA83 JUMPI DUP1 PUSH4 0x74552552 EQ PUSH2 0x930 JUMPI DUP1 PUSH4 0x7B208769 EQ PUSH2 0x908 JUMPI DUP1 PUSH4 0x8A89C8C9 EQ PUSH2 0x752 JUMPI DUP1 PUSH4 0x8B39989B EQ PUSH2 0x735 JUMPI DUP1 PUSH4 0x8BC53285 EQ PUSH2 0x713 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x6DF JUMPI DUP1 PUSH4 0x8EA98117 EQ PUSH2 0x60A JUMPI DUP1 PUSH4 0x918F8674 EQ PUSH2 0x5EE JUMPI DUP1 PUSH4 0x98617E2A EQ PUSH2 0x5D1 JUMPI DUP1 PUSH4 0x98AFCA73 EQ PUSH2 0x399 JUMPI DUP1 PUSH4 0x9ECCACF6 EQ PUSH2 0x372 JUMPI DUP1 PUSH4 0xB9705A03 EQ PUSH2 0x355 JUMPI DUP1 PUSH4 0xC7383BE8 EQ PUSH2 0x338 JUMPI DUP1 PUSH4 0xE17901D8 EQ PUSH2 0x31B JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2F5 JUMPI PUSH4 0xF9F23186 EQ PUSH2 0x12F JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0x148 PUSH2 0xEE8 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2F1 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0xFF DUP2 PUSH1 0x40 SHR AND ISZERO SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND DUP1 ISZERO SWAP1 DUP2 PUSH2 0x2E9 JUMPI JUMPDEST PUSH1 0x1 EQ SWAP1 DUP2 PUSH2 0x2DF JUMPI JUMPDEST ISZERO SWAP1 DUP2 PUSH2 0x2D6 JUMPI JUMPDEST POP PUSH2 0x2C7 JUMPI PUSH8 0xFFFFFFFFFFFFFFFF NOT DUP3 AND PUSH1 0x1 OR PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SSTORE PUSH2 0x1DE SWAP2 DUP5 PUSH2 0x29B JUMPI JUMPDEST POP PUSH2 0x1D1 PUSH2 0x1042 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x1042 JUMP JUMPDEST PUSH2 0xF8A JUMP JUMPDEST PUSH20 0x9DDFACA8183C41AD55329BDEED9F6A8D53168B1B PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH0 SLOAD AND OR PUSH0 SSTORE PUSH7 0x38D7EA4C68000 PUSH1 0x1 SSTORE PUSH1 0x2 DUP1 SSTORE PUSH2 0xBB8 PUSH1 0x3 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0x4 SLOAD AND OR PUSH1 0x4 SSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0x5 SSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x6 SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x8 SSTORE PUSH2 0x244 JUMPI STOP JUMPDEST PUSH9 0xFF0000000000000000 NOT PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD AND PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH9 0xFFFFFFFFFFFFFFFFFF NOT AND PUSH9 0x10000000000000001 OR PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SSTORE PUSH0 PUSH2 0x1C8 JUMP JUMPDEST PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST SWAP1 POP ISZERO PUSH0 PUSH2 0x19B JUMP JUMPDEST ADDRESS EXTCODESIZE ISZERO SWAP2 POP PUSH2 0x193 JUMP JUMPDEST DUP6 SWAP2 POP PUSH2 0x189 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0x319 PUSH2 0x311 PUSH2 0xEE8 JUMP JUMPDEST PUSH2 0x1D9 PUSH2 0x100F JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0xA SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0x3B1 PUSH2 0x100F JUMP JUMPDEST PUSH1 0x7 SLOAD PUSH2 0x5C2 JUMPI PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH0 SLOAD AND PUSH1 0x6 SLOAD PUSH1 0x5 SLOAD SWAP2 PUSH4 0xFFFFFFFF PUSH1 0x2 SLOAD AND SWAP1 PUSH1 0x40 MLOAD SWAP4 PUSH1 0x20 DUP6 ADD DUP6 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5AE JUMPI PUSH1 0x40 MSTORE PUSH0 DUP6 MSTORE PUSH1 0x40 MLOAD SWAP5 PUSH4 0x125FA267 PUSH1 0xE3 SHL PUSH1 0x20 DUP8 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0x24 DUP7 ADD MSTORE PUSH1 0x24 DUP6 MSTORE PUSH2 0x41C PUSH1 0x44 DUP7 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP5 PUSH1 0xC0 DUP7 ADD SWAP5 DUP7 DUP7 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP8 GT OR PUSH2 0x5AE JUMPI PUSH2 0xFFFF SWAP7 PUSH1 0x20 PUSH0 SWAP4 PUSH2 0x104 SWAP4 DUP3 SWAP10 PUSH1 0x40 MSTORE DUP4 MSTORE DUP2 DUP4 ADD SWAP6 DUP7 MSTORE PUSH4 0xFFFFFFFF PUSH1 0x40 DUP5 ADD SWAP9 PUSH1 0x3 DUP11 MSTORE DUP2 PUSH1 0x60 DUP7 ADD PUSH3 0xF4240 DUP2 MSTORE PUSH1 0x80 DUP8 ADD SWAP3 DUP4 MSTORE PUSH1 0xA0 DUP8 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 MLOAD SWAP14 DUP15 SWAP13 DUP14 SWAP12 DUP13 SWAP10 PUSH4 0x4D8E1C2F PUSH1 0xE1 SHL DUP12 MSTORE DUP10 PUSH1 0x4 DUP13 ADD MSTORE MLOAD PUSH1 0x24 DUP12 ADD MSTORE MLOAD PUSH1 0x44 DUP11 ADD MSTORE MLOAD AND PUSH1 0x64 DUP9 ADD MSTORE MLOAD AND PUSH1 0x84 DUP7 ADD MSTORE MLOAD AND PUSH1 0xA4 DUP5 ADD MSTORE MLOAD PUSH1 0xC0 PUSH1 0xC4 DUP5 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH1 0xE4 DUP7 ADD MSTORE ADD DUP5 DUP5 ADD MCOPY DUP2 DUP2 ADD DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP3 GAS CALL SWAP1 DUP2 ISZERO PUSH2 0x5A3 JUMPI PUSH0 SWAP2 PUSH2 0x571 JUMPI JUMPDEST POP DUP1 PUSH1 0x7 SSTORE PUSH2 0x503 PUSH1 0xB SLOAD PUSH1 0x1 SLOAD SWAP1 PUSH2 0xF77 JUMP JUMPDEST PUSH2 0x523 PUSH2 0x2710 PUSH2 0x515 PUSH1 0x3 SLOAD DUP5 PUSH2 0xF77 JUMP JUMPDEST DIV DUP1 PUSH1 0x9 SSTORE PUSH1 0x2 SLOAD SWAP1 PUSH2 0xF77 JUMP JUMPDEST DUP2 SUB SWAP1 DUP2 GT PUSH2 0x55D JUMPI PUSH32 0x9AC10FB18C93D33AD7B0A941897AEF048D0F8D30756684E82B4552BA12764D45 SWAP2 PUSH1 0x20 SWAP2 PUSH1 0xA SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x59B JUMPI JUMPDEST DUP2 PUSH2 0x58C PUSH1 0x20 SWAP4 DUP4 PUSH2 0xEFE JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2F1 JUMPI MLOAD DUP2 PUSH2 0x4EF JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x57F JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0xD5BAE95 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x2710 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0x623 PUSH2 0xEE8 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x106E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 EQ ISZERO DUP1 PUSH2 0x6CB JUMPI JUMPDEST PUSH2 0x6A7 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x698 JUMPI PUSH1 0x20 DUP2 PUSH32 0xD1A6A14209A385A964D036E404CB5CFB71F4000CDB03C9366292430787261BE6 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH0 SLOAD AND OR PUSH0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH4 0xD92E233D PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH0 SLOAD AND SWAP1 PUSH4 0x61DB9C1 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST POP PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ ISZERO PUSH2 0x645 JUMP JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x106E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0xD SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x5 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x2F1 JUMPI CALLDATASIZE PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x2F1 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP2 PUSH2 0x78D DUP4 PUSH2 0xF20 JUMP JUMPDEST SWAP3 PUSH2 0x79B PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0xEFE JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x24 PUSH1 0x20 DUP6 ADD SWAP2 PUSH1 0x5 SHL DUP4 ADD ADD SWAP2 CALLDATASIZE DUP4 GT PUSH2 0x2F1 JUMPI PUSH1 0x24 ADD SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x8F8 JUMPI POP POP POP PUSH2 0x7CE DUP2 PUSH1 0x1 SLOAD PUSH2 0xF77 JUMP JUMPDEST CALLVALUE SUB PUSH2 0x8E9 JUMPI PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 CALLER DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH2 0x7EE PUSH1 0x40 DUP3 PUSH2 0xEFE JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 PUSH1 0x8 SLOAD SWAP2 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP2 MSTORE PUSH2 0x80F PUSH1 0x40 DUP3 PUSH2 0xEFE JUMP JUMPDEST MLOAD SWAP1 KECCAK256 SWAP1 PUSH0 SWAP2 JUMPDEST DUP5 MLOAD DUP4 LT ISZERO PUSH2 0x858 JUMPI PUSH2 0x829 DUP4 DUP7 PUSH2 0xFFB JUMP JUMPDEST MLOAD SWAP1 DUP2 DUP2 LT ISZERO PUSH2 0x847 JUMPI PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH0 KECCAK256 JUMPDEST SWAP3 ADD SWAP2 PUSH2 0x816 JUMP JUMPDEST SWAP1 PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH0 KECCAK256 PUSH2 0x83F JUMP JUMPDEST DUP4 SUB PUSH2 0x8DA JUMPI PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0x896 JUMPI POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x668F5B446EB814FE35B3206F43F14BD8567BA04DDAF7A3EE56516929AB22CCB PUSH1 0x20 CALLER SWAP3 LOG2 STOP JUMPDEST PUSH1 0xB SLOAD SWAP1 PUSH9 0x10000000000000000 DUP3 LT ISZERO PUSH2 0x5AE JUMPI PUSH2 0x8BC DUP3 PUSH1 0x1 DUP1 SWAP5 ADD PUSH1 0xB SSTORE PUSH2 0xED0 JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 CALLER DUP3 SHL SWAP2 DUP6 DUP1 PUSH1 0xA0 SHL SUB SWAP1 SHL NOT AND OR SWAP1 SSTORE ADD PUSH2 0x860 JUMP JUMPDEST PUSH4 0x9BDE339 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x44044A5 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 MSTORE PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x7B8 JUMP JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0x948 PUSH2 0x100F JUMP JUMPDEST PUSH1 0xA SLOAD DUP1 ISZERO PUSH2 0xA74 JUMPI PUSH1 0xFF PUSH1 0xD SLOAD AND ISZERO PUSH2 0xA65 JUMPI DUP1 SELFBALANCE LT PUSH2 0xA08 JUMPI PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x9CA JUMPI PUSH0 DUP1 DUP1 SWAP4 DUP2 SWAP4 GAS CALL PUSH2 0x985 PUSH2 0xF38 JUMP JUMPDEST POP ISZERO PUSH2 0x9BB JUMPI PUSH0 PUSH1 0xA SSTORE PUSH32 0x5689F9EF5BE164071958E27DCA7A9DF000791288FB23C621501D67B6A808848B PUSH1 0x20 PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH4 0x12171D83 PUSH1 0xE3 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x10DA185C9A5D1E481DD85B1B195D081B9BDD081CD95D PUSH1 0x52 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420636F6E74726163742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x7220636861726974792066756E6473 PUSH1 0x88 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH4 0x30D747F9 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x356680B7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH2 0xA9B PUSH2 0x100F JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x106E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND SWAP1 SWAP2 SSTORE PUSH0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 DUP3 DUP1 LOG3 STOP JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI CALLER PUSH0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND ISZERO PUSH2 0xBB0 JUMPI SELFBALANCE PUSH1 0x9 SLOAD GT PUSH2 0xB6B JUMPI CALLER PUSH0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH0 DUP1 DUP1 DUP1 PUSH1 0x9 SLOAD CALLER GAS CALL PUSH2 0xB3E PUSH2 0xF38 JUMP JUMPDEST POP ISZERO PUSH2 0x9BB JUMPI CALLER PUSH32 0x9F058359C5A4D11027CE8027F5F0F4DF210CB3EBAC92F2C584170ED78624DD8 PUSH0 DUP1 LOG2 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E73756666696369656E7420636F6E74726163742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH4 0x58CD4FC1 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xBE0 PUSH2 0xEE8 JUMP JUMPDEST AND PUSH0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0x2F1 JUMPI PUSH2 0xC25 PUSH1 0x20 SWAP2 PUSH2 0xED0 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2F1 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x2F1 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x2F1 JUMPI CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT PUSH2 0x2F1 JUMPI PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP2 SWAP1 SUB PUSH2 0xE66 JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x4 CALLDATALOAD SUB PUSH2 0xE57 JUMPI PUSH1 0x2 SLOAD DUP1 DUP3 SUB PUSH2 0xE48 JUMPI PUSH2 0xCF7 PUSH2 0xCE1 DUP3 PUSH2 0xF20 JUMP JUMPDEST SWAP2 PUSH2 0xCEF PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0xEFE JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH2 0xF20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP4 SWAP1 PUSH1 0x1F NOT ADD CALLDATASIZE DUP6 CALLDATACOPY PUSH0 SWAP3 JUMPDEST PUSH1 0x2 SLOAD DUP5 LT ISZERO PUSH2 0x319 JUMPI DUP1 DUP5 LT ISZERO PUSH2 0xE34 JUMPI PUSH1 0x24 DUP5 PUSH1 0x5 SHL DUP4 ADD ADD CALLDATALOAD JUMPDEST PUSH1 0xB SLOAD DUP1 ISZERO PUSH2 0xE20 JUMPI PUSH2 0xD38 SWAP1 DUP3 MOD PUSH2 0xED0 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x3 SWAP2 SWAP1 SWAP2 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xD75 JUMPI POP PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x55D JUMPI PUSH0 NOT SWAP1 MOD PUSH2 0xD24 JUMP JUMPDEST DUP1 SWAP2 POP PUSH0 SWAP6 SWAP3 SWAP6 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xD9B DUP3 DUP6 PUSH2 0xFFB JUMP JUMPDEST MSTORE PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0xD SLOAD AND OR PUSH1 0xD SSTORE PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x20 DUP3 MSTORE DUP5 MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP3 ADD SWAP1 DUP8 SWAP1 PUSH0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0xDFE JUMPI POP POP POP DUP2 PUSH1 0x1 SWAP4 SWAP3 PUSH32 0x32A1B5731A757F192A06CA973715CA4DBC42C2D15323CABAA74E0A2D5DC088E4 SWAP3 SUB SWAP1 LOG1 ADD SWAP3 PUSH2 0xD07 JUMP JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH2 0xDC3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x1F9EFADB PUSH1 0xE1 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x41ABC801 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT JUMPDEST PUSH4 0x73E64FD PUSH1 0xE2 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x2F1 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2F1 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x6 SLOAD DUP2 MSTORE RETURN JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0xE34 JUMPI PUSH1 0xB PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 ADD SWAP1 PUSH0 SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x2F1 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x5AE JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x5AE JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST RETURNDATASIZE ISZERO PUSH2 0xF72 JUMPI RETURNDATASIZE SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT PUSH2 0x5AE JUMPI PUSH1 0x40 MLOAD SWAP2 PUSH2 0xF67 PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP5 PUSH2 0xEFE JUMP JUMPDEST DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY JUMP JUMPDEST PUSH1 0x60 SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x55D JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0xFE8 JUMPI PUSH0 MLOAD PUSH1 0x20 PUSH2 0x106E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND DUP4 OR SWAP1 SWAP2 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH0 DUP1 LOG3 JUMP JUMPDEST PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0xE34 JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST PUSH0 MLOAD PUSH1 0x20 PUSH2 0x106E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER SUB PUSH2 0x102F JUMPI JUMP JUMPDEST PUSH4 0x118CDAA7 PUSH1 0xE0 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0xFF PUSH0 MLOAD PUSH1 0x20 PUSH2 0x108E PUSH0 CODECOPY PUSH0 MLOAD SWAP1 PUSH0 MSTORE SLOAD PUSH1 0x40 SHR AND ISZERO PUSH2 0x105E JUMPI JUMP JUMPDEST PUSH4 0x1AFCD79F PUSH1 0xE3 SHL PUSH0 MSTORE PUSH1 0x4 PUSH0 REVERT INVALID SWAP1 AND 0xD0 SWAP14 PUSH19 0xD40FDAE2FD8CEAC6B6234C7706214FD39C1CD1 DUPN 0x9 LOG0 MSTORE DUP13 NOT SWAP4 STOP CREATE 0xC5 PUSH31 0x16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00A264 PUSH10 0x70667358221220F856E7 MUL PUSH24 0xF81E88C99771502B6A8AD444179617E01BD60CC7E8C8DAF9 DATALOADN 0x6863 PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "356:5705:9:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;;:::i;:::-;;;-1:-1:-1;;;;;356:5705:9;;;;;;;;-1:-1:-1;;;;;;;;;;;356:5705:9;;;;;;4301:16:5;356:5705:9;;;;4724:16:5;;:34;;;;356:5705:9;;4788:16:5;:50;;;;356:5705:9;4853:13:5;:30;;;;356:5705:9;4849:91:5;;;-1:-1:-1;;356:5705:9;;;;-1:-1:-1;;;;;;;;;;;356:5705:9;6959:1:5;;356:5705:9;4977:67:5;;356:5705:9;6891:76:5;;;:::i;:::-;;;:::i;:::-;6959:1;:::i;:::-;1777:42:9;-1:-1:-1;;;;;356:5705:9;;;;;;;;1900:11;356:5705;;1966:1;356:5705;;2033:4;2012:25;356:5705;-1:-1:-1;;;;;356:5705:9;;;;;;;;;;2134:36;356:5705;;;2180:24;356:5705;;;2214:24;356:5705;5064:101:5;;356:5705:9;5064:101:5;356:5705:9;;-1:-1:-1;;;;;;;;;;;356:5705:9;;-1:-1:-1;;;;;;;;;;;356:5705:9;5140:14:5;356:5705:9;;;;;;5140:14:5;356:5705:9;4977:67:5;-1:-1:-1;;356:5705:9;;;-1:-1:-1;;;;;;;;;;;356:5705:9;4977:67:5;;;4849:91;4906:23;;;356:5705:9;4906:23:5;356:5705:9;;4906:23:5;4853:30;4870:13;;;4853:30;;;4788:50;4816:4;4808:25;:30;;-1:-1:-1;4788:50:5;;4724:34;;;-1:-1:-1;4724:34:5;;356:5705:9;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;2357:1:4;356:5705:9;;:::i;:::-;2303:62:4;;:::i;2357:1::-;356:5705:9;;;;;;;-1:-1:-1;;356:5705:9;;;;;813:27;356:5705;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;541:27;356:5705;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;780:27;356:5705;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;;;;-1:-1:-1;;;;;356:5705:9;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;2303:62:4;;:::i;:::-;2890:12:9;356:5705;;;;;;;;;;;3069:10;356:5705;3104:16;356:5705;;;3239:12;356:5705;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;581:52:3;;;204:36;356:5705:9;;581:52:3;;;356:5705:9;581:52:3;;;;;;;:::i;:::-;356:5705:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3007:514;;;356:5705;;;;;3007:514;;356:5705;3160:1;356:5705;;3007:514;;;;3197:7;356:5705;;3007:514;;;356:5705;;;3007:514;;;356:5705;;;;;;;;;;;;;;;2958:573;;;356:5705;2958:573;;356:5705;;581:52:3;356:5705:9;;;;581:52:3;356:5705:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;2958:573;;;;;;;;;;356:5705;2958:573;;;356:5705;;;2890:12;356:5705;3567:33;:12;356:5705;;;3567:33;;:::i;:::-;3719:27;474:5;3626:35;3160:1;356:5705;3626:35;;:::i;:::-;356:5705;;3610:66;356:5705;3239:12;356:5705;3719:27;;:::i;:::-;356:5705;;;;;;;3763:33;356:5705;;;3686:61;356:5705;;;;;;3763:33;356:5705;;;;;;;;;;581:52:3;356:5705:9;;2958:573;;;356:5705;2958:573;;356:5705;2958:573;;;;;;356:5705;2958:573;;;:::i;:::-;;;356:5705;;;;;2958:573;;;;;;-1:-1:-1;2958:573:9;;;356:5705;;;;;;;;;;;;;;;;;;581:52:3;356:5705:9;;;;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;574:33;356:5705;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;;;474:5;356:5705;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;356:5705:9;-1:-1:-1;;;;;356:5705:9;8104:10:10;:21;;;;:64;;356:5705:9;8100:234:10;;-1:-1:-1;;;;;;356:5705:9;7854:29:10;;7850:80;;356:5705:9;;8012:31:10;356:5705:9;-1:-1:-1;;;;;356:5705:9;;;;;;;;;;;;;8012:31:10;356:5705:9;7850:80:10;7906:13;;;356:5705:9;7906:13:10;356:5705:9;;7906:13:10;8100:234;356:5705:9;;;;;;;;8191:132:10;;;;356:5705:9;8191:132:10;8104:10;356:5705:9;;;;;;;;8191:132:10;8104:64;-1:-1:-1;356:5705:9;;-1:-1:-1;;;;;356:5705:9;8104:10:10;8129:39;;8104:64;;356:5705:9;;;;;;-1:-1:-1;;356:5705:9;;;;-1:-1:-1;;;;;;;;;;;356:5705:9;;;-1:-1:-1;;;;;356:5705:9;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;;927:27;356:5705;;;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;647:31;356:5705;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2357:18;356:5705;;;2357:18;:::i;:::-;2344:9;:31;356:5705;;;;;2433:22;;2444:10;;356:5705;;;2433:22;;;356:5705;2433:22;;:::i;:::-;356:5705;2423:33;;356:5705;2547:10;356:5705;;;;;2585:22;;356:5705;;;;2585:22;;;356:5705;2585:22;;:::i;:::-;356:5705;2575:33;;2601:13:8;356:5705:9;2596:134:8;2634:3;356:5705:9;;2616:16:8;;;;;2710:8;;;;:::i;:::-;356:5705:9;;605:5:7;;;;;;356:5705:9;889:135:7;356:5705:9;889:135:7;356:5705:9;;;889:135:7;605:59;2634:3:8;356:5705:9;2601:13:8;;;605:59:7;889:135;356:5705:9;889:135:7;356:5705:9;889:135:7;356:5705:9;;;889:135:7;605:59;;2616:16:8;;2016:33;356:5705:9;;;2691:8;;;;;;356:5705;;;;;;2775:33;356:5705;2444:10;2775:33;;356:5705;2701:3;2720:12;356:5705;;;;;;;;;;;;;;2720:12;356:5705;;:::i;:::-;;;;;;2444:10;;356:5705;;;;;;;;;;;;;;;;2676:13;;356:5705;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;;;;-1:-1:-1;;;;;356:5705:9;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;2303:62:4;;:::i;:::-;5508:12:9;356:5705;5508:16;;356:5705;;;5564:15;356:5705;;;;;5633:21;;:37;356:5705;;;;-1:-1:-1;;;;;356:5705:9;5761:27;;356:5705;;;5845:52;;;;;;;;;:::i;:::-;;356:5705;;;;5508:12;356:5705;6021:31;356:5705;;;;;;6021:31;356:5705;;;;;;;;;;;;;-1:-1:-1;;;356:5705:9;;;;;;;;;;;;-1:-1:-1;;;356:5705:9;;;;;;;;;;-1:-1:-1;;;356:5705:9;;;;;;;;;;;;;;;;;-1:-1:-1;;;356:5705:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;2303:62:4;;:::i;:::-;-1:-1:-1;;;;;;;;;;;356:5705:9;;-1:-1:-1;;;;;;356:5705:9;;;;;;;-1:-1:-1;;;;;356:5705:9;3975:40:4;356:5705:9;;3975:40:4;356:5705:9;;;;;;;-1:-1:-1;;356:5705:9;;;;5053:10;356:5705;;5045:7;356:5705;;;;;;;;;;;5110:21;5135:12;356:5705;-1:-1:-1;356:5705:9;;5053:10;356:5705;;5045:7;356:5705;;;;;;;;;;;;;;;;5135:12;356:5705;5053:10;5296:49;;;;:::i;:::-;;356:5705;;;5053:10;5405:24;356:5705;5405:24;;356:5705;;;;-1:-1:-1;;;356:5705:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;-1:-1:-1;;;;;356:5705:9;;:::i;:::-;;;;882:39;356:5705;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;;847:29;356:5705;847:29;;;;;;356:5705;847:29;;:::i;:::-;356:5705;;;;;;;;;;-1:-1:-1;;;;;356:5705:9;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;748:25;356:5705;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;356:5705:9;7425:10:10;:39;;;7421:187;;356:5705:9;4156:12;356:5705;;;4143:25;356:5705;;4227:12;356:5705;4205:34;;;356:5705;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;-1:-1:-1;;356:5705:9;;;;;4343:641;4381:3;4227:12;356:5705;4363:16;;;;;356:5705;;;;;;;;;;;;;;4450:438;4516:12;356:5705;;;;;4570:25;356:5705;;;4570:25;:::i;:::-;356:5705;;;;;;;;-1:-1:-1;;;;;356:5705:9;;;;;4619:7;356:5705;;;;;;;;4618:16;4614:158;;356:5705;;;;;;;;;-1:-1:-1;;356:5705:9;;4450:438;;4614:158;356:5705;;;;;;;;4619:7;356:5705;;;;;;;;;;;;;;4702:24;;;;:::i;:::-;356:5705;;;;4902:22;356:5705;;;4902:22;356:5705;;;;;;;;;;;;;;;;;;;;;;;;;;;;4944:29;;;;356:5705;4944:29;;;;;;;356:5705;4348:13;;;356:5705;;;-1:-1:-1;;;;;356:5705:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7421:187:10;7487:110;;;356:5705:9;7487:110:10;7425:10;356:5705:9;;;;;;7487:110:10;356:5705:9;;;;;;-1:-1:-1;;356:5705:9;;;;;715:27;356:5705;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;509:26;356:5705;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;;684:25;356:5705;;;;;4516:12;356:5705;;;;;;4516:12;-1:-1:-1;356:5705:9;;-1:-1:-1;356:5705:9;;;-1:-1:-1;356:5705:9;:::o;:::-;;;;-1:-1:-1;;;;;356:5705:9;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;356:5705:9;;;;;:::i;:::-;;;;-1:-1:-1;356:5705:9;;;;:::o;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;:::o;3405:215:4:-;-1:-1:-1;;;;;356:5705:9;3489:22:4;;3485:91;;-1:-1:-1;;;;;;;;;;;356:5705:9;;-1:-1:-1;;;;;;356:5705:9;;;;;;;-1:-1:-1;;;;;356:5705:9;3975:40:4;-1:-1:-1;;3975:40:4;3405:215::o;3485:91::-;3534:31;;;3509:1;3534:31;3509:1;3534:31;356:5705:9;;3509:1:4;3534:31;356:5705:9;;;;;;;;;;;;;;;:::o;2658:162:4:-;-1:-1:-1;;;;;;;;;;;356:5705:9;-1:-1:-1;;;;;356:5705:9;966:10:6;2717:23:4;2713:101;;2658:162::o;2713:101::-;2763:40;;;-1:-1:-1;2763:40:4;966:10:6;2763:40:4;356:5705:9;;-1:-1:-1;2763:40:4;7082:141:5;356:5705:9;-1:-1:-1;;;;;;;;;;;356:5705:9;;;;7148:18:5;7144:73;;7082:141::o;7144:73::-;7189:17;;;-1:-1:-1;7189:17:5;;-1:-1:-1;7189:17:5"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "864600",
								"executionCost": "911",
								"totalCost": "865511"
							},
							"external": {
								"DENOMINATOR()": "505",
								"buyTicket(uint256,bytes32[])": "infinite",
								"charityFunds()": "2740",
								"charityWallet()": "2500",
								"claimCharityFunds()": "infinite",
								"claimPrize()": "infinite",
								"initialize(address,address,uint256,bytes32,bytes32)": "infinite",
								"merkleRoot()": "2344",
								"numOfWinners()": "2718",
								"owner()": "infinite",
								"participants(uint256)": "6743",
								"pricePersentageBPS()": "2630",
								"rawFulfillRandomWords(uint256,uint256[])": "infinite",
								"renounceOwnership()": "28294",
								"requestRandomWinners()": "infinite",
								"s_vrfCoordinator()": "2697",
								"setCoordinator(address)": "infinite",
								"ticketPrice()": "2278",
								"transferOwnership(address)": "28759",
								"vrfKeyHash()": "2248",
								"vrfRequestId()": "2300",
								"vrfSubsciptionId()": "2520",
								"winnerReward()": "2696",
								"winners(address)": "2550",
								"winnersSelected()": "2554"
							},
							"internal": {
								"fulfillRandomWords(uint256,uint256[] calldata)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 356,
									"end": 6061,
									"name": "PUSH",
									"source": 9,
									"value": "80"
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "PUSH",
									"source": 9,
									"value": "40"
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "MSTORE",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "CALLVALUE",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "PUSH [tag]",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "JUMPI",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "PUSH #[$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "SWAP1",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "DUP2",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "PUSH [$]",
									"source": 9,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "DUP3",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "CODECOPY",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "RETURN",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "tag",
									"source": 9,
									"value": "1"
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "JUMPDEST",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "PUSH",
									"source": 9,
									"value": "0"
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "DUP1",
									"source": 9
								},
								{
									"begin": 356,
									"end": 6061,
									"name": "REVERT",
									"source": 9
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220f856e70277f81e88c99771502b6a8ad444179617e01bd60cc7e8c8daf9d1686364736f6c634300081e0033",
									".code": [
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "41D443E"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1209B1F6"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "18A7EA5F"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1FE543E3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "2EB4A7AB"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "35C1D349"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "6BD5450A"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "70740AC9"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "715018A6"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "74552552"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "7B208769"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "8A89C8C9"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "8B39989B"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "8BC53285"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "8DA5CB5B"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "8EA98117"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "918F8674"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "98617E2A"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "98AFCA73"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "9ECCACF6"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "B9705A03"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "C7383BE8"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E17901D8"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "F2FDE38B"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "F9F23186"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "61"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "67"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "E28A5566B8A884201AB44E2D991177CE8B88325E02E52CBC3DA6E67B3ECF29C6"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4724,
											"end": 4740,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 4724,
											"end": 4740,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "71"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4788,
											"end": 4804,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "73"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4853,
											"end": 4866,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "75"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "E28A5566B8A884201AB44E2D991177CE8B88325E02E52CBC3DA6E67B3ECF29C6"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 6959,
											"end": 6960,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 6959,
											"end": 6960,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 6891,
											"end": 6967,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 6891,
											"end": 6967,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 6891,
											"end": 6967,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 6891,
											"end": 6967,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6891,
											"end": 6967,
											"name": "tag",
											"source": 5,
											"value": "81"
										},
										{
											"begin": 6891,
											"end": 6967,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6891,
											"end": 6967,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 6891,
											"end": 6967,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 6891,
											"end": 6967,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6891,
											"end": 6967,
											"name": "tag",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 6891,
											"end": 6967,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 6959,
											"end": 6960,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "7"
										},
										{
											"begin": 6959,
											"end": 6960,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 6959,
											"end": 6960,
											"name": "tag",
											"source": 5,
											"value": "78"
										},
										{
											"begin": 6959,
											"end": 6960,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1777,
											"end": 1819,
											"name": "PUSH",
											"source": 9,
											"value": "9DDFACA8183C41AD55329BDEED9F6A8D53168B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1900,
											"end": 1911,
											"name": "PUSH",
											"source": 9,
											"value": "38D7EA4C68000"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 1966,
											"end": 1967,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 2033,
											"end": 2037,
											"name": "PUSH",
											"source": 9,
											"value": "BB8"
										},
										{
											"begin": 2012,
											"end": 2037,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2134,
											"end": 2170,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2180,
											"end": 2204,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 2214,
											"end": 2238,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "83"
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "tag",
											"source": 5,
											"value": "83"
										},
										{
											"begin": 5064,
											"end": 5165,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF0000000000000000"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "E28A5566B8A884201AB44E2D991177CE8B88325E02E52CBC3DA6E67B3ECF29C6"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "E28A5566B8A884201AB44E2D991177CE8B88325E02E52CBC3DA6E67B3ECF29C6"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "PUSH",
											"source": 5,
											"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5140,
											"end": 5154,
											"name": "LOG1",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "tag",
											"source": 5,
											"value": "79"
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "10000000000000001"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "E28A5566B8A884201AB44E2D991177CE8B88325E02E52CBC3DA6E67B3ECF29C6"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 4977,
											"end": 5044,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 4849,
											"end": 4940,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 5,
											"value": "F92EE8A9"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "PUSH",
											"source": 5,
											"value": "E0"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4906,
											"end": 4929,
											"name": "REVERT",
											"source": 5
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "tag",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4870,
											"end": 4883,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 4870,
											"end": 4883,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 4870,
											"end": 4883,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 4853,
											"end": 4883,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "tag",
											"source": 5,
											"value": "72"
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4816,
											"end": 4820,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 4808,
											"end": 4833,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 4808,
											"end": 4838,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 4808,
											"end": 4838,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "73"
										},
										{
											"begin": 4788,
											"end": 4838,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "tag",
											"source": 5,
											"value": "70"
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "DUP6",
											"source": 5
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "71"
										},
										{
											"begin": 4724,
											"end": 4758,
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "59"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2357,
											"end": 2358,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "89"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "90"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "82"
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 2303,
											"end": 2365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2357,
											"end": 2358,
											"name": "tag",
											"source": 4,
											"value": "89"
										},
										{
											"begin": 2357,
											"end": 2358,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "57"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 813,
											"end": 840,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "55"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 541,
											"end": 568,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "53"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 780,
											"end": 807,
											"name": "PUSH",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "51"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "49"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 2303,
											"end": 2365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "tag",
											"source": 4,
											"value": "112"
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2890,
											"end": 2902,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3069,
											"end": 3079,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3104,
											"end": 3120,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3239,
											"end": 3251,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "125FA267"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 581,
											"end": 633,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 581,
											"end": 633,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 581,
											"end": 633,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 204,
											"end": 240,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 581,
											"end": 633,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 581,
											"end": 633,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 581,
											"end": 633,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 581,
											"end": 633,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 581,
											"end": 633,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 581,
											"end": 633,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 581,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 581,
											"end": 633,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 581,
											"end": 633,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 581,
											"end": 633,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 581,
											"end": 633,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 581,
											"end": 633,
											"name": "tag",
											"source": 3,
											"value": "117"
										},
										{
											"begin": 581,
											"end": 633,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "C0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP7",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "104"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP10",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP9",
											"source": 9
										},
										{
											"begin": 3160,
											"end": 3161,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 3197,
											"end": 3204,
											"name": "PUSH",
											"source": 9,
											"value": "F4240"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "PUSH",
											"source": 9,
											"value": "80"
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 3007,
											"end": 3521,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP14",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP15",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP13",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP14",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP12",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP10",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4D8E1C2F"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "DUP10",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "DUP13",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 581,
											"end": 633,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP12",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 581,
											"end": 633,
											"name": "PUSH",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP11",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP9",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "A4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "C0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "C4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP7",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MCOPY",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 2890,
											"end": 2902,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3567,
											"end": 3600,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 3567,
											"end": 3579,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3567,
											"end": 3600,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3567,
											"end": 3600,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 3567,
											"end": 3600,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3567,
											"end": 3600,
											"name": "tag",
											"source": 9,
											"value": "124"
										},
										{
											"begin": 3567,
											"end": 3600,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 3719,
											"end": 3746,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 474,
											"end": 479,
											"name": "PUSH",
											"source": 9,
											"value": "2710"
										},
										{
											"begin": 3626,
											"end": 3661,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 3160,
											"end": 3161,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3626,
											"end": 3661,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 3626,
											"end": 3661,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 3626,
											"end": 3661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3626,
											"end": 3661,
											"name": "tag",
											"source": 9,
											"value": "126"
										},
										{
											"begin": 3626,
											"end": 3661,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3610,
											"end": 3676,
											"name": "PUSH",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 3239,
											"end": 3251,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 3719,
											"end": 3746,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 3719,
											"end": 3746,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 3719,
											"end": 3746,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3719,
											"end": 3746,
											"name": "tag",
											"source": 9,
											"value": "125"
										},
										{
											"begin": 3719,
											"end": 3746,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 3763,
											"end": 3796,
											"name": "PUSH",
											"source": 9,
											"value": "9AC10FB18C93D33AD7B0A941897AEF048D0F8D30756684E82B4552BA12764D45"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 3686,
											"end": 3747,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 3763,
											"end": 3796,
											"name": "LOG1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "11"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 581,
											"end": 633,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "tag",
											"source": 9,
											"value": "122"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "tag",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2958,
											"end": 3531,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "tag",
											"source": 9,
											"value": "131"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "123"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "tag",
											"source": 9,
											"value": "129"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "130"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "tag",
											"source": 9,
											"value": "120"
										},
										{
											"begin": 2958,
											"end": 3531,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 581,
											"end": 633,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "113"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "D5BAE95"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "47"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 574,
											"end": 607,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "45"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 474,
											"end": 479,
											"name": "PUSH",
											"source": 9,
											"value": "2710"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "43"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "146"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "47F5C767712C0CB55E0943DE27DBB2DB3B8BDAC1E899AF22D477462089A99558"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8104,
											"end": 8114,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8104,
											"end": 8125,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 8104,
											"end": 8125,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 8104,
											"end": 8125,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8104,
											"end": 8125,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8104,
											"end": 8168,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 8104,
											"end": 8168,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "148"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 8100,
											"end": 8334,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 8100,
											"end": 8334,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7854,
											"end": 7883,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 7854,
											"end": 7883,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 7850,
											"end": 7930,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 7850,
											"end": 7930,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 8012,
											"end": 8043,
											"name": "PUSH",
											"source": 10,
											"value": "D1A6A14209A385A964D036E404CB5CFB71F4000CDB03C9366292430787261BE6"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 8012,
											"end": 8043,
											"name": "LOG1",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 7850,
											"end": 7930,
											"name": "tag",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 7850,
											"end": 7930,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7906,
											"end": 7919,
											"name": "PUSH",
											"source": 10,
											"value": "D92E233D"
										},
										{
											"begin": 7906,
											"end": 7919,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 7906,
											"end": 7919,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7906,
											"end": 7919,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7906,
											"end": 7919,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8100,
											"end": 8334,
											"name": "tag",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 8100,
											"end": 8334,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8191,
											"end": 8323,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8191,
											"end": 8323,
											"name": "PUSH",
											"source": 10,
											"value": "61DB9C1"
										},
										{
											"begin": 8191,
											"end": 8323,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 8191,
											"end": 8323,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8191,
											"end": 8323,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8104,
											"end": 8114,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 8191,
											"end": 8323,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 8104,
											"end": 8168,
											"name": "tag",
											"source": 10,
											"value": "147"
										},
										{
											"begin": 8104,
											"end": 8168,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 8104,
											"end": 8114,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8129,
											"end": 8168,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 8129,
											"end": 8168,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8104,
											"end": 8168,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 8104,
											"end": 8168,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "41"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "47F5C767712C0CB55E0943DE27DBB2DB3B8BDAC1E899AF22D477462089A99558"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "39"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 927,
											"end": 954,
											"name": "PUSH",
											"source": 9,
											"value": "D"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "37"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 647,
											"end": 678,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "35"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "171"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "171"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "172"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 2357,
											"end": 2375,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 2357,
											"end": 2375,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 2357,
											"end": 2375,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2357,
											"end": 2375,
											"name": "tag",
											"source": 9,
											"value": "178"
										},
										{
											"begin": 2357,
											"end": 2375,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2344,
											"end": 2353,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 2344,
											"end": 2375,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2433,
											"end": 2455,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2433,
											"end": 2455,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2444,
											"end": 2454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2444,
											"end": 2454,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2433,
											"end": 2455,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2433,
											"end": 2455,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2433,
											"end": 2455,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2433,
											"end": 2455,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2433,
											"end": 2455,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2433,
											"end": 2455,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2433,
											"end": 2455,
											"name": "tag",
											"source": 9,
											"value": "181"
										},
										{
											"begin": 2433,
											"end": 2455,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2423,
											"end": 2456,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2423,
											"end": 2456,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2547,
											"end": 2557,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2585,
											"end": 2607,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2607,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2585,
											"end": 2607,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2607,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 2585,
											"end": 2607,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2607,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 2585,
											"end": 2607,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2585,
											"end": 2607,
											"name": "tag",
											"source": 9,
											"value": "182"
										},
										{
											"begin": 2585,
											"end": 2607,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2575,
											"end": 2608,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2575,
											"end": 2608,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 2601,
											"end": 2614,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2596,
											"end": 2730,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "tag",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "8"
										},
										{
											"begin": 2710,
											"end": 2718,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "tag",
											"source": 8,
											"value": "186"
										},
										{
											"begin": 2710,
											"end": 2718,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 605,
											"end": 610,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 605,
											"end": 610,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 605,
											"end": 610,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 605,
											"end": 610,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 605,
											"end": 610,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 605,
											"end": 610,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 889,
											"end": 1024,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 889,
											"end": 1024,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 889,
											"end": 1024,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 605,
											"end": 664,
											"name": "tag",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2634,
											"end": 2637,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2601,
											"end": 2614,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2601,
											"end": 2614,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "183"
										},
										{
											"begin": 2601,
											"end": 2614,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 605,
											"end": 664,
											"name": "tag",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 889,
											"end": 1024,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 889,
											"end": 1024,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 889,
											"end": 1024,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 889,
											"end": 1024,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 605,
											"end": 664,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 605,
											"end": 664,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "tag",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2616,
											"end": 2632,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2016,
											"end": 2049,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 2691,
											"end": 2699,
											"name": "tag",
											"source": 9,
											"value": "192"
										},
										{
											"begin": 2691,
											"end": 2699,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2691,
											"end": 2699,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2691,
											"end": 2699,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 2691,
											"end": 2699,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 2691,
											"end": 2699,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 2691,
											"end": 2699,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 2775,
											"end": 2808,
											"name": "PUSH",
											"source": 9,
											"value": "668F5B446EB814FE35B3206F43F14BD8567BA04DDAF7A3EE56516929AB22CCB"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 2444,
											"end": 2454,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 2775,
											"end": 2808,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 2775,
											"end": 2808,
											"name": "LOG2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 2701,
											"end": 2704,
											"name": "tag",
											"source": 9,
											"value": "193"
										},
										{
											"begin": 2701,
											"end": 2704,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2732,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "10000000000000000"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "197"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2720,
											"end": 2732,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "197"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 2444,
											"end": 2454,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 2444,
											"end": 2454,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "A0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 2676,
											"end": 2689,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "192"
										},
										{
											"begin": 2676,
											"end": 2689,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "190"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "9BDE339"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "179"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "44044A5"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E2"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "176"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "175"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "33"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "31"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "206"
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 2303,
											"end": 2365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "tag",
											"source": 4,
											"value": "206"
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5508,
											"end": 5520,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5508,
											"end": 5524,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5508,
											"end": 5524,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 5564,
											"end": 5579,
											"name": "PUSH",
											"source": 9,
											"value": "D"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5633,
											"end": 5654,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5633,
											"end": 5654,
											"name": "SELFBALANCE",
											"source": 9
										},
										{
											"begin": 5633,
											"end": 5670,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 5761,
											"end": 5788,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5761,
											"end": 5788,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "213"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "215"
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 5845,
											"end": 5897,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "tag",
											"source": 9,
											"value": "215"
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5845,
											"end": 5897,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5508,
											"end": 5520,
											"name": "PUSH",
											"source": 9,
											"value": "A"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 6021,
											"end": 6052,
											"name": "PUSH",
											"source": 9,
											"value": "5689F9EF5BE164071958E27DCA7A9DF000791288FB23C621501D67B6A808848B"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 6021,
											"end": 6052,
											"name": "LOG1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "12171D83"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "213"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "16"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "10DA185C9A5D1E481DD85B1B195D081B9BDD081CD95D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "52"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "211"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "2F"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "496E73756666696369656E7420636F6E74726163742062616C616E636520666F"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7220636861726974792066756E6473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "84"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "209"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "30D747F9"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E2"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "207"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "356680B7"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "29"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "222"
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 2303,
											"end": 2365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "tag",
											"source": 4,
											"value": "222"
										},
										{
											"begin": 2303,
											"end": 2365,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "47F5C767712C0CB55E0943DE27DBB2DB3B8BDAC1E899AF22D477462089A99558"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 4,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "27"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5053,
											"end": 5063,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5052,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5110,
											"end": 5131,
											"name": "SELFBALANCE",
											"source": 9
										},
										{
											"begin": 5135,
											"end": 5147,
											"name": "PUSH",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5053,
											"end": 5063,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 5045,
											"end": 5052,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5135,
											"end": 5147,
											"name": "PUSH",
											"source": 9,
											"value": "9"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 5053,
											"end": 5063,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 5296,
											"end": 5345,
											"name": "GAS",
											"source": 9
										},
										{
											"begin": 5296,
											"end": 5345,
											"name": "CALL",
											"source": 9
										},
										{
											"begin": 5296,
											"end": 5345,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 5296,
											"end": 5345,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 5296,
											"end": 5345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 5296,
											"end": 5345,
											"name": "tag",
											"source": 9,
											"value": "231"
										},
										{
											"begin": 5296,
											"end": 5345,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 5296,
											"end": 5345,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "216"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 5053,
											"end": 5063,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 5405,
											"end": 5429,
											"name": "PUSH",
											"source": 9,
											"value": "9F058359C5A4D11027CE8027F5F0F4DF210CB3EBAC92F2C584170ED78624DD8"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 5405,
											"end": 5429,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 5405,
											"end": 5429,
											"name": "LOG2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "STOP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "229"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1D"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "496E73756666696369656E7420636F6E74726163742062616C616E6365000000"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "64"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "227"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "58CD4FC1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "25"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "238"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "238"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 882,
											"end": 921,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 847,
											"end": 876,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 847,
											"end": 876,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 847,
											"end": 876,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 847,
											"end": 876,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 847,
											"end": 876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 847,
											"end": 876,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 847,
											"end": 876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 847,
											"end": 876,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 847,
											"end": 876,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 847,
											"end": 876,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 847,
											"end": 876,
											"name": "tag",
											"source": 9,
											"value": "245"
										},
										{
											"begin": 847,
											"end": 876,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "21"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 748,
											"end": 773,
											"name": "PUSH",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "19"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "23"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7425,
											"end": 7435,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7425,
											"end": 7464,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7425,
											"end": 7464,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 7425,
											"end": 7464,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 7421,
											"end": 7608,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 7421,
											"end": 7608,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4156,
											"end": 4168,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 4143,
											"end": 4168,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4227,
											"end": 4239,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4205,
											"end": 4239,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 4205,
											"end": 4239,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4205,
											"end": 4239,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "269"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "269"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "270"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "270"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "268"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATACOPY",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 4343,
											"end": 4984,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4381,
											"end": 4384,
											"name": "tag",
											"source": 9,
											"value": "271"
										},
										{
											"begin": 4381,
											"end": 4384,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4227,
											"end": 4239,
											"name": "PUSH",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 4363,
											"end": 4379,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 4363,
											"end": 4379,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 4363,
											"end": 4379,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4363,
											"end": 4379,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "89"
										},
										{
											"begin": 4363,
											"end": 4379,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 4450,
											"end": 4888,
											"name": "tag",
											"source": 9,
											"value": "276"
										},
										{
											"begin": 4450,
											"end": 4888,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4516,
											"end": 4528,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "277"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4570,
											"end": 4595,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "279"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MOD",
											"source": 9
										},
										{
											"begin": 4570,
											"end": 4595,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4570,
											"end": 4595,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4570,
											"end": 4595,
											"name": "tag",
											"source": 9,
											"value": "279"
										},
										{
											"begin": 4570,
											"end": 4595,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4619,
											"end": 4626,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 4618,
											"end": 4634,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 4614,
											"end": 4772,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "280"
										},
										{
											"begin": 4614,
											"end": 4772,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MOD",
											"source": 9
										},
										{
											"begin": 4450,
											"end": 4888,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "276"
										},
										{
											"begin": 4450,
											"end": 4888,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4614,
											"end": 4772,
											"name": "tag",
											"source": 9,
											"value": "280"
										},
										{
											"begin": 4614,
											"end": 4772,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP6",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 4619,
											"end": 4626,
											"name": "PUSH",
											"source": 9,
											"value": "C"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 4702,
											"end": 4726,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "284"
										},
										{
											"begin": 4702,
											"end": 4726,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 4702,
											"end": 4726,
											"name": "DUP6",
											"source": 9
										},
										{
											"begin": 4702,
											"end": 4726,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 4702,
											"end": 4726,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 4702,
											"end": 4726,
											"name": "tag",
											"source": 9,
											"value": "284"
										},
										{
											"begin": 4702,
											"end": 4726,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 4902,
											"end": 4924,
											"name": "PUSH",
											"source": 9,
											"value": "D"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 4902,
											"end": 4924,
											"name": "PUSH",
											"source": 9,
											"value": "D"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP8",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "285"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "POP",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "PUSH",
											"source": 9,
											"value": "32A1B5731A757F192A06CA973715CA4DBC42C2D15323CABAA74E0A2D5DC088E4"
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 4944,
											"end": 4973,
											"name": "LOG1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 4348,
											"end": 4361,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 4348,
											"end": 4361,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "271"
										},
										{
											"begin": 4348,
											"end": 4361,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "286"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "285"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "277"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "12"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4E487B71"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "32"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "266"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1F9EFADB"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "264"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "41ABC801"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "E0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "REVERT",
											"source": 9
										},
										{
											"begin": 7421,
											"end": 7608,
											"name": "tag",
											"source": 10,
											"value": "262"
										},
										{
											"begin": 7421,
											"end": 7608,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7487,
											"end": 7597,
											"name": "PUSH",
											"source": 10,
											"value": "73E64FD"
										},
										{
											"begin": 7487,
											"end": 7597,
											"name": "PUSH",
											"source": 10,
											"value": "E2"
										},
										{
											"begin": 7487,
											"end": 7597,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7487,
											"end": 7597,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7425,
											"end": 7435,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "44"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 7487,
											"end": 7597,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "17"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 715,
											"end": 742,
											"name": "PUSH",
											"source": 9,
											"value": "7"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "15"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 509,
											"end": 535,
											"name": "PUSH",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "13"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLVALUE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 684,
											"end": 709,
											"name": "PUSH",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURN",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "1"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 4516,
											"end": 4528,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 4516,
											"end": 4528,
											"name": "PUSH",
											"source": 9,
											"value": "B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "KECCAK256",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "2"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "CALLDATALOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SUB",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "68"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "NOT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "GT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "118"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "312"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "1F"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "3"
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "312"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURNDATASIZE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "RETURNDATACOPY",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "308"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "60"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "6"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MUL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP5",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DIV",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "127"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "tag",
											"source": 4,
											"value": "7"
										},
										{
											"begin": 3405,
											"end": 3620,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3489,
											"end": 3511,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 3489,
											"end": 3511,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 3485,
											"end": 3576,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "316"
										},
										{
											"begin": 3485,
											"end": 3576,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "47F5C767712C0CB55E0943DE27DBB2DB3B8BDAC1E899AF22D477462089A99558"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "OR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SSTORE",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "PUSH",
											"source": 4,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": 3975,
											"end": 4015,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 3405,
											"end": 3620,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3485,
											"end": 3576,
											"name": "tag",
											"source": 4,
											"value": "316"
										},
										{
											"begin": 3485,
											"end": 3576,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "PUSH",
											"source": 4,
											"value": "1E4FBDF7"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 3509,
											"end": 3510,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 3509,
											"end": 3510,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": 3509,
											"end": 3510,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3534,
											"end": 3565,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "tag",
											"source": 9,
											"value": "8"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPDEST",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "LT",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ISZERO",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH [tag]",
											"source": 9,
											"value": "274"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "JUMPI",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "20"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP2",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "5"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHL",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "ADD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SWAP1",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 9
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "tag",
											"source": 4,
											"value": "9"
										},
										{
											"begin": 2658,
											"end": 2820,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "47F5C767712C0CB55E0943DE27DBB2DB3B8BDAC1E899AF22D477462089A99558"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 2717,
											"end": 2740,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "320"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 2658,
											"end": 2820,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "tag",
											"source": 4,
											"value": "320"
										},
										{
											"begin": 2713,
											"end": 2814,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 4,
											"value": "118CDAA7"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "MSTORE",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "24"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 2763,
											"end": 2803,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 7082,
											"end": 7223,
											"name": "tag",
											"source": 5,
											"value": "10"
										},
										{
											"begin": 7082,
											"end": 7223,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "E28A5566B8A884201AB44E2D991177CE8B88325E02E52CBC3DA6E67B3ECF29C6"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SLOAD",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "PUSH",
											"source": 9,
											"value": "40"
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "SHR",
											"source": 9
										},
										{
											"begin": 356,
											"end": 6061,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 7148,
											"end": 7166,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 7144,
											"end": 7217,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "322"
										},
										{
											"begin": 7144,
											"end": 7217,
											"name": "JUMPI",
											"source": 5
										},
										{
											"begin": 7082,
											"end": 7223,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 7144,
											"end": 7217,
											"name": "tag",
											"source": 5,
											"value": "322"
										},
										{
											"begin": 7144,
											"end": 7217,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 5,
											"value": "1AFCD79F"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 5,
											"value": "E3"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "SHL",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 7189,
											"end": 7206,
											"name": "REVERT",
											"source": 5
										}
									],
									".data": {
										"47F5C767712C0CB55E0943DE27DBB2DB3B8BDAC1E899AF22D477462089A99558": "9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300",
										"E28A5566B8A884201AB44E2D991177CE8B88325E02E52CBC3DA6E67B3ECF29C6": "f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									}
								}
							},
							"sourceList": [
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol",
								"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
								"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
								"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
								"src/CharityRaffle.sol",
								"src/VRFConsumerBaseV2PlusCustom.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DENOMINATOR()": "918f8674",
							"buyTicket(uint256,bytes32[])": "8a89c8c9",
							"charityFunds()": "e17901d8",
							"charityWallet()": "7b208769",
							"claimCharityFunds()": "74552552",
							"claimPrize()": "70740ac9",
							"initialize(address,address,uint256,bytes32,bytes32)": "f9f23186",
							"merkleRoot()": "2eb4a7ab",
							"numOfWinners()": "c7383be8",
							"owner()": "8da5cb5b",
							"participants(uint256)": "35c1d349",
							"pricePersentageBPS()": "98617e2a",
							"rawFulfillRandomWords(uint256,uint256[])": "1fe543e3",
							"renounceOwnership()": "715018a6",
							"requestRandomWinners()": "98afca73",
							"s_vrfCoordinator()": "9eccacf6",
							"setCoordinator(address)": "8ea98117",
							"ticketPrice()": "1209b1f6",
							"transferOwnership(address)": "f2fde38b",
							"vrfKeyHash()": "041d443e",
							"vrfRequestId()": "18a7ea5f",
							"vrfSubsciptionId()": "8b39989b",
							"winnerReward()": "b9705a03",
							"winners(address)": "6bd5450a",
							"winnersSelected()": "8bc53285"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRandomWords\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAWinner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"OnlyOwnerOrCoordinator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VRFRequestAlreadyMade\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WinnersNotSelected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CharityWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"PrizeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"TicketPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"}],\"name\":\"WinnersSelected\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_qty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"charityWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCharityFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_charityWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_vrfSubsciptionId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_vrfKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfWinners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePersentageBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfKeyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfSubsciptionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnerReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"winners\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnersSelected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CharityRaffle.sol\":\"CharityRaffle\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8a347ae8d28007a7537abdc153d3d400d330e02339e8070dd4d783dbdb4de2e\",\"dweb:/ipfs/QmT4rCRw9LBkTYnjRSLNoVP6qhMWA1xg7Hp3wGrRSsV5YL\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12df6d3bd2130709c9f923e5dc8d6e8014c1d4bc35a2722c849f46bdbe1ea9cb\",\"dweb:/ipfs/QmVswk94A2g9KEbK792tw5o4X27HWzP2cw7wPmuRr116js\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b67dd54c0f1083d804f9c0ac6b6a62db1727b090f6d1afb0a8107baea7b40d8\",\"dweb:/ipfs/QmbD4vuTA7sBtR4DxeDjKr2pC51xgw8RRef2AmodnH5B1F\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://882f7357f1a4d7479adda35f81c130bb9a7bfa024d5b9617c75a0539116c2a1d\",\"dweb:/ipfs/QmWzLDgcS9jUh4AT65dQRr46ZhGHgQ4KoNfSdFiFTFqneQ\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08\",\"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q\"]},\"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"src/CharityRaffle.sol\":{\"keccak256\":\"0xa482bcb155095e067999864a82ce68962ef41dc7ebc075d2d8948f8d5c257ab0\",\"license\":\"UNLICENSED\",\"urls\":[\"bzz-raw://1e0ca03f391f28a26e45e25197cdd746b34a781b3d94b2a934990c0f955401ed\",\"dweb:/ipfs/QmNf9Cq4xaM7UbU3Eony3njBvAgmbWAAbWZW4RQ1YKZ3WM\"]},\"src/VRFConsumerBaseV2PlusCustom.sol\":{\"keccak256\":\"0x7c2b2401351eea6f1412e7070f412905904dd2a7831d093b9ae7bf21de26fe94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://baf9af477455c7c040f61d42e4621790ed8a4de0ff931f959ffe1206ec16f9e0\",\"dweb:/ipfs/QmWKAAQ7EPUuserBWH1AosL3pyWRgTqy9z82KECwMwpn9p\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2336,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "s_vrfCoordinator",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(IVRFCoordinatorV2Plus)17"
							},
							{
								"astId": 1800,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "ticketPrice",
								"offset": 0,
								"slot": "1",
								"type": "t_uint256"
							},
							{
								"astId": 1802,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "numOfWinners",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 1804,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "pricePersentageBPS",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 1806,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "charityWallet",
								"offset": 0,
								"slot": "4",
								"type": "t_address"
							},
							{
								"astId": 1808,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "vrfSubsciptionId",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							},
							{
								"astId": 1810,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "vrfKeyHash",
								"offset": 0,
								"slot": "6",
								"type": "t_bytes32"
							},
							{
								"astId": 1812,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "vrfRequestId",
								"offset": 0,
								"slot": "7",
								"type": "t_uint256"
							},
							{
								"astId": 1814,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "merkleRoot",
								"offset": 0,
								"slot": "8",
								"type": "t_bytes32"
							},
							{
								"astId": 1816,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "winnerReward",
								"offset": 0,
								"slot": "9",
								"type": "t_uint256"
							},
							{
								"astId": 1818,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "charityFunds",
								"offset": 0,
								"slot": "10",
								"type": "t_uint256"
							},
							{
								"astId": 1821,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "participants",
								"offset": 0,
								"slot": "11",
								"type": "t_array(t_address)dyn_storage"
							},
							{
								"astId": 1825,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "winners",
								"offset": 0,
								"slot": "12",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 1827,
								"contract": "src/CharityRaffle.sol:CharityRaffle",
								"label": "winnersSelected",
								"offset": 0,
								"slot": "13",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_address)dyn_storage": {
								"base": "t_address",
								"encoding": "dynamic_array",
								"label": "address[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_contract(IVRFCoordinatorV2Plus)17": {
								"encoding": "inplace",
								"label": "contract IVRFCoordinatorV2Plus",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"setCoordinator(address)": {
								"notice": "Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"
							}
						},
						"version": 1
					}
				}
			},
			"src/VRFConsumerBaseV2PlusCustom.sol": {
				"VRFConsumerBaseV2PlusCustom": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "have",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "want",
									"type": "address"
								}
							],
							"name": "OnlyCoordinatorCanFulfill",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "have",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "coordinator",
									"type": "address"
								}
							],
							"name": "OnlyOwnerOrCoordinator",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ZeroAddress",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "vrfCoordinator",
									"type": "address"
								}
							],
							"name": "CoordinatorSet",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "requestId",
									"type": "uint256"
								},
								{
									"internalType": "uint256[]",
									"name": "randomWords",
									"type": "uint256[]"
								}
							],
							"name": "rawFulfillRandomWords",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "s_vrfCoordinator",
							"outputs": [
								{
									"internalType": "contract IVRFCoordinatorV2Plus",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_vrfCoordinator",
									"type": "address"
								}
							],
							"name": "setCoordinator",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinatorV2Plus.2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBaseV2Plus, and caninitialize VRFConsumerBaseV2Plus's attributes in their constructor asshown:contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {constructor(<other arguments>, address _vrfCoordinator, address _subOwner)VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create a subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords, extraArgs),see (IVRFCoordinatorV2Plus for a description of the arguments).Once the VRFCoordinatorV2Plus has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"rawFulfillRandomWords(uint256,uint256[])": "1fe543e3",
							"s_vrfCoordinator()": "9eccacf6",
							"setCoordinator(address)": "8ea98117"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"}],\"name\":\"OnlyOwnerOrCoordinator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"}],\"name\":\"CoordinatorSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract IVRFCoordinatorV2Plus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"setCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinatorV2Plus.2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBaseV2Plus, and caninitialize VRFConsumerBaseV2Plus's attributes in their constructor asshown:contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {constructor(<other arguments>, address _vrfCoordinator, address _subOwner)VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create a subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords, extraArgs),see (IVRFCoordinatorV2Plus for a description of the arguments).Once the VRFCoordinatorV2Plus has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setCoordinator(address)\":{\"notice\":\"Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner\"}},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/VRFConsumerBaseV2PlusCustom.sol\":\"VRFConsumerBaseV2PlusCustom\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/contracts/=lib/chainlink-brownie-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol\":{\"keccak256\":\"0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d8a347ae8d28007a7537abdc153d3d400d330e02339e8070dd4d783dbdb4de2e\",\"dweb:/ipfs/QmT4rCRw9LBkTYnjRSLNoVP6qhMWA1xg7Hp3wGrRSsV5YL\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol\":{\"keccak256\":\"0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12df6d3bd2130709c9f923e5dc8d6e8014c1d4bc35a2722c849f46bdbe1ea9cb\",\"dweb:/ipfs/QmVswk94A2g9KEbK792tw5o4X27HWzP2cw7wPmuRr116js\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol\":{\"keccak256\":\"0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b67dd54c0f1083d804f9c0ac6b6a62db1727b090f6d1afb0a8107baea7b40d8\",\"dweb:/ipfs/QmbD4vuTA7sBtR4DxeDjKr2pC51xgw8RRef2AmodnH5B1F\"]},\"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol\":{\"keccak256\":\"0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://882f7357f1a4d7479adda35f81c130bb9a7bfa024d5b9617c75a0539116c2a1d\",\"dweb:/ipfs/QmWzLDgcS9jUh4AT65dQRr46ZhGHgQ4KoNfSdFiFTFqneQ\"]},\"src/VRFConsumerBaseV2PlusCustom.sol\":{\"keccak256\":\"0x7c2b2401351eea6f1412e7070f412905904dd2a7831d093b9ae7bf21de26fe94\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://baf9af477455c7c040f61d42e4621790ed8a4de0ff931f959ffe1206ec16f9e0\",\"dweb:/ipfs/QmWKAAQ7EPUuserBWH1AosL3pyWRgTqy9z82KECwMwpn9p\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2336,
								"contract": "src/VRFConsumerBaseV2PlusCustom.sol:VRFConsumerBaseV2PlusCustom",
								"label": "s_vrfCoordinator",
								"offset": 0,
								"slot": "0",
								"type": "t_contract(IVRFCoordinatorV2Plus)17"
							}
						],
						"types": {
							"t_contract(IVRFCoordinatorV2Plus)17": {
								"encoding": "inplace",
								"label": "contract IVRFCoordinatorV2Plus",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"setCoordinator(address)": {
								"notice": "Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"
							}
						},
						"notice": "****************************************************************************Interface for contracts using VRF randomness *****************************************************************************",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol": {
				"ast": {
					"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol",
					"exportedSymbols": {
						"IVRFCoordinatorV2Plus": [
							17
						],
						"IVRFSubscriptionV2Plus": [
							120
						],
						"VRFV2PlusClient": [
							162
						]
					},
					"id": 18,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol",
							"file": "../libraries/VRFV2PlusClient.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 18,
							"sourceUnit": 163,
							"src": "57:65:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "VRFV2PlusClient",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 162,
										"src": "65:15:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol",
							"file": "./IVRFSubscriptionV2Plus.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 18,
							"sourceUnit": 121,
							"src": "123:68:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "IVRFSubscriptionV2Plus",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 120,
										"src": "131:22:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 6,
										"name": "IVRFSubscriptionV2Plus",
										"nameLocations": [
											"398:22:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 120,
										"src": "398:22:0"
									},
									"id": 7,
									"nodeType": "InheritanceSpecifier",
									"src": "398:22:0"
								}
							],
							"canonicalName": "IVRFCoordinatorV2Plus",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 17,
							"linearizedBaseContracts": [
								17,
								120
							],
							"name": "IVRFCoordinatorV2Plus",
							"nameLocation": "373:21:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 8,
										"nodeType": "StructuredDocumentation",
										"src": "425:1588:0",
										"text": " @notice Request a set of random words.\n @param req - a struct containing following fields for randomness request:\n keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n requestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n extraArgs - abi-encoded extra args\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."
									},
									"functionSelector": "9b1c385e",
									"id": 16,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requestRandomWords",
									"nameLocation": "2025:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "req",
												"nameLocation": "2088:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "2044:47:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_RandomWordsRequest_$146_calldata_ptr",
													"typeString": "struct VRFV2PlusClient.RandomWordsRequest"
												},
												"typeName": {
													"id": 10,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 9,
														"name": "VRFV2PlusClient.RandomWordsRequest",
														"nameLocations": [
															"2044:15:0",
															"2060:18:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 146,
														"src": "2044:34:0"
													},
													"referencedDeclaration": 146,
													"src": "2044:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_RandomWordsRequest_$146_storage_ptr",
														"typeString": "struct VRFV2PlusClient.RandomWordsRequest"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2043:49:0"
									},
									"returnParameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "2119:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "2111:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 13,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2111:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2110:19:0"
									},
									"scope": 17,
									"src": "2016:114:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 18,
							"src": "363:1769:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:2101:0"
				},
				"id": 0
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol": {
				"ast": {
					"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol",
					"exportedSymbols": {
						"IVRFMigratableConsumerV2Plus": [
							31
						]
					},
					"id": 32,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 19,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IVRFMigratableConsumerV2Plus",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 20,
								"nodeType": "StructuredDocumentation",
								"src": "57:211:1",
								"text": "@notice The IVRFMigratableConsumerV2Plus interface defines the\n @notice method required to be implemented by all V2Plus consumers.\n @dev This interface is designed to be used in VRFConsumerBaseV2Plus."
							},
							"fullyImplemented": false,
							"id": 31,
							"linearizedBaseContracts": [
								31
							],
							"name": "IVRFMigratableConsumerV2Plus",
							"nameLocation": "278:28:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "d1a6a14209a385a964d036e404cb5cfb71f4000cdb03c9366292430787261be6",
									"id": 24,
									"name": "CoordinatorSet",
									"nameLocation": "317:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"indexed": false,
												"mutability": "mutable",
												"name": "vrfCoordinator",
												"nameLocation": "340:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "332:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "332:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "331:24:1"
									},
									"src": "311:45:1"
								},
								{
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "360:131:1",
										"text": "@notice Sets the VRF Coordinator address\n @notice This method should only be callable by the coordinator or contract owner"
									},
									"functionSelector": "8ea98117",
									"id": 30,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCoordinator",
									"nameLocation": "503:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "vrfCoordinator",
												"nameLocation": "526:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "518:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "518:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "517:24:1"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "550:0:1"
									},
									"scope": 31,
									"src": "494:57:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 32,
							"src": "268:285:1",
							"usedErrors": [],
							"usedEvents": [
								24
							]
						}
					],
					"src": "32:522:1"
				},
				"id": 1
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol": {
				"ast": {
					"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol",
					"exportedSymbols": {
						"IVRFSubscriptionV2Plus": [
							120
						]
					},
					"id": 121,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 33,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IVRFSubscriptionV2Plus",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 34,
								"nodeType": "StructuredDocumentation",
								"src": "57:141:2",
								"text": "@notice The IVRFSubscriptionV2Plus interface defines the subscription\n @notice related methods implemented by the V2Plus coordinator."
							},
							"fullyImplemented": false,
							"id": 120,
							"linearizedBaseContracts": [
								120
							],
							"name": "IVRFSubscriptionV2Plus",
							"nameLocation": "208:22:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "235:170:2",
										"text": " @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"
									},
									"functionSelector": "bec4c08c",
									"id": 42,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addConsumer",
									"nameLocation": "417:11:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "437:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "429:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "429:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "consumer",
												"nameLocation": "452:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "444:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 38,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "444:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "428:33:2"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "470:0:2"
									},
									"scope": 120,
									"src": "408:63:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "475:172:2",
										"text": " @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"
									},
									"functionSelector": "cb631797",
									"id": 50,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeConsumer",
									"nameLocation": "659:14:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 48,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "682:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "674:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 44,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "674:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "consumer",
												"nameLocation": "697:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "689:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "689:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:33:2"
									},
									"returnParameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "715:0:2"
									},
									"scope": 120,
									"src": "650:66:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "720:140:2",
										"text": " @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"
									},
									"functionSelector": "0ae09540",
									"id": 58,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "cancelSubscription",
									"nameLocation": "872:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "899:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "891:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 52,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "914:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "906:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 54,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "906:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:27:2"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "926:0:2"
									},
									"scope": 120,
									"src": "863:64:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "931:211:2",
										"text": " @notice Accept subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."
									},
									"functionSelector": "b2a7cac5",
									"id": 64,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "acceptSubscriptionOwnerTransfer",
									"nameLocation": "1154:31:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "1194:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 64,
												"src": "1186:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 60,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1186:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1185:15:2"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1209:0:2"
									},
									"scope": 120,
									"src": "1145:65:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 65,
										"nodeType": "StructuredDocumentation",
										"src": "1214:164:2",
										"text": " @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"
									},
									"functionSelector": "dac83d29",
									"id": 72,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "requestSubscriptionOwnerTransfer",
									"nameLocation": "1390:32:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 67,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "1431:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1423:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 66,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1423:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1446:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 72,
												"src": "1438:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1438:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1422:33:2"
									},
									"returnParameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1464:0:2"
									},
									"scope": 120,
									"src": "1381:84:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 73,
										"nodeType": "StructuredDocumentation",
										"src": "1469:613:2",
										"text": " @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription with LINK, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));\n @dev Note to fund the subscription with Native, use fundSubscriptionWithNative. Be sure\n @dev  to send Native with the call, for example:\n @dev COORDINATOR.fundSubscriptionWithNative{value: amount}(subId);"
									},
									"functionSelector": "a21a23e4",
									"id": 78,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createSubscription",
									"nameLocation": "2094:18:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2112:2:2"
									},
									"returnParameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "2141:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "2133:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2133:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2132:15:2"
									},
									"scope": 120,
									"src": "2085:63:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 79,
										"nodeType": "StructuredDocumentation",
										"src": "2152:422:2",
										"text": " @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return nativeBalance - native balance of the subscription in wei.\n @return reqCount - Requests count of subscription.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."
									},
									"functionSelector": "dc311dd3",
									"id": 95,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getSubscription",
									"nameLocation": "2586:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "2615:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "2607:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 80,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2607:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2601:23:2"
									},
									"returnParameters": {
										"id": 94,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 84,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "2667:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "2660:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 83,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "2660:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 86,
												"mutability": "mutable",
												"name": "nativeBalance",
												"nameLocation": "2683:13:2",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "2676:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint96",
													"typeString": "uint96"
												},
												"typeName": {
													"id": 85,
													"name": "uint96",
													"nodeType": "ElementaryTypeName",
													"src": "2676:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint96",
														"typeString": "uint96"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "reqCount",
												"nameLocation": "2705:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "2698:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 87,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "2698:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 90,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2723:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "2715:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 89,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2715:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"mutability": "mutable",
												"name": "consumers",
												"nameLocation": "2747:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 95,
												"src": "2730:26:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 91,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "2730:7:2",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 92,
													"nodeType": "ArrayTypeName",
													"src": "2730:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2659:98:2"
									},
									"scope": 120,
									"src": "2577:181:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"functionSelector": "41af6c87",
									"id": 102,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "pendingRequestExists",
									"nameLocation": "3063:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "3092:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "3084:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3084:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3083:15:2"
									},
									"returnParameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 102,
												"src": "3122:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 99,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3122:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3121:6:2"
									},
									"scope": 120,
									"src": "3054:74:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 103,
										"nodeType": "StructuredDocumentation",
										"src": "3132:427:2",
										"text": " @notice Paginate through all active VRF subscriptions.\n @param startIndex index of the subscription to start from\n @param maxCount maximum number of subscriptions to return, 0 to return all\n @dev the order of IDs in the list is **not guaranteed**, therefore, if making successive calls, one\n @dev should consider keeping the blockheight constant to ensure a holistic picture of the contract state"
									},
									"functionSelector": "aefb212f",
									"id": 113,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getActiveSubscriptionIds",
									"nameLocation": "3571:24:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 105,
												"mutability": "mutable",
												"name": "startIndex",
												"nameLocation": "3604:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "3596:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"mutability": "mutable",
												"name": "maxCount",
												"nameLocation": "3624:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "3616:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 106,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3616:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3595:38:2"
									},
									"returnParameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 111,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 113,
												"src": "3657:16:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 109,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3657:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 110,
													"nodeType": "ArrayTypeName",
													"src": "3657:9:2",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3656:18:2"
									},
									"scope": 120,
									"src": "3562:113:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 114,
										"nodeType": "StructuredDocumentation",
										"src": "3679:175:2",
										"text": " @notice Fund a subscription with native.\n @param subId - ID of the subscription\n @notice This method expects msg.value to be greater than or equal to 0."
									},
									"functionSelector": "95b55cfc",
									"id": 119,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fundSubscriptionWithNative",
									"nameLocation": "3866:26:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "subId",
												"nameLocation": "3901:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "3893:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3893:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3892:15:2"
									},
									"returnParameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3924:0:2"
									},
									"scope": 120,
									"src": "3857:68:2",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 121,
							"src": "198:3729:2",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:3896:2"
				},
				"id": 2
			},
			"lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol": {
				"ast": {
					"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol",
					"exportedSymbols": {
						"VRFV2PlusClient": [
							162
						]
					},
					"id": 163,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 122,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "VRFV2PlusClient",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 162,
							"linearizedBaseContracts": [
								162
							],
							"name": "VRFV2PlusClient",
							"nameLocation": "90:15:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"functionSelector": "f7514ab4",
									"id": 130,
									"mutability": "constant",
									"name": "EXTRA_ARGS_V1_TAG",
									"nameLocation": "184:17:3",
									"nodeType": "VariableDeclaration",
									"scope": 162,
									"src": "161:79:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes4",
										"typeString": "bytes4"
									},
									"typeName": {
										"id": 123,
										"name": "bytes4",
										"nodeType": "ElementaryTypeName",
										"src": "161:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										}
									},
									"value": {
										"arguments": [
											{
												"arguments": [
													{
														"hexValue": "565246204578747261417267735631",
														"id": 127,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "221:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa",
															"typeString": "literal_string \"VRF ExtraArgsV1\""
														},
														"value": "VRF ExtraArgsV1"
													}
												],
												"expression": {
													"argumentTypes": [
														{
															"typeIdentifier": "t_stringliteral_92fd13387c7fe7befbc38d303d6468778fb9731bc4583f17d92989c6fcfdeaaa",
															"typeString": "literal_string \"VRF ExtraArgsV1\""
														}
													],
													"id": 126,
													"name": "keccak256",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 4294967288,
													"src": "211:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
														"typeString": "function (bytes memory) pure returns (bytes32)"
													}
												},
												"id": 128,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "functionCall",
												"lValueRequested": false,
												"nameLocations": [],
												"names": [],
												"nodeType": "FunctionCall",
												"src": "211:28:3",
												"tryCall": false,
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											],
											"id": 125,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"lValueRequested": false,
											"nodeType": "ElementaryTypeNameExpression",
											"src": "204:6:3",
											"typeDescriptions": {
												"typeIdentifier": "t_type$_t_bytes4_$",
												"typeString": "type(bytes4)"
											},
											"typeName": {
												"id": 124,
												"name": "bytes4",
												"nodeType": "ElementaryTypeName",
												"src": "204:6:3",
												"typeDescriptions": {}
											}
										},
										"id": 129,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "typeConversion",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "204:36:3",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes4",
											"typeString": "bytes4"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "VRFV2PlusClient.ExtraArgsV1",
									"id": 133,
									"members": [
										{
											"constant": false,
											"id": 132,
											"mutability": "mutable",
											"name": "nativePayment",
											"nameLocation": "274:13:3",
											"nodeType": "VariableDeclaration",
											"scope": 133,
											"src": "269:18:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 131,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "269:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "ExtraArgsV1",
									"nameLocation": "251:11:3",
									"nodeType": "StructDefinition",
									"scope": 162,
									"src": "244:48:3",
									"visibility": "public"
								},
								{
									"canonicalName": "VRFV2PlusClient.RandomWordsRequest",
									"id": 146,
									"members": [
										{
											"constant": false,
											"id": 135,
											"mutability": "mutable",
											"name": "keyHash",
											"nameLocation": "336:7:3",
											"nodeType": "VariableDeclaration",
											"scope": 146,
											"src": "328:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 134,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "328:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 137,
											"mutability": "mutable",
											"name": "subId",
											"nameLocation": "357:5:3",
											"nodeType": "VariableDeclaration",
											"scope": 146,
											"src": "349:13:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 136,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "349:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 139,
											"mutability": "mutable",
											"name": "requestConfirmations",
											"nameLocation": "375:20:3",
											"nodeType": "VariableDeclaration",
											"scope": 146,
											"src": "368:27:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint16",
												"typeString": "uint16"
											},
											"typeName": {
												"id": 138,
												"name": "uint16",
												"nodeType": "ElementaryTypeName",
												"src": "368:6:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint16",
													"typeString": "uint16"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 141,
											"mutability": "mutable",
											"name": "callbackGasLimit",
											"nameLocation": "408:16:3",
											"nodeType": "VariableDeclaration",
											"scope": 146,
											"src": "401:23:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 140,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "401:6:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 143,
											"mutability": "mutable",
											"name": "numWords",
											"nameLocation": "437:8:3",
											"nodeType": "VariableDeclaration",
											"scope": 146,
											"src": "430:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint32",
												"typeString": "uint32"
											},
											"typeName": {
												"id": 142,
												"name": "uint32",
												"nodeType": "ElementaryTypeName",
												"src": "430:6:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint32",
													"typeString": "uint32"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 145,
											"mutability": "mutable",
											"name": "extraArgs",
											"nameLocation": "457:9:3",
											"nodeType": "VariableDeclaration",
											"scope": 146,
											"src": "451:15:3",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 144,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "451:5:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "RandomWordsRequest",
									"nameLocation": "303:18:3",
									"nodeType": "StructDefinition",
									"scope": 162,
									"src": "296:175:3",
									"visibility": "public"
								},
								{
									"body": {
										"id": 160,
										"nodeType": "Block",
										"src": "568:70:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 156,
															"name": "EXTRA_ARGS_V1_TAG",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 130,
															"src": "604:17:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														{
															"id": 157,
															"name": "extraArgs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 149,
															"src": "623:9:3",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_ExtraArgsV1_$133_memory_ptr",
																"typeString": "struct VRFV2PlusClient.ExtraArgsV1 memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															{
																"typeIdentifier": "t_struct$_ExtraArgsV1_$133_memory_ptr",
																"typeString": "struct VRFV2PlusClient.ExtraArgsV1 memory"
															}
														],
														"expression": {
															"id": 154,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "581:3:3",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 155,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "585:18:3",
														"memberName": "encodeWithSelector",
														"nodeType": "MemberAccess",
														"src": "581:22:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes4) pure returns (bytes memory)"
														}
													},
													"id": 158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "581:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 153,
												"id": 159,
												"nodeType": "Return",
												"src": "574:59:3"
											}
										]
									},
									"id": 161,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_argsToBytes",
									"nameLocation": "484:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "extraArgs",
												"nameLocation": "516:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "497:28:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_ExtraArgsV1_$133_memory_ptr",
													"typeString": "struct VRFV2PlusClient.ExtraArgsV1"
												},
												"typeName": {
													"id": 148,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 147,
														"name": "ExtraArgsV1",
														"nameLocations": [
															"497:11:3"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 133,
														"src": "497:11:3"
													},
													"referencedDeclaration": 133,
													"src": "497:11:3",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_ExtraArgsV1_$133_storage_ptr",
														"typeString": "struct VRFV2PlusClient.ExtraArgsV1"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "496:30:3"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "bts",
												"nameLocation": "563:3:3",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "550:16:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 151,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "550:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "549:18:3"
									},
									"scope": 162,
									"src": "475:163:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 163,
							"src": "82:558:3",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:609:3"
				},
				"id": 3
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							671
						],
						"Initializable": [
							625
						],
						"OwnableUpgradeable": [
							357
						]
					},
					"id": 358,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 164,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:4"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 166,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 358,
							"sourceUnit": 672,
							"src": "128:67:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 165,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 671,
										"src": "136:18:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 168,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 358,
							"sourceUnit": 626,
							"src": "196:63:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 167,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 625,
										"src": "204:13:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 170,
										"name": "Initializable",
										"nameLocations": [
											"789:13:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 625,
										"src": "789:13:4"
									},
									"id": 171,
									"nodeType": "InheritanceSpecifier",
									"src": "789:13:4"
								},
								{
									"baseName": {
										"id": 172,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"804:18:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 671,
										"src": "804:18:4"
									},
									"id": 173,
									"nodeType": "InheritanceSpecifier",
									"src": "804:18:4"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 169,
								"nodeType": "StructuredDocumentation",
								"src": "261:487:4",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 357,
							"linearizedBaseContracts": [
								357,
								671,
								625
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "767:18:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "OwnableUpgradeable.OwnableStorage",
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "829:65:4",
										"text": "@custom:storage-location erc7201:openzeppelin.storage.Ownable"
									},
									"id": 177,
									"members": [
										{
											"constant": false,
											"id": 176,
											"mutability": "mutable",
											"name": "_owner",
											"nameLocation": "939:6:4",
											"nodeType": "VariableDeclaration",
											"scope": 177,
											"src": "931:14:4",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 175,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "931:7:4",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "OwnableStorage",
									"nameLocation": "906:14:4",
									"nodeType": "StructDefinition",
									"scope": 357,
									"src": "899:53:4",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 180,
									"mutability": "constant",
									"name": "OwnableStorageLocation",
									"nameLocation": "1094:22:4",
									"nodeType": "VariableDeclaration",
									"scope": 357,
									"src": "1069:116:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 178,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1069:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307839303136643039643732643430666461653266643863656163366236323334633737303632313466643339633163643165363039613035323863313939333030",
										"id": 179,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1119:66:4",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_65173360639460082030725920392146925864023520599682862633725751242436743107328_by_1",
											"typeString": "int_const 6517...(69 digits omitted)...7328"
										},
										"value": "0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 187,
										"nodeType": "Block",
										"src": "1270:81:4",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1289:56:4",
													"nodeType": "YulBlock",
													"src": "1289:56:4",
													"statements": [
														{
															"nativeSrc": "1303:32:4",
															"nodeType": "YulAssignment",
															"src": "1303:32:4",
															"value": {
																"name": "OwnableStorageLocation",
																"nativeSrc": "1313:22:4",
																"nodeType": "YulIdentifier",
																"src": "1313:22:4"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "1303:6:4",
																	"nodeType": "YulIdentifier",
																	"src": "1303:6:4"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 184,
														"isOffset": false,
														"isSlot": true,
														"src": "1303:6:4",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 180,
														"isOffset": false,
														"isSlot": false,
														"src": "1313:22:4",
														"valueSize": 1
													}
												],
												"id": 186,
												"nodeType": "InlineAssembly",
												"src": "1280:65:4"
											}
										]
									},
									"id": 188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getOwnableStorage",
									"nameLocation": "1201:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 181,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1219:2:4"
									},
									"returnParameters": {
										"id": 185,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 184,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "1267:1:4",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "1244:24:4",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
													"typeString": "struct OwnableUpgradeable.OwnableStorage"
												},
												"typeName": {
													"id": 183,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 182,
														"name": "OwnableStorage",
														"nameLocations": [
															"1244:14:4"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 177,
														"src": "1244:14:4"
													},
													"referencedDeclaration": 177,
													"src": "1244:14:4",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1243:26:4"
									},
									"scope": 357,
									"src": "1192:159:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 189,
										"nodeType": "StructuredDocumentation",
										"src": "1357:85:4",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 193,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "1453:26:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1488:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 193,
												"src": "1480:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 190,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1480:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1479:17:4"
									},
									"src": "1447:50:4"
								},
								{
									"documentation": {
										"id": 194,
										"nodeType": "StructuredDocumentation",
										"src": "1503:82:4",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 198,
									"name": "OwnableInvalidOwner",
									"nameLocation": "1596:19:4",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 196,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1624:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 198,
												"src": "1616:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 195,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1616:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1615:15:4"
									},
									"src": "1590:41:4"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 204,
									"name": "OwnershipTransferred",
									"nameLocation": "1643:20:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1680:13:4",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "1664:29:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1664:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1711:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "1695:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1695:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1663:57:4"
									},
									"src": "1637:84:4"
								},
								{
									"body": {
										"id": 216,
										"nodeType": "Block",
										"src": "1919:55:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 213,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 207,
															"src": "1954:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 212,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 244,
														"src": "1929:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1929:38:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 215,
												"nodeType": "ExpressionStatement",
												"src": "1929:38:4"
											}
										]
									},
									"documentation": {
										"id": 205,
										"nodeType": "StructuredDocumentation",
										"src": "1727:115:4",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 217,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 210,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 209,
												"name": "onlyInitializing",
												"nameLocations": [
													"1902:16:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 520,
												"src": "1902:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "1902:16:4"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1856:14:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1879:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1871:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1871:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1870:22:4"
									},
									"returnParameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1919:0:4"
									},
									"scope": 357,
									"src": "1847:127:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 243,
										"nodeType": "Block",
										"src": "2062:153:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 224,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 219,
														"src": "2076:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 227,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2100:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 226,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2092:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 225,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2092:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 228,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2092:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2076:26:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 238,
												"nodeType": "IfStatement",
												"src": "2072:95:4",
												"trueBody": {
													"id": 237,
													"nodeType": "Block",
													"src": "2104:63:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 233,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2153:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 232,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2145:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 231,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2145:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 234,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2145:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 230,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 198,
																	"src": "2125:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 235,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2125:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 236,
															"nodeType": "RevertStatement",
															"src": "2118:38:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 240,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 219,
															"src": "2195:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 239,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "2176:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:32:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 242,
												"nodeType": "ExpressionStatement",
												"src": "2176:32:4"
											}
										]
									},
									"id": 244,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 222,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 221,
												"name": "onlyInitializing",
												"nameLocations": [
													"2045:16:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 520,
												"src": "2045:16:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "2045:16:4"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1989:24:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "2022:12:4",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "2014:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 218,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2014:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2013:22:4"
									},
									"returnParameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2062:0:4"
									},
									"scope": 357,
									"src": "1980:235:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 251,
										"nodeType": "Block",
										"src": "2324:41:4",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 247,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 285,
														"src": "2334:11:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2334:13:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 249,
												"nodeType": "ExpressionStatement",
												"src": "2334:13:4"
											},
											{
												"id": 250,
												"nodeType": "PlaceholderStatement",
												"src": "2357:1:4"
											}
										]
									},
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "2221:77:4",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 252,
									"name": "onlyOwner",
									"nameLocation": "2312:9:4",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2321:2:4"
									},
									"src": "2303:62:4",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 267,
										"nodeType": "Block",
										"src": "2496:89:4",
										"statements": [
											{
												"assignments": [
													260
												],
												"declarations": [
													{
														"constant": false,
														"id": 260,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2529:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 267,
														"src": "2506:24:4",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 259,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 258,
																"name": "OwnableStorage",
																"nameLocations": [
																	"2506:14:4"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 177,
																"src": "2506:14:4"
															},
															"referencedDeclaration": 177,
															"src": "2506:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 263,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 261,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 188,
														"src": "2533:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$177_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2533:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2506:47:4"
											},
											{
												"expression": {
													"expression": {
														"id": 264,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 260,
														"src": "2570:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 265,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2572:6:4",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 176,
													"src": "2570:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 257,
												"id": 266,
												"nodeType": "Return",
												"src": "2563:15:4"
											}
										]
									},
									"documentation": {
										"id": 253,
										"nodeType": "StructuredDocumentation",
										"src": "2371:65:4",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 268,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "2450:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 254,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2455:2:4"
									},
									"returnParameters": {
										"id": 257,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 256,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "2487:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 255,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2487:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2486:9:4"
									},
									"scope": 357,
									"src": "2441:144:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 284,
										"nodeType": "Block",
										"src": "2703:117:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 272,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 268,
															"src": "2717:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 273,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2717:7:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 274,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 653,
															"src": "2728:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 275,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2728:12:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2717:23:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 283,
												"nodeType": "IfStatement",
												"src": "2713:101:4",
												"trueBody": {
													"id": 282,
													"nodeType": "Block",
													"src": "2742:72:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 278,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 653,
																			"src": "2790:10:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 279,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2790:12:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 277,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 193,
																	"src": "2763:26:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 280,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2763:40:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 281,
															"nodeType": "RevertStatement",
															"src": "2756:47:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "2591:62:4",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 285,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "2667:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2678:2:4"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2703:0:4"
									},
									"scope": 357,
									"src": "2658:162:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 298,
										"nodeType": "Block",
										"src": "3209:47:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 294,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3246:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 293,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3238:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 292,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3238:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 295,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3238:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 291,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "3219:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 296,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3219:30:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 297,
												"nodeType": "ExpressionStatement",
												"src": "3219:30:4"
											}
										]
									},
									"documentation": {
										"id": 286,
										"nodeType": "StructuredDocumentation",
										"src": "2826:324:4",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 299,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 289,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 288,
												"name": "onlyOwner",
												"nameLocations": [
													"3199:9:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 252,
												"src": "3199:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "3199:9:4"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "3164:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3181:2:4"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3209:0:4"
									},
									"scope": 357,
									"src": "3155:101:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 326,
										"nodeType": "Block",
										"src": "3475:145:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 312,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 307,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 302,
														"src": "3489:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 310,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3509:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 309,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3501:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 308,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3501:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 311,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3501:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3489:22:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 321,
												"nodeType": "IfStatement",
												"src": "3485:91:4",
												"trueBody": {
													"id": 320,
													"nodeType": "Block",
													"src": "3513:63:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 316,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3562:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 315,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3554:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 314,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3554:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 317,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3554:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 313,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 198,
																	"src": "3534:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 318,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3534:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 319,
															"nodeType": "RevertStatement",
															"src": "3527:38:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 323,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 302,
															"src": "3604:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 322,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "3585:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 324,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3585:28:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 325,
												"nodeType": "ExpressionStatement",
												"src": "3585:28:4"
											}
										]
									},
									"documentation": {
										"id": 300,
										"nodeType": "StructuredDocumentation",
										"src": "3262:138:4",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 327,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 305,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 304,
												"name": "onlyOwner",
												"nameLocations": [
													"3465:9:4"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 252,
												"src": "3465:9:4"
											},
											"nodeType": "ModifierInvocation",
											"src": "3465:9:4"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "3414:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 302,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3440:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "3432:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3432:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3431:18:4"
									},
									"returnParameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3475:0:4"
									},
									"scope": 357,
									"src": "3405:215:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 355,
										"nodeType": "Block",
										"src": "3837:185:4",
										"statements": [
											{
												"assignments": [
													335
												],
												"declarations": [
													{
														"constant": false,
														"id": 335,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3870:1:4",
														"nodeType": "VariableDeclaration",
														"scope": 355,
														"src": "3847:24:4",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 334,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 333,
																"name": "OwnableStorage",
																"nameLocations": [
																	"3847:14:4"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 177,
																"src": "3847:14:4"
															},
															"referencedDeclaration": 177,
															"src": "3847:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 338,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 336,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 188,
														"src": "3874:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$177_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3874:20:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3847:47:4"
											},
											{
												"assignments": [
													340
												],
												"declarations": [
													{
														"constant": false,
														"id": 340,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "3912:8:4",
														"nodeType": "VariableDeclaration",
														"scope": 355,
														"src": "3904:16:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 339,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3904:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 343,
												"initialValue": {
													"expression": {
														"id": 341,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 335,
														"src": "3923:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 342,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3925:6:4",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 176,
													"src": "3923:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3904:27:4"
											},
											{
												"expression": {
													"id": 348,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 344,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 335,
															"src": "3941:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$177_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
															}
														},
														"id": 346,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3943:6:4",
														"memberName": "_owner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 176,
														"src": "3941:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 347,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 330,
														"src": "3952:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3941:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 349,
												"nodeType": "ExpressionStatement",
												"src": "3941:19:4"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 351,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 340,
															"src": "3996:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 352,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 330,
															"src": "4006:8:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 350,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 204,
														"src": "3975:20:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3975:40:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 354,
												"nodeType": "EmitStatement",
												"src": "3970:45:4"
											}
										]
									},
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "3626:143:4",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 356,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "3783:18:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 331,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3810:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "3802:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 329,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3802:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3801:18:4"
									},
									"returnParameters": {
										"id": 332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3837:0:4"
									},
									"scope": 357,
									"src": "3774:248:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 358,
							"src": "749:3275:4",
							"usedErrors": [
								193,
								198,
								374,
								377
							],
							"usedEvents": [
								204,
								382
							]
						}
					],
					"src": "102:3923:4"
				},
				"id": 4
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							625
						]
					},
					"id": 626,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 359,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:5"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 360,
								"nodeType": "StructuredDocumentation",
								"src": "139:2209:5",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 625,
							"linearizedBaseContracts": [
								625
							],
							"name": "Initializable",
							"nameLocation": "2367:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Initializable.InitializableStorage",
									"documentation": {
										"id": 361,
										"nodeType": "StructuredDocumentation",
										"src": "2387:293:5",
										"text": " @dev Storage of the initializable contract.\n It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n when using with upgradeable contracts.\n @custom:storage-location erc7201:openzeppelin.storage.Initializable"
									},
									"id": 368,
									"members": [
										{
											"constant": false,
											"id": 364,
											"mutability": "mutable",
											"name": "_initialized",
											"nameLocation": "2820:12:5",
											"nodeType": "VariableDeclaration",
											"scope": 368,
											"src": "2813:19:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 363,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2813:6:5",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 367,
											"mutability": "mutable",
											"name": "_initializing",
											"nameLocation": "2955:13:5",
											"nodeType": "VariableDeclaration",
											"scope": 368,
											"src": "2950:18:5",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 366,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2950:4:5",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "InitializableStorage",
									"nameLocation": "2692:20:5",
									"nodeType": "StructDefinition",
									"scope": 625,
									"src": "2685:290:5",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 371,
									"mutability": "constant",
									"name": "INITIALIZABLE_STORAGE",
									"nameLocation": "3123:21:5",
									"nodeType": "VariableDeclaration",
									"scope": 625,
									"src": "3098:115:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 369,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3098:7:5",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030",
										"id": 370,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3147:66:5",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1",
											"typeString": "int_const 1089...(70 digits omitted)...9600"
										},
										"value": "0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "3220:60:5",
										"text": " @dev The contract is already initialized."
									},
									"errorSelector": "f92ee8a9",
									"id": 374,
									"name": "InvalidInitialization",
									"nameLocation": "3291:21:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3312:2:5"
									},
									"src": "3285:30:5"
								},
								{
									"documentation": {
										"id": 375,
										"nodeType": "StructuredDocumentation",
										"src": "3321:57:5",
										"text": " @dev The contract is not initializing."
									},
									"errorSelector": "d7e6bcf8",
									"id": 377,
									"name": "NotInitializing",
									"nameLocation": "3389:15:5",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 376,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3404:2:5"
									},
									"src": "3383:24:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 378,
										"nodeType": "StructuredDocumentation",
										"src": "3413:90:5",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2",
									"id": 382,
									"name": "Initialized",
									"nameLocation": "3514:11:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 380,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3533:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 382,
												"src": "3526:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 379,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3526:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:16:5"
									},
									"src": "3508:34:5"
								},
								{
									"body": {
										"id": 464,
										"nodeType": "Block",
										"src": "4092:1079:5",
										"statements": [
											{
												"assignments": [
													387
												],
												"declarations": [
													{
														"constant": false,
														"id": 387,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4187:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 464,
														"src": "4158:30:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 386,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 385,
																"name": "InitializableStorage",
																"nameLocations": [
																	"4158:20:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 368,
																"src": "4158:20:5"
															},
															"referencedDeclaration": 368,
															"src": "4158:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 390,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 388,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 624,
														"src": "4191:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$368_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 389,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4191:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4158:59:5"
											},
											{
												"assignments": [
													392
												],
												"declarations": [
													{
														"constant": false,
														"id": 392,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4284:14:5",
														"nodeType": "VariableDeclaration",
														"scope": 464,
														"src": "4279:19:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 391,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4279:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 396,
												"initialValue": {
													"id": 395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4301:16:5",
													"subExpression": {
														"expression": {
															"id": 393,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "4302:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 394,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4304:13:5",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 367,
														"src": "4302:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4279:38:5"
											},
											{
												"assignments": [
													398
												],
												"declarations": [
													{
														"constant": false,
														"id": 398,
														"mutability": "mutable",
														"name": "initialized",
														"nameLocation": "4334:11:5",
														"nodeType": "VariableDeclaration",
														"scope": 464,
														"src": "4327:18:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 397,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "4327:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 401,
												"initialValue": {
													"expression": {
														"id": 399,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 387,
														"src": "4348:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 400,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4350:12:5",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 364,
													"src": "4348:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4327:35:5"
											},
											{
												"assignments": [
													403
												],
												"declarations": [
													{
														"constant": false,
														"id": 403,
														"mutability": "mutable",
														"name": "initialSetup",
														"nameLocation": "4709:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 464,
														"src": "4704:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 402,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4704:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 409,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 406,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 404,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 398,
															"src": "4724:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 405,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4739:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4724:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 407,
														"name": "isTopLevelCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 392,
														"src": "4744:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4724:34:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4704:54:5"
											},
											{
												"assignments": [
													411
												],
												"declarations": [
													{
														"constant": false,
														"id": 411,
														"mutability": "mutable",
														"name": "construction",
														"nameLocation": "4773:12:5",
														"nodeType": "VariableDeclaration",
														"scope": 464,
														"src": "4768:17:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 410,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4768:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 424,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 414,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 412,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 398,
															"src": "4788:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "31",
															"id": 413,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4803:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "4788:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 422,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 417,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4816:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Initializable_$625",
																				"typeString": "contract Initializable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Initializable_$625",
																				"typeString": "contract Initializable"
																			}
																		],
																		"id": 416,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4808:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 415,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4808:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 418,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4808:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 419,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4822:4:5",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "4808:18:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 420,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4827:6:5",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4808:25:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4837:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4808:30:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4788:50:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4768:70:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 426,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4853:13:5",
														"subExpression": {
															"id": 425,
															"name": "initialSetup",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 403,
															"src": "4854:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 428,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4870:13:5",
														"subExpression": {
															"id": 427,
															"name": "construction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 411,
															"src": "4871:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4853:30:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 434,
												"nodeType": "IfStatement",
												"src": "4849:91:5",
												"trueBody": {
													"id": 433,
													"nodeType": "Block",
													"src": "4885:55:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 430,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 374,
																	"src": "4906:21:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4906:23:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 432,
															"nodeType": "RevertStatement",
															"src": "4899:30:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 435,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "4949:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 437,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4951:12:5",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 364,
														"src": "4949:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 438,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4966:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4949:18:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 440,
												"nodeType": "ExpressionStatement",
												"src": "4949:18:5"
											},
											{
												"condition": {
													"id": 441,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 392,
													"src": "4981:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 449,
												"nodeType": "IfStatement",
												"src": "4977:67:5",
												"trueBody": {
													"id": 448,
													"nodeType": "Block",
													"src": "4997:47:5",
													"statements": [
														{
															"expression": {
																"id": 446,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 442,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 387,
																		"src": "5011:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 444,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5013:13:5",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 367,
																	"src": "5011:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 445,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5029:4:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5011:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 447,
															"nodeType": "ExpressionStatement",
															"src": "5011:22:5"
														}
													]
												}
											},
											{
												"id": 450,
												"nodeType": "PlaceholderStatement",
												"src": "5053:1:5"
											},
											{
												"condition": {
													"id": 451,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 392,
													"src": "5068:14:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 463,
												"nodeType": "IfStatement",
												"src": "5064:101:5",
												"trueBody": {
													"id": 462,
													"nodeType": "Block",
													"src": "5084:81:5",
													"statements": [
														{
															"expression": {
																"id": 456,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 452,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 387,
																		"src": "5098:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 454,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5100:13:5",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 367,
																	"src": "5098:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 455,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5116:5:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "5098:23:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 457,
															"nodeType": "ExpressionStatement",
															"src": "5098:23:5"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 459,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5152:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 458,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 382,
																	"src": "5140:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 460,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5140:14:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 461,
															"nodeType": "EmitStatement",
															"src": "5135:19:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 383,
										"nodeType": "StructuredDocumentation",
										"src": "3548:516:5",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."
									},
									"id": 465,
									"name": "initializer",
									"nameLocation": "4078:11:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4089:2:5"
									},
									"src": "4069:1102:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 511,
										"nodeType": "Block",
										"src": "6289:392:5",
										"statements": [
											{
												"assignments": [
													472
												],
												"declarations": [
													{
														"constant": false,
														"id": 472,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6384:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 511,
														"src": "6355:30:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 471,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 470,
																"name": "InitializableStorage",
																"nameLocations": [
																	"6355:20:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 368,
																"src": "6355:20:5"
															},
															"referencedDeclaration": 368,
															"src": "6355:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 475,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 473,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 624,
														"src": "6388:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$368_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 474,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6388:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6355:59:5"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 482,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 476,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "6429:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 477,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6431:13:5",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 367,
														"src": "6429:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 481,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 478,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 472,
																"src": "6448:1:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																	"typeString": "struct Initializable.InitializableStorage storage pointer"
																}
															},
															"id": 479,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6450:12:5",
															"memberName": "_initialized",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 364,
															"src": "6448:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 480,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 468,
															"src": "6466:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "6448:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6429:44:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 487,
												"nodeType": "IfStatement",
												"src": "6425:105:5",
												"trueBody": {
													"id": 486,
													"nodeType": "Block",
													"src": "6475:55:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 483,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 374,
																	"src": "6496:21:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 484,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6496:23:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 485,
															"nodeType": "RevertStatement",
															"src": "6489:30:5"
														}
													]
												}
											},
											{
												"expression": {
													"id": 492,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 488,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "6539:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 490,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6541:12:5",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 364,
														"src": "6539:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 491,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 468,
														"src": "6556:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6539:24:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 493,
												"nodeType": "ExpressionStatement",
												"src": "6539:24:5"
											},
											{
												"expression": {
													"id": 498,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 494,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "6573:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 496,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6575:13:5",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 367,
														"src": "6573:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 497,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6591:4:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6573:22:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 499,
												"nodeType": "ExpressionStatement",
												"src": "6573:22:5"
											},
											{
												"id": 500,
												"nodeType": "PlaceholderStatement",
												"src": "6605:1:5"
											},
											{
												"expression": {
													"id": 505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 501,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "6616:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 503,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6618:13:5",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 367,
														"src": "6616:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 504,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6634:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6616:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 506,
												"nodeType": "ExpressionStatement",
												"src": "6616:23:5"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 508,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 468,
															"src": "6666:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 507,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 382,
														"src": "6654:11:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
															"typeString": "function (uint64)"
														}
													},
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6654:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 510,
												"nodeType": "EmitStatement",
												"src": "6649:25:5"
											}
										]
									},
									"documentation": {
										"id": 466,
										"nodeType": "StructuredDocumentation",
										"src": "5177:1068:5",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 512,
									"name": "reinitializer",
									"nameLocation": "6259:13:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 468,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "6280:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 512,
												"src": "6273:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 467,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6273:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6272:16:5"
									},
									"src": "6250:431:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 519,
										"nodeType": "Block",
										"src": "6919:48:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 515,
														"name": "_checkInitializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 533,
														"src": "6929:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6929:20:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 517,
												"nodeType": "ExpressionStatement",
												"src": "6929:20:5"
											},
											{
												"id": 518,
												"nodeType": "PlaceholderStatement",
												"src": "6959:1:5"
											}
										]
									},
									"documentation": {
										"id": 513,
										"nodeType": "StructuredDocumentation",
										"src": "6687:199:5",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 520,
									"name": "onlyInitializing",
									"nameLocation": "6900:16:5",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6916:2:5"
									},
									"src": "6891:76:5",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 532,
										"nodeType": "Block",
										"src": "7134:89:5",
										"statements": [
											{
												"condition": {
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7148:18:5",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 524,
															"name": "_isInitializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 601,
															"src": "7149:15:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 525,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7149:17:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 531,
												"nodeType": "IfStatement",
												"src": "7144:73:5",
												"trueBody": {
													"id": 530,
													"nodeType": "Block",
													"src": "7168:49:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 527,
																	"name": "NotInitializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 377,
																	"src": "7189:15:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 528,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7189:17:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 529,
															"nodeType": "RevertStatement",
															"src": "7182:24:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 521,
										"nodeType": "StructuredDocumentation",
										"src": "6973:104:5",
										"text": " @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."
									},
									"id": 533,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInitializing",
									"nameLocation": "7091:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7109:2:5"
									},
									"returnParameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7134:0:5"
									},
									"scope": 625,
									"src": "7082:141:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 578,
										"nodeType": "Block",
										"src": "7758:373:5",
										"statements": [
											{
												"assignments": [
													539
												],
												"declarations": [
													{
														"constant": false,
														"id": 539,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7853:1:5",
														"nodeType": "VariableDeclaration",
														"scope": 578,
														"src": "7824:30:5",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 538,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 537,
																"name": "InitializableStorage",
																"nameLocations": [
																	"7824:20:5"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 368,
																"src": "7824:20:5"
															},
															"referencedDeclaration": 368,
															"src": "7824:20:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 542,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 540,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 624,
														"src": "7857:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$368_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 541,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7857:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7824:59:5"
											},
											{
												"condition": {
													"expression": {
														"id": 543,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 539,
														"src": "7898:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 544,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7900:13:5",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 367,
													"src": "7898:15:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 549,
												"nodeType": "IfStatement",
												"src": "7894:76:5",
												"trueBody": {
													"id": 548,
													"nodeType": "Block",
													"src": "7915:55:5",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 545,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 374,
																	"src": "7936:21:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 546,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7936:23:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 547,
															"nodeType": "RevertStatement",
															"src": "7929:30:5"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													},
													"id": 557,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 550,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 539,
															"src": "7983:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 551,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7985:12:5",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 364,
														"src": "7983:14:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 554,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8006:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 553,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "8006:6:5",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	}
																],
																"id": 552,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "8001:4:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 555,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8001:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint64",
																"typeString": "type(uint64)"
															}
														},
														"id": 556,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8014:3:5",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "8001:16:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "7983:34:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 577,
												"nodeType": "IfStatement",
												"src": "7979:146:5",
												"trueBody": {
													"id": 576,
													"nodeType": "Block",
													"src": "8019:106:5",
													"statements": [
														{
															"expression": {
																"id": 566,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 558,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 539,
																		"src": "8033:1:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 560,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8035:12:5",
																	"memberName": "_initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 364,
																	"src": "8033:14:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 563,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8055:6:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 562,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "8055:6:5",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				}
																			],
																			"id": 561,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "8050:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 564,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8050:12:5",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint64",
																			"typeString": "type(uint64)"
																		}
																	},
																	"id": 565,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8063:3:5",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "8050:16:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "8033:33:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 567,
															"nodeType": "ExpressionStatement",
															"src": "8033:33:5"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 571,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "8102:6:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					},
																					"typeName": {
																						"id": 570,
																						"name": "uint64",
																						"nodeType": "ElementaryTypeName",
																						"src": "8102:6:5",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					}
																				],
																				"id": 569,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "8097:4:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 572,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8097:12:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint64",
																				"typeString": "type(uint64)"
																			}
																		},
																		"id": 573,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "8110:3:5",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "8097:16:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 568,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 382,
																	"src": "8085:11:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 574,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8085:29:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 575,
															"nodeType": "EmitStatement",
															"src": "8080:34:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 534,
										"nodeType": "StructuredDocumentation",
										"src": "7229:475:5",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "7718:20:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7738:2:5"
									},
									"returnParameters": {
										"id": 536,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7758:0:5"
									},
									"scope": 625,
									"src": "7709:422:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 589,
										"nodeType": "Block",
										"src": "8306:63:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 585,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 624,
															"src": "8323:24:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$368_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 586,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8323:26:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 587,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8350:12:5",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 364,
													"src": "8323:39:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 584,
												"id": 588,
												"nodeType": "Return",
												"src": "8316:46:5"
											}
										]
									},
									"documentation": {
										"id": 580,
										"nodeType": "StructuredDocumentation",
										"src": "8137:99:5",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 590,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "8250:22:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8272:2:5"
									},
									"returnParameters": {
										"id": 584,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 583,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 590,
												"src": "8298:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 582,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8298:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8297:8:5"
									},
									"scope": 625,
									"src": "8241:128:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 600,
										"nodeType": "Block",
										"src": "8541:64:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 596,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 624,
															"src": "8558:24:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$368_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 597,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8558:26:5",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 598,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8585:13:5",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 367,
													"src": "8558:40:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 595,
												"id": 599,
												"nodeType": "Return",
												"src": "8551:47:5"
											}
										]
									},
									"documentation": {
										"id": 591,
										"nodeType": "StructuredDocumentation",
										"src": "8375:105:5",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 601,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "8494:15:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 592,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8509:2:5"
									},
									"returnParameters": {
										"id": 595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 594,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 601,
												"src": "8535:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 593,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8535:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8534:6:5"
									},
									"scope": 625,
									"src": "8485:120:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 609,
										"nodeType": "Block",
										"src": "8896:45:5",
										"statements": [
											{
												"expression": {
													"id": 607,
													"name": "INITIALIZABLE_STORAGE",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 371,
													"src": "8913:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 606,
												"id": 608,
												"nodeType": "Return",
												"src": "8906:28:5"
											}
										]
									},
									"documentation": {
										"id": 602,
										"nodeType": "StructuredDocumentation",
										"src": "8611:203:5",
										"text": " @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n NOTE: Consider following the ERC-7201 formula to derive storage locations."
									},
									"id": 610,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_initializableStorageSlot",
									"nameLocation": "8828:25:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 603,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8853:2:5"
									},
									"returnParameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "8887:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 604,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "8887:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8886:9:5"
									},
									"scope": 625,
									"src": "8819:122:5",
									"stateMutability": "pure",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 623,
										"nodeType": "Block",
										"src": "9161:115:5",
										"statements": [
											{
												"assignments": [
													618
												],
												"declarations": [
													{
														"constant": false,
														"id": 618,
														"mutability": "mutable",
														"name": "slot",
														"nameLocation": "9179:4:5",
														"nodeType": "VariableDeclaration",
														"scope": 623,
														"src": "9171:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 617,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "9171:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 621,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 619,
														"name": "_initializableStorageSlot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 610,
														"src": "9186:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_bytes32_$",
															"typeString": "function () pure returns (bytes32)"
														}
													},
													"id": 620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9186:27:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9171:42:5"
											},
											{
												"AST": {
													"nativeSrc": "9232:38:5",
													"nodeType": "YulBlock",
													"src": "9232:38:5",
													"statements": [
														{
															"nativeSrc": "9246:14:5",
															"nodeType": "YulAssignment",
															"src": "9246:14:5",
															"value": {
																"name": "slot",
																"nativeSrc": "9256:4:5",
																"nodeType": "YulIdentifier",
																"src": "9256:4:5"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nativeSrc": "9246:6:5",
																	"nodeType": "YulIdentifier",
																	"src": "9246:6:5"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 615,
														"isOffset": false,
														"isSlot": true,
														"src": "9246:6:5",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 618,
														"isOffset": false,
														"isSlot": false,
														"src": "9256:4:5",
														"valueSize": 1
													}
												],
												"id": 622,
												"nodeType": "InlineAssembly",
												"src": "9223:47:5"
											}
										]
									},
									"documentation": {
										"id": 611,
										"nodeType": "StructuredDocumentation",
										"src": "8947:67:5",
										"text": " @dev Returns a pointer to the storage namespace."
									},
									"id": 624,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializableStorage",
									"nameLocation": "9080:24:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 612,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9104:2:5"
									},
									"returnParameters": {
										"id": 616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 615,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "9158:1:5",
												"nodeType": "VariableDeclaration",
												"scope": 624,
												"src": "9129:30:5",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
													"typeString": "struct Initializable.InitializableStorage"
												},
												"typeName": {
													"id": 614,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 613,
														"name": "InitializableStorage",
														"nameLocations": [
															"9129:20:5"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 368,
														"src": "9129:20:5"
													},
													"referencedDeclaration": 368,
													"src": "9129:20:5",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$368_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9128:32:5"
									},
									"scope": 625,
									"src": "9071:205:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 626,
							"src": "2349:6929:5",
							"usedErrors": [
								374,
								377
							],
							"usedEvents": [
								382
							]
						}
					],
					"src": "113:9166:5"
				},
				"id": 5
			},
			"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							671
						],
						"Initializable": [
							625
						]
					},
					"id": 672,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 627,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:6"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 629,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 672,
							"sourceUnit": 626,
							"src": "126:63:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 628,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 625,
										"src": "134:13:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 631,
										"name": "Initializable",
										"nameLocations": [
											"728:13:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 625,
										"src": "728:13:6"
									},
									"id": 632,
									"nodeType": "InheritanceSpecifier",
									"src": "728:13:6"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 630,
								"nodeType": "StructuredDocumentation",
								"src": "191:496:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 671,
							"linearizedBaseContracts": [
								671,
								625
							],
							"name": "ContextUpgradeable",
							"nameLocation": "706:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 637,
										"nodeType": "Block",
										"src": "800:7:6",
										"statements": []
									},
									"id": 638,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 635,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 634,
												"name": "onlyInitializing",
												"nameLocations": [
													"783:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 520,
												"src": "783:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "783:16:6"
										}
									],
									"name": "__Context_init",
									"nameLocation": "757:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 633,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "771:2:6"
									},
									"returnParameters": {
										"id": 636,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:0:6"
									},
									"scope": 671,
									"src": "748:59:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 643,
										"nodeType": "Block",
										"src": "875:7:6",
										"statements": []
									},
									"id": 644,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 641,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 640,
												"name": "onlyInitializing",
												"nameLocations": [
													"858:16:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 520,
												"src": "858:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "858:16:6"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "822:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "846:2:6"
									},
									"returnParameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "875:0:6"
									},
									"scope": 671,
									"src": "813:69:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 652,
										"nodeType": "Block",
										"src": "949:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 649,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "966:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 650,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "970:6:6",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "966:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 648,
												"id": 651,
												"nodeType": "Return",
												"src": "959:17:6"
											}
										]
									},
									"id": 653,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "896:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "906:2:6"
									},
									"returnParameters": {
										"id": 648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "940:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 646,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "940:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "939:9:6"
									},
									"scope": 671,
									"src": "887:96:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 661,
										"nodeType": "Block",
										"src": "1056:32:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 658,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1073:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 659,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1077:4:6",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1073:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 657,
												"id": 660,
												"nodeType": "Return",
												"src": "1066:15:6"
											}
										]
									},
									"id": 662,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "998:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:6"
									},
									"returnParameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 656,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 662,
												"src": "1040:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 655,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1040:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1039:16:6"
									},
									"scope": 671,
									"src": "989:99:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 669,
										"nodeType": "Block",
										"src": "1166:25:6",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 667,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1183:1:6",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 666,
												"id": 668,
												"nodeType": "Return",
												"src": "1176:8:6"
											}
										]
									},
									"id": 670,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "1103:20:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 663,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:6"
									},
									"returnParameters": {
										"id": 666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 670,
												"src": "1157:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:9:6"
									},
									"scope": 671,
									"src": "1094:97:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 672,
							"src": "688:505:6",
							"usedErrors": [
								374,
								377
							],
							"usedEvents": [
								382
							]
						}
					],
					"src": "101:1093:6"
				},
				"id": 6
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
					"exportedSymbols": {
						"Hashes": [
							711
						]
					},
					"id": 712,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 673,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:7"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Hashes",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 674,
								"nodeType": "StructuredDocumentation",
								"src": "139:81:7",
								"text": " @dev Library of standard hash functions.\n _Available since v5.1._"
							},
							"fullyImplemented": true,
							"id": 711,
							"linearizedBaseContracts": [
								711
							],
							"name": "Hashes",
							"nameLocation": "229:6:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 697,
										"nodeType": "Block",
										"src": "588:83:7",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 686,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 684,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 677,
															"src": "605:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 685,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 679,
															"src": "609:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "605:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"arguments": [
															{
																"id": 692,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 679,
																"src": "659:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 693,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 677,
																"src": "662:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 691,
															"name": "efficientKeccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "640:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 694,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "640:24:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "605:59:7",
													"trueExpression": {
														"arguments": [
															{
																"id": 688,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 677,
																"src": "632:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 689,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 679,
																"src": "635:1:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 687,
															"name": "efficientKeccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 710,
															"src": "613:18:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
															}
														},
														"id": 690,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "613:24:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 683,
												"id": 696,
												"nodeType": "Return",
												"src": "598:66:7"
											}
										]
									},
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "242:257:7",
										"text": " @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."
									},
									"id": 698,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "commutativeKeccak256",
									"nameLocation": "513:20:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "542:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "534:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 676,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "534:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "553:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "545:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 678,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "545:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "533:22:7"
									},
									"returnParameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 698,
												"src": "579:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 681,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "579:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "578:9:7"
									},
									"scope": 711,
									"src": "504:167:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 709,
										"nodeType": "Block",
										"src": "879:151:7",
										"statements": [
											{
												"AST": {
													"nativeSrc": "914:110:7",
													"nodeType": "YulBlock",
													"src": "914:110:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "935:4:7",
																		"nodeType": "YulLiteral",
																		"src": "935:4:7",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"name": "a",
																		"nativeSrc": "941:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "941:1:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "928:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "928:6:7"
																},
																"nativeSrc": "928:15:7",
																"nodeType": "YulFunctionCall",
																"src": "928:15:7"
															},
															"nativeSrc": "928:15:7",
															"nodeType": "YulExpressionStatement",
															"src": "928:15:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "963:4:7",
																		"nodeType": "YulLiteral",
																		"src": "963:4:7",
																		"type": "",
																		"value": "0x20"
																	},
																	{
																		"name": "b",
																		"nativeSrc": "969:1:7",
																		"nodeType": "YulIdentifier",
																		"src": "969:1:7"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "956:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "956:6:7"
																},
																"nativeSrc": "956:15:7",
																"nodeType": "YulFunctionCall",
																"src": "956:15:7"
															},
															"nativeSrc": "956:15:7",
															"nodeType": "YulExpressionStatement",
															"src": "956:15:7"
														},
														{
															"nativeSrc": "984:30:7",
															"nodeType": "YulAssignment",
															"src": "984:30:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1003:4:7",
																		"nodeType": "YulLiteral",
																		"src": "1003:4:7",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1009:4:7",
																		"nodeType": "YulLiteral",
																		"src": "1009:4:7",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "993:9:7",
																	"nodeType": "YulIdentifier",
																	"src": "993:9:7"
																},
																"nativeSrc": "993:21:7",
																"nodeType": "YulFunctionCall",
																"src": "993:21:7"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "984:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "984:5:7"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 701,
														"isOffset": false,
														"isSlot": false,
														"src": "941:1:7",
														"valueSize": 1
													},
													{
														"declaration": 703,
														"isOffset": false,
														"isSlot": false,
														"src": "969:1:7",
														"valueSize": 1
													},
													{
														"declaration": 706,
														"isOffset": false,
														"isSlot": false,
														"src": "984:5:7",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 708,
												"nodeType": "InlineAssembly",
												"src": "889:135:7"
											}
										]
									},
									"documentation": {
										"id": 699,
										"nodeType": "StructuredDocumentation",
										"src": "677:109:7",
										"text": " @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."
									},
									"id": 710,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "efficientKeccak256",
									"nameLocation": "800:18:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 701,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "827:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "819:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 700,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 703,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "838:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "830:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 702,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "830:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:22:7"
									},
									"returnParameters": {
										"id": 707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 706,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "872:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 710,
												"src": "864:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 705,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "864:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "863:15:7"
									},
									"scope": 711,
									"src": "791:239:7",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 712,
							"src": "221:811:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "113:920:7"
				},
				"id": 7
			},
			"lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol": {
				"ast": {
					"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
					"exportedSymbols": {
						"Hashes": [
							711
						],
						"MerkleProof": [
							1784
						]
					},
					"id": 1785,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 713,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "206:24:8"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/Hashes.sol",
							"file": "./Hashes.sol",
							"id": 715,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1785,
							"sourceUnit": 712,
							"src": "232:36:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 714,
										"name": "Hashes",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 711,
										"src": "240:6:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MerkleProof",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 716,
								"nodeType": "StructuredDocumentation",
								"src": "270:1082:8",
								"text": " @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."
							},
							"fullyImplemented": true,
							"id": 1784,
							"linearizedBaseContracts": [
								1784
							],
							"name": "MerkleProof",
							"nameLocation": "1361:11:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 717,
										"nodeType": "StructuredDocumentation",
										"src": "1379:60:8",
										"text": "@dev The multiproof provided is not valid."
									},
									"errorSelector": "35140492",
									"id": 719,
									"name": "MerkleProofInvalidMultiproof",
									"nameLocation": "1450:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 718,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1478:2:8"
									},
									"src": "1444:37:8"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "1999:57:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 737,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 733,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 723,
																"src": "2029:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 734,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 727,
																"src": "2036:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 732,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																781,
																863
															],
															"referencedDeclaration": 781,
															"src": "2016:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32) pure returns (bytes32)"
															}
														},
														"id": 735,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2016:25:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 736,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 725,
														"src": "2045:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2016:33:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 731,
												"id": 738,
												"nodeType": "Return",
												"src": "2009:40:8"
											}
										]
									},
									"documentation": {
										"id": 720,
										"nodeType": "StructuredDocumentation",
										"src": "1487:410:8",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."
									},
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "1911:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 728,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 723,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "1935:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "1918:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 721,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "1918:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 722,
													"nodeType": "ArrayTypeName",
													"src": "1918:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 725,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "1950:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "1942:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 724,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1942:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 727,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "1964:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "1956:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 726,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1956:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1917:52:8"
									},
									"returnParameters": {
										"id": 731,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 730,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "1993:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 729,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1993:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1992:6:8"
									},
									"scope": 1784,
									"src": "1902:154:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 780,
										"nodeType": "Block",
										"src": "2549:216:8",
										"statements": [
											{
												"assignments": [
													752
												],
												"declarations": [
													{
														"constant": false,
														"id": 752,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "2567:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 780,
														"src": "2559:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 751,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2559:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 754,
												"initialValue": {
													"id": 753,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 746,
													"src": "2582:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2559:27:8"
											},
											{
												"body": {
													"id": 776,
													"nodeType": "Block",
													"src": "2639:91:8",
													"statements": [
														{
															"expression": {
																"id": 774,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 766,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 752,
																	"src": "2653:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 769,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 752,
																			"src": "2696:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 770,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 744,
																				"src": "2710:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																					"typeString": "bytes32[] memory"
																				}
																			},
																			"id": 772,
																			"indexExpression": {
																				"id": 771,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 756,
																				"src": "2716:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "2710:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 767,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 711,
																			"src": "2668:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$711_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 768,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2675:20:8",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 698,
																		"src": "2668:27:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 773,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2668:51:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "2653:66:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 775,
															"nodeType": "ExpressionStatement",
															"src": "2653:66:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 762,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 759,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 756,
														"src": "2616:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 760,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 744,
															"src": "2620:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 761,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2626:6:8",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2620:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2616:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 777,
												"initializationExpression": {
													"assignments": [
														756
													],
													"declarations": [
														{
															"constant": false,
															"id": 756,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2609:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 777,
															"src": "2601:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 755,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2601:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 758,
													"initialValue": {
														"hexValue": "30",
														"id": 757,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2613:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2601:13:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 764,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2634:3:8",
														"subExpression": {
															"id": 763,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 756,
															"src": "2634:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 765,
													"nodeType": "ExpressionStatement",
													"src": "2634:3:8"
												},
												"nodeType": "ForStatement",
												"src": "2596:134:8"
											},
											{
												"expression": {
													"id": 778,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 752,
													"src": "2746:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 750,
												"id": 779,
												"nodeType": "Return",
												"src": "2739:19:8"
											}
										]
									},
									"documentation": {
										"id": 741,
										"nodeType": "StructuredDocumentation",
										"src": "2062:390:8",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."
									},
									"id": 781,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "2466:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 747,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 744,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "2496:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 781,
												"src": "2479:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 742,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2479:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 743,
													"nodeType": "ArrayTypeName",
													"src": "2479:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "2511:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 781,
												"src": "2503:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 745,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2503:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2478:38:8"
									},
									"returnParameters": {
										"id": 750,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 749,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 781,
												"src": "2540:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 748,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2540:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2539:9:8"
									},
									"scope": 1784,
									"src": "2457:308:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 812,
										"nodeType": "Block",
										"src": "3376:65:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 810,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 805,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 785,
																"src": "3406:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 806,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 789,
																"src": "3413:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 807,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 799,
																"src": "3419:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 804,
															"name": "processProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																781,
																863
															],
															"referencedDeclaration": 863,
															"src": "3393:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 808,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3393:33:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 809,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 787,
														"src": "3430:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3393:41:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 803,
												"id": 811,
												"nodeType": "Return",
												"src": "3386:48:8"
											}
										]
									},
									"documentation": {
										"id": 782,
										"nodeType": "StructuredDocumentation",
										"src": "2771:407:8",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."
									},
									"id": 813,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "3192:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 800,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "3225:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3208:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 783,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3208:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 784,
													"nodeType": "ArrayTypeName",
													"src": "3208:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 787,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "3248:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3240:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 786,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3240:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "3270:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3262:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 788,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3262:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "3334:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3284:56:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 798,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 794,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 791,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 798,
																"src": "3293:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 790,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3293:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 793,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 798,
																"src": "3302:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 792,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3302:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3292:18:8"
													},
													"returnParameterTypes": {
														"id": 797,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 796,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 798,
																"src": "3325:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 795,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3325:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3324:9:8"
													},
													"src": "3284:56:8",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "3198:148:8"
									},
									"returnParameters": {
										"id": 803,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 802,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "3370:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 801,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3370:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3369:6:8"
									},
									"scope": 1784,
									"src": "3183:258:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 862,
										"nodeType": "Block",
										"src": "4019:195:8",
										"statements": [
											{
												"assignments": [
													835
												],
												"declarations": [
													{
														"constant": false,
														"id": 835,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "4037:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 862,
														"src": "4029:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 834,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4029:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 837,
												"initialValue": {
													"id": 836,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 819,
													"src": "4052:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4029:27:8"
											},
											{
												"body": {
													"id": 858,
													"nodeType": "Block",
													"src": "4109:70:8",
													"statements": [
														{
															"expression": {
																"id": 856,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 849,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 835,
																	"src": "4123:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 851,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 835,
																			"src": "4145:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 852,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 817,
																				"src": "4159:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																					"typeString": "bytes32[] memory"
																				}
																			},
																			"id": 854,
																			"indexExpression": {
																				"id": 853,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 839,
																				"src": "4165:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4159:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 850,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 829,
																		"src": "4138:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 855,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4138:30:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "4123:45:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 857,
															"nodeType": "ExpressionStatement",
															"src": "4123:45:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 842,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 839,
														"src": "4086:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 843,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 817,
															"src": "4090:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 844,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4096:6:8",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "4090:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4086:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 859,
												"initializationExpression": {
													"assignments": [
														839
													],
													"declarations": [
														{
															"constant": false,
															"id": 839,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4079:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 859,
															"src": "4071:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 838,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4071:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 841,
													"initialValue": {
														"hexValue": "30",
														"id": 840,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4083:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4071:13:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 847,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4104:3:8",
														"subExpression": {
															"id": 846,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 839,
															"src": "4104:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 848,
													"nodeType": "ExpressionStatement",
													"src": "4104:3:8"
												},
												"nodeType": "ForStatement",
												"src": "4066:113:8"
											},
											{
												"expression": {
													"id": 860,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 835,
													"src": "4195:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 833,
												"id": 861,
												"nodeType": "Return",
												"src": "4188:19:8"
											}
										]
									},
									"documentation": {
										"id": 814,
										"nodeType": "StructuredDocumentation",
										"src": "3447:387:8",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."
									},
									"id": 863,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProof",
									"nameLocation": "3848:12:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 817,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "3887:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 863,
												"src": "3870:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 815,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "3870:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 816,
													"nodeType": "ArrayTypeName",
													"src": "3870:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 819,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "3910:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 863,
												"src": "3902:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 818,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3902:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "3974:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 863,
												"src": "3924:56:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 828,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 824,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 821,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 828,
																"src": "3933:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 820,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3933:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 823,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 828,
																"src": "3942:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 822,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3942:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3932:18:8"
													},
													"returnParameterTypes": {
														"id": 827,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 826,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 828,
																"src": "3965:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 825,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "3965:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "3964:9:8"
													},
													"src": "3924:56:8",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "3860:126:8"
									},
									"returnParameters": {
										"id": 833,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 863,
												"src": "4010:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 831,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4010:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4009:9:8"
									},
									"scope": 1784,
									"src": "3839:375:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 883,
										"nodeType": "Block",
										"src": "4744:65:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 881,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 877,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 867,
																"src": "4782:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 878,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 871,
																"src": "4789:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 876,
															"name": "processProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																925,
																1007
															],
															"referencedDeclaration": 925,
															"src": "4761:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bytes32) pure returns (bytes32)"
															}
														},
														"id": 879,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4761:33:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 880,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 869,
														"src": "4798:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4761:41:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 875,
												"id": 882,
												"nodeType": "Return",
												"src": "4754:48:8"
											}
										]
									},
									"documentation": {
										"id": 864,
										"nodeType": "StructuredDocumentation",
										"src": "4220:412:8",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."
									},
									"id": 884,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCalldata",
									"nameLocation": "4646:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "4680:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "4661:24:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 865,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "4661:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 866,
													"nodeType": "ArrayTypeName",
													"src": "4661:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "4695:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "4687:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 868,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4687:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "4709:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "4701:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 870,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4701:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4660:54:8"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 884,
												"src": "4738:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 873,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4738:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4737:6:8"
									},
									"scope": 1784,
									"src": "4637:172:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 924,
										"nodeType": "Block",
										"src": "5314:216:8",
										"statements": [
											{
												"assignments": [
													896
												],
												"declarations": [
													{
														"constant": false,
														"id": 896,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "5332:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 924,
														"src": "5324:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 895,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "5324:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 898,
												"initialValue": {
													"id": 897,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 890,
													"src": "5347:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5324:27:8"
											},
											{
												"body": {
													"id": 920,
													"nodeType": "Block",
													"src": "5404:91:8",
													"statements": [
														{
															"expression": {
																"id": 918,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 910,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 896,
																	"src": "5418:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 913,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 896,
																			"src": "5461:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 914,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 888,
																				"src": "5475:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																					"typeString": "bytes32[] calldata"
																				}
																			},
																			"id": 916,
																			"indexExpression": {
																				"id": 915,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 900,
																				"src": "5481:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "5475:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 911,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 711,
																			"src": "5433:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$711_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 912,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5440:20:8",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 698,
																		"src": "5433:27:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5433:51:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "5418:66:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 919,
															"nodeType": "ExpressionStatement",
															"src": "5418:66:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 903,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 900,
														"src": "5381:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 904,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 888,
															"src": "5385:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														"id": 905,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5391:6:8",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5385:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5381:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 921,
												"initializationExpression": {
													"assignments": [
														900
													],
													"declarations": [
														{
															"constant": false,
															"id": 900,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "5374:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 921,
															"src": "5366:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 899,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "5366:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 902,
													"initialValue": {
														"hexValue": "30",
														"id": 901,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5378:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "5366:13:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 908,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "5399:3:8",
														"subExpression": {
															"id": 907,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 900,
															"src": "5399:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 909,
													"nodeType": "ExpressionStatement",
													"src": "5399:3:8"
												},
												"nodeType": "ForStatement",
												"src": "5361:134:8"
											},
											{
												"expression": {
													"id": 922,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 896,
													"src": "5511:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 894,
												"id": 923,
												"nodeType": "Return",
												"src": "5504:19:8"
											}
										]
									},
									"documentation": {
										"id": 885,
										"nodeType": "StructuredDocumentation",
										"src": "4815:392:8",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."
									},
									"id": 925,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProofCalldata",
									"nameLocation": "5221:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 891,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 888,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "5261:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 925,
												"src": "5242:24:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 886,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5242:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 887,
													"nodeType": "ArrayTypeName",
													"src": "5242:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 890,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "5276:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 925,
												"src": "5268:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 889,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5268:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5241:40:8"
									},
									"returnParameters": {
										"id": 894,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 893,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 925,
												"src": "5305:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 892,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5305:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5304:9:8"
									},
									"scope": 1784,
									"src": "5212:318:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 956,
										"nodeType": "Block",
										"src": "6153:73:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 954,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 949,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 929,
																"src": "6191:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 950,
																"name": "leaf",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 933,
																"src": "6198:4:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															{
																"id": 951,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 943,
																"src": "6204:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 948,
															"name": "processProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																925,
																1007
															],
															"referencedDeclaration": 1007,
															"src": "6170:20:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 952,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6170:41:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 953,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 931,
														"src": "6215:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "6170:49:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 947,
												"id": 955,
												"nodeType": "Return",
												"src": "6163:56:8"
											}
										]
									},
									"documentation": {
										"id": 926,
										"nodeType": "StructuredDocumentation",
										"src": "5536:409:8",
										"text": " @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."
									},
									"id": 957,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCalldata",
									"nameLocation": "5959:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "6002:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "5983:24:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 927,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "5983:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 928,
													"nodeType": "ArrayTypeName",
													"src": "5983:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "6025:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "6017:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 930,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6017:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 933,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "6047:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "6039:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 932,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6039:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 943,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "6111:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "6061:56:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 942,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 938,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 935,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 942,
																"src": "6070:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 934,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6070:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 937,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 942,
																"src": "6079:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 936,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6079:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6069:18:8"
													},
													"returnParameterTypes": {
														"id": 941,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 940,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 942,
																"src": "6102:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 939,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6102:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6101:9:8"
													},
													"src": "6061:56:8",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "5973:150:8"
									},
									"returnParameters": {
										"id": 947,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 946,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 957,
												"src": "6147:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 945,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6147:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:6:8"
									},
									"scope": 1784,
									"src": "5950:276:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1006,
										"nodeType": "Block",
										"src": "6816:195:8",
										"statements": [
											{
												"assignments": [
													979
												],
												"declarations": [
													{
														"constant": false,
														"id": 979,
														"mutability": "mutable",
														"name": "computedHash",
														"nameLocation": "6834:12:8",
														"nodeType": "VariableDeclaration",
														"scope": 1006,
														"src": "6826:20:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 978,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6826:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 981,
												"initialValue": {
													"id": 980,
													"name": "leaf",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 963,
													"src": "6849:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6826:27:8"
											},
											{
												"body": {
													"id": 1002,
													"nodeType": "Block",
													"src": "6906:70:8",
													"statements": [
														{
															"expression": {
																"id": 1000,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 993,
																	"name": "computedHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 979,
																	"src": "6920:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 995,
																			"name": "computedHash",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 979,
																			"src": "6942:12:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"baseExpression": {
																				"id": 996,
																				"name": "proof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 961,
																				"src": "6956:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																					"typeString": "bytes32[] calldata"
																				}
																			},
																			"id": 998,
																			"indexExpression": {
																				"id": 997,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 983,
																				"src": "6962:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "6956:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 994,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 973,
																		"src": "6935:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 999,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6935:30:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "6920:45:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1001,
															"nodeType": "ExpressionStatement",
															"src": "6920:45:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 989,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 986,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 983,
														"src": "6883:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 987,
															"name": "proof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 961,
															"src": "6887:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																"typeString": "bytes32[] calldata"
															}
														},
														"id": 988,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6893:6:8",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6887:12:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "6883:16:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1003,
												"initializationExpression": {
													"assignments": [
														983
													],
													"declarations": [
														{
															"constant": false,
															"id": 983,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "6876:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1003,
															"src": "6868:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 982,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6868:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 985,
													"initialValue": {
														"hexValue": "30",
														"id": 984,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6880:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "6868:13:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 991,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "6901:3:8",
														"subExpression": {
															"id": 990,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 983,
															"src": "6901:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 992,
													"nodeType": "ExpressionStatement",
													"src": "6901:3:8"
												},
												"nodeType": "ForStatement",
												"src": "6863:113:8"
											},
											{
												"expression": {
													"id": 1004,
													"name": "computedHash",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 979,
													"src": "6992:12:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 977,
												"id": 1005,
												"nodeType": "Return",
												"src": "6985:19:8"
											}
										]
									},
									"documentation": {
										"id": 958,
										"nodeType": "StructuredDocumentation",
										"src": "6232:389:8",
										"text": " @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."
									},
									"id": 1007,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processProofCalldata",
									"nameLocation": "6635:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 961,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "6684:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "6665:24:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 959,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "6665:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 960,
													"nodeType": "ArrayTypeName",
													"src": "6665:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 963,
												"mutability": "mutable",
												"name": "leaf",
												"nameLocation": "6707:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "6699:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 962,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6699:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 973,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "6771:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "6721:56:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 972,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 968,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 965,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 972,
																"src": "6730:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 964,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6730:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 967,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 972,
																"src": "6739:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 966,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6739:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6729:18:8"
													},
													"returnParameterTypes": {
														"id": 971,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 970,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 972,
																"src": "6762:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 969,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6762:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "6761:9:8"
													},
													"src": "6721:56:8",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "6655:128:8"
									},
									"returnParameters": {
										"id": 977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1007,
												"src": "6807:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 975,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6807:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6806:9:8"
									},
									"scope": 1784,
									"src": "6626:385:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1032,
										"nodeType": "Block",
										"src": "7797:76:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1030,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1025,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1011,
																"src": "7832:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1026,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1014,
																"src": "7839:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																}
															},
															{
																"id": 1027,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1019,
																"src": "7851:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															],
															"id": 1024,
															"name": "processMultiProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1191,
																1395
															],
															"referencedDeclaration": 1191,
															"src": "7814:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"
															}
														},
														"id": 1028,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7814:44:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1029,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1016,
														"src": "7862:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "7814:52:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1023,
												"id": 1031,
												"nodeType": "Return",
												"src": "7807:59:8"
											}
										]
									},
									"documentation": {
										"id": 1008,
										"nodeType": "StructuredDocumentation",
										"src": "7017:593:8",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."
									},
									"id": 1033,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerify",
									"nameLocation": "7624:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1020,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "7667:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "7650:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1009,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7650:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1010,
													"nodeType": "ArrayTypeName",
													"src": "7650:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1014,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "7696:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "7682:24:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1012,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "7682:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1013,
													"nodeType": "ArrayTypeName",
													"src": "7682:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "7724:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "7716:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1015,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7716:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1019,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "7755:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "7738:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1017,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "7738:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1018,
													"nodeType": "ArrayTypeName",
													"src": "7738:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7640:127:8"
									},
									"returnParameters": {
										"id": 1023,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1022,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1033,
												"src": "7791:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1021,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7791:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7790:6:8"
									},
									"scope": 1784,
									"src": "7615:258:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1190,
										"nodeType": "Block",
										"src": "9159:2104:8",
										"statements": [
											{
												"assignments": [
													1049
												],
												"declarations": [
													{
														"constant": false,
														"id": 1049,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "9551:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 1190,
														"src": "9543:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1048,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9543:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1052,
												"initialValue": {
													"expression": {
														"id": 1050,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1043,
														"src": "9563:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1051,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "9570:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "9563:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9543:33:8"
											},
											{
												"assignments": [
													1054
												],
												"declarations": [
													{
														"constant": false,
														"id": 1054,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "9594:13:8",
														"nodeType": "VariableDeclaration",
														"scope": 1190,
														"src": "9586:21:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1053,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9586:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1057,
												"initialValue": {
													"expression": {
														"id": 1055,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1040,
														"src": "9610:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"id": 1056,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "9621:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "9610:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9586:41:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1065,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1061,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1058,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1049,
															"src": "9675:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1059,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1037,
																"src": "9687:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															"id": 1060,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9693:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "9687:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "9675:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1064,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1062,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1054,
															"src": "9703:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1063,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9719:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "9703:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9675:45:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1070,
												"nodeType": "IfStatement",
												"src": "9671:113:8",
												"trueBody": {
													"id": 1069,
													"nodeType": "Block",
													"src": "9722:62:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1066,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 719,
																	"src": "9743:28:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1067,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9743:30:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1068,
															"nodeType": "RevertStatement",
															"src": "9736:37:8"
														}
													]
												}
											},
											{
												"assignments": [
													1075
												],
												"declarations": [
													{
														"constant": false,
														"id": 1075,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "10045:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1190,
														"src": "10028:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1073,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10028:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1074,
															"nodeType": "ArrayTypeName",
															"src": "10028:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1081,
												"initialValue": {
													"arguments": [
														{
															"id": 1079,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1054,
															"src": "10068:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1078,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "10054:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1076,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "10058:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1077,
															"nodeType": "ArrayTypeName",
															"src": "10058:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10054:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10028:54:8"
											},
											{
												"assignments": [
													1083
												],
												"declarations": [
													{
														"constant": false,
														"id": 1083,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "10100:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1190,
														"src": "10092:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1082,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10092:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1085,
												"initialValue": {
													"hexValue": "30",
													"id": 1084,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10110:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10092:19:8"
											},
											{
												"assignments": [
													1087
												],
												"declarations": [
													{
														"constant": false,
														"id": 1087,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "10129:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1190,
														"src": "10121:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1086,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10121:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1089,
												"initialValue": {
													"hexValue": "30",
													"id": 1088,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10139:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10121:19:8"
											},
											{
												"assignments": [
													1091
												],
												"declarations": [
													{
														"constant": false,
														"id": 1091,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "10158:8:8",
														"nodeType": "VariableDeclaration",
														"scope": 1190,
														"src": "10150:16:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1090,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10150:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1093,
												"initialValue": {
													"hexValue": "30",
													"id": 1092,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10169:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10150:20:8"
											},
											{
												"body": {
													"id": 1153,
													"nodeType": "Block",
													"src": "10590:310:8",
													"statements": [
														{
															"assignments": [
																1105
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1105,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "10612:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1153,
																	"src": "10604:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1104,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "10604:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1118,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1108,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1106,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1083,
																		"src": "10616:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1107,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1049,
																		"src": "10626:9:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10616:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1113,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1075,
																		"src": "10658:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1116,
																	"indexExpression": {
																		"id": 1115,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10665:9:8",
																		"subExpression": {
																			"id": 1114,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1087,
																			"src": "10665:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10658:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "10616:59:8",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1109,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1043,
																		"src": "10638:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1112,
																	"indexExpression": {
																		"id": 1111,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10645:9:8",
																		"subExpression": {
																			"id": 1110,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1083,
																			"src": "10645:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10638:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10604:71:8"
														},
														{
															"assignments": [
																1120
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1120,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "10697:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1153,
																	"src": "10689:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1119,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "10689:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1142,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1121,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1040,
																		"src": "10701:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																			"typeString": "bool[] memory"
																		}
																	},
																	"id": 1123,
																	"indexExpression": {
																		"id": 1122,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1095,
																		"src": "10712:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10701:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1137,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1037,
																		"src": "10813:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1140,
																	"indexExpression": {
																		"id": 1139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "10819:10:8",
																		"subExpression": {
																			"id": 1138,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1091,
																			"src": "10819:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10813:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1141,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "10701:129:8",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1126,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1124,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1083,
																					"src": "10734:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1125,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1049,
																					"src": "10744:9:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10734:19:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1131,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1075,
																					"src": "10776:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1134,
																				"indexExpression": {
																					"id": 1133,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "10783:9:8",
																					"subExpression": {
																						"id": 1132,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1087,
																						"src": "10783:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "10776:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1135,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "10734:59:8",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1127,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1043,
																					"src": "10756:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1130,
																				"indexExpression": {
																					"id": 1129,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "10763:9:8",
																					"subExpression": {
																						"id": 1128,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1083,
																						"src": "10763:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "10756:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1136,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10733:61:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "10689:141:8"
														},
														{
															"expression": {
																"id": 1151,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1143,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1075,
																		"src": "10844:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1145,
																	"indexExpression": {
																		"id": 1144,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1095,
																		"src": "10851:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "10844:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1148,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1105,
																			"src": "10884:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1149,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1120,
																			"src": "10887:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 1146,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 711,
																			"src": "10856:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$711_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 1147,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10863:20:8",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 698,
																		"src": "10856:27:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1150,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "10856:33:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "10844:45:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1152,
															"nodeType": "ExpressionStatement",
															"src": "10844:45:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1098,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "10566:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1099,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1054,
														"src": "10570:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10566:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1154,
												"initializationExpression": {
													"assignments": [
														1095
													],
													"declarations": [
														{
															"constant": false,
															"id": 1095,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "10559:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1154,
															"src": "10551:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1094,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "10551:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1097,
													"initialValue": {
														"hexValue": "30",
														"id": 1096,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10563:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "10551:13:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1102,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "10585:3:8",
														"subExpression": {
															"id": 1101,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1095,
															"src": "10585:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1103,
													"nodeType": "ExpressionStatement",
													"src": "10585:3:8"
												},
												"nodeType": "ForStatement",
												"src": "10546:354:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1155,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1054,
														"src": "10914:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1156,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10930:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "10914:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1177,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1175,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1049,
															"src": "11155:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1176,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11167:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "11155:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1187,
														"nodeType": "Block",
														"src": "11217:40:8",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1183,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1037,
																		"src": "11238:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1185,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1184,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11244:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11238:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1047,
																"id": 1186,
																"nodeType": "Return",
																"src": "11231:15:8"
															}
														]
													},
													"id": 1188,
													"nodeType": "IfStatement",
													"src": "11151:106:8",
													"trueBody": {
														"id": 1182,
														"nodeType": "Block",
														"src": "11170:41:8",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1178,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1043,
																		"src": "11191:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1180,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1179,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11198:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11191:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1047,
																"id": 1181,
																"nodeType": "Return",
																"src": "11184:16:8"
															}
														]
													}
												},
												"id": 1189,
												"nodeType": "IfStatement",
												"src": "10910:347:8",
												"trueBody": {
													"id": 1174,
													"nodeType": "Block",
													"src": "10933:212:8",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1161,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1158,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1091,
																	"src": "10951:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1159,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1037,
																		"src": "10963:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1160,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "10969:6:8",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "10963:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10951:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1166,
															"nodeType": "IfStatement",
															"src": "10947:100:8",
															"trueBody": {
																"id": 1165,
																"nodeType": "Block",
																"src": "10977:70:8",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1162,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 719,
																				"src": "11002:28:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1163,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "11002:30:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1164,
																		"nodeType": "RevertStatement",
																		"src": "10995:37:8"
																	}
																]
															}
														},
														{
															"id": 1173,
															"nodeType": "UncheckedBlock",
															"src": "11060:75:8",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1167,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1075,
																			"src": "11095:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1171,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1170,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1168,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1054,
																				"src": "11102:13:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1169,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11118:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "11102:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "11095:25:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1047,
																	"id": 1172,
																	"nodeType": "Return",
																	"src": "11088:32:8"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1034,
										"nodeType": "StructuredDocumentation",
										"src": "7879:1100:8",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1191,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProof",
									"nameLocation": "8993:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1044,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1037,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "9037:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "9020:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1035,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "9020:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1036,
													"nodeType": "ArrayTypeName",
													"src": "9020:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "9066:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "9052:24:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1038,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "9052:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1039,
													"nodeType": "ArrayTypeName",
													"src": "9052:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1043,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "9103:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "9086:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1041,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "9086:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1042,
													"nodeType": "ArrayTypeName",
													"src": "9086:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9010:105:8"
									},
									"returnParameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "9147:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "9139:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1045,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9139:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9138:20:8"
									},
									"scope": 1784,
									"src": "8984:2279:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1227,
										"nodeType": "Block",
										"src": "12112:84:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1219,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1195,
																"src": "12147:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1220,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1198,
																"src": "12154:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																}
															},
															{
																"id": 1221,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1203,
																"src": "12166:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1222,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1213,
																"src": "12174:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																	"typeString": "bool[] memory"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 1218,
															"name": "processMultiProof",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1191,
																1395
															],
															"referencedDeclaration": 1395,
															"src": "12129:17:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 1223,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12129:52:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1224,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1200,
														"src": "12185:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "12129:60:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1217,
												"id": 1226,
												"nodeType": "Return",
												"src": "12122:67:8"
											}
										]
									},
									"documentation": {
										"id": 1192,
										"nodeType": "StructuredDocumentation",
										"src": "11269:590:8",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."
									},
									"id": 1228,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerify",
									"nameLocation": "11873:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "11916:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "11899:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1193,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "11899:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1194,
													"nodeType": "ArrayTypeName",
													"src": "11899:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1198,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "11945:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "11931:24:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1196,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "11931:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1197,
													"nodeType": "ArrayTypeName",
													"src": "11931:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "11973:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "11965:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1199,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11965:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "12004:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "11987:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1201,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "11987:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1202,
													"nodeType": "ArrayTypeName",
													"src": "11987:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "12070:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "12020:56:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1212,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1208,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1205,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1212,
																"src": "12029:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1204,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12029:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1207,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1212,
																"src": "12038:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1206,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12038:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "12028:18:8"
													},
													"returnParameterTypes": {
														"id": 1211,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1210,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1212,
																"src": "12061:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1209,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "12061:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "12060:9:8"
													},
													"src": "12020:56:8",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "11889:193:8"
									},
									"returnParameters": {
										"id": 1217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1216,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1228,
												"src": "12106:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1215,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12106:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12105:6:8"
									},
									"scope": 1784,
									"src": "11864:332:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1394,
										"nodeType": "Block",
										"src": "13545:2083:8",
										"statements": [
											{
												"assignments": [
													1254
												],
												"declarations": [
													{
														"constant": false,
														"id": 1254,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "13937:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 1394,
														"src": "13929:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1253,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13929:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1257,
												"initialValue": {
													"expression": {
														"id": 1255,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1238,
														"src": "13949:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "13956:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "13949:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13929:33:8"
											},
											{
												"assignments": [
													1259
												],
												"declarations": [
													{
														"constant": false,
														"id": 1259,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "13980:13:8",
														"nodeType": "VariableDeclaration",
														"scope": 1394,
														"src": "13972:21:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1258,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13972:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1262,
												"initialValue": {
													"expression": {
														"id": 1260,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1235,
														"src": "13996:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
															"typeString": "bool[] memory"
														}
													},
													"id": 1261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "14007:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "13996:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13972:41:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1266,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1263,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1254,
															"src": "14061:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1264,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1232,
																"src": "14073:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															"id": 1265,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "14079:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "14073:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "14061:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1269,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1267,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1259,
															"src": "14089:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1268,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14105:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "14089:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14061:45:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1275,
												"nodeType": "IfStatement",
												"src": "14057:113:8",
												"trueBody": {
													"id": 1274,
													"nodeType": "Block",
													"src": "14108:62:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1271,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 719,
																	"src": "14129:28:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1272,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14129:30:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1273,
															"nodeType": "RevertStatement",
															"src": "14122:37:8"
														}
													]
												}
											},
											{
												"assignments": [
													1280
												],
												"declarations": [
													{
														"constant": false,
														"id": 1280,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "14431:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1394,
														"src": "14414:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1278,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "14414:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1279,
															"nodeType": "ArrayTypeName",
															"src": "14414:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1286,
												"initialValue": {
													"arguments": [
														{
															"id": 1284,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1259,
															"src": "14454:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1283,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "14440:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1281,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "14444:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1282,
															"nodeType": "ArrayTypeName",
															"src": "14444:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1285,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14440:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14414:54:8"
											},
											{
												"assignments": [
													1288
												],
												"declarations": [
													{
														"constant": false,
														"id": 1288,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "14486:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1394,
														"src": "14478:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1287,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14478:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1290,
												"initialValue": {
													"hexValue": "30",
													"id": 1289,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14496:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14478:19:8"
											},
											{
												"assignments": [
													1292
												],
												"declarations": [
													{
														"constant": false,
														"id": 1292,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "14515:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1394,
														"src": "14507:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1291,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14507:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1294,
												"initialValue": {
													"hexValue": "30",
													"id": 1293,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14525:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14507:19:8"
											},
											{
												"assignments": [
													1296
												],
												"declarations": [
													{
														"constant": false,
														"id": 1296,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "14544:8:8",
														"nodeType": "VariableDeclaration",
														"scope": 1394,
														"src": "14536:16:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1295,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14536:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1298,
												"initialValue": {
													"hexValue": "30",
													"id": 1297,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14555:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14536:20:8"
											},
											{
												"body": {
													"id": 1357,
													"nodeType": "Block",
													"src": "14976:289:8",
													"statements": [
														{
															"assignments": [
																1310
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1310,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "14998:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1357,
																	"src": "14990:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1309,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "14990:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1323,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1313,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1311,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1288,
																		"src": "15002:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1312,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1254,
																		"src": "15012:9:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "15002:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1318,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1280,
																		"src": "15044:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1321,
																	"indexExpression": {
																		"id": 1320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15051:9:8",
																		"subExpression": {
																			"id": 1319,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1292,
																			"src": "15051:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15044:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1322,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "15002:59:8",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1314,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1238,
																		"src": "15024:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1317,
																	"indexExpression": {
																		"id": 1316,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15031:9:8",
																		"subExpression": {
																			"id": 1315,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1288,
																			"src": "15031:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15024:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "14990:71:8"
														},
														{
															"assignments": [
																1325
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1325,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "15083:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1357,
																	"src": "15075:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1324,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "15075:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1347,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1326,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1235,
																		"src": "15087:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
																			"typeString": "bool[] memory"
																		}
																	},
																	"id": 1328,
																	"indexExpression": {
																		"id": 1327,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1300,
																		"src": "15098:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15087:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1342,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1232,
																		"src": "15199:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1345,
																	"indexExpression": {
																		"id": 1344,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "15205:10:8",
																		"subExpression": {
																			"id": 1343,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1296,
																			"src": "15205:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15199:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1346,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "15087:129:8",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1331,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1329,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1288,
																					"src": "15120:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1330,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1254,
																					"src": "15130:9:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "15120:19:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1336,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1280,
																					"src": "15162:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1339,
																				"indexExpression": {
																					"id": 1338,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "15169:9:8",
																					"subExpression": {
																						"id": 1337,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1292,
																						"src": "15169:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "15162:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1340,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "15120:59:8",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1332,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1238,
																					"src": "15142:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1335,
																				"indexExpression": {
																					"id": 1334,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "15149:9:8",
																					"subExpression": {
																						"id": 1333,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1288,
																						"src": "15149:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "15142:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1341,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "15119:61:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "15075:141:8"
														},
														{
															"expression": {
																"id": 1355,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1348,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1280,
																		"src": "15230:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1350,
																	"indexExpression": {
																		"id": 1349,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1300,
																		"src": "15237:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "15230:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1352,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1310,
																			"src": "15249:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1353,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1325,
																			"src": "15252:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1351,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1248,
																		"src": "15242:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 1354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15242:12:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "15230:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1356,
															"nodeType": "ExpressionStatement",
															"src": "15230:24:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1303,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1300,
														"src": "14952:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1304,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1259,
														"src": "14956:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14952:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1358,
												"initializationExpression": {
													"assignments": [
														1300
													],
													"declarations": [
														{
															"constant": false,
															"id": 1300,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "14945:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1358,
															"src": "14937:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1299,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "14937:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1302,
													"initialValue": {
														"hexValue": "30",
														"id": 1301,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "14949:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "14937:13:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1307,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "14971:3:8",
														"subExpression": {
															"id": 1306,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1300,
															"src": "14971:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1308,
													"nodeType": "ExpressionStatement",
													"src": "14971:3:8"
												},
												"nodeType": "ForStatement",
												"src": "14932:333:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1361,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1359,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1259,
														"src": "15279:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1360,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15295:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "15279:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1381,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1379,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1254,
															"src": "15520:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1380,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15532:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "15520:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1391,
														"nodeType": "Block",
														"src": "15582:40:8",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1387,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1232,
																		"src": "15603:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1389,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1388,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15609:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15603:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1252,
																"id": 1390,
																"nodeType": "Return",
																"src": "15596:15:8"
															}
														]
													},
													"id": 1392,
													"nodeType": "IfStatement",
													"src": "15516:106:8",
													"trueBody": {
														"id": 1386,
														"nodeType": "Block",
														"src": "15535:41:8",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1382,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1238,
																		"src": "15556:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1384,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1383,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15563:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "15556:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1252,
																"id": 1385,
																"nodeType": "Return",
																"src": "15549:16:8"
															}
														]
													}
												},
												"id": 1393,
												"nodeType": "IfStatement",
												"src": "15275:347:8",
												"trueBody": {
													"id": 1378,
													"nodeType": "Block",
													"src": "15298:212:8",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1365,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1362,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1296,
																	"src": "15316:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1363,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1232,
																		"src": "15328:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1364,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "15334:6:8",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "15328:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15316:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1370,
															"nodeType": "IfStatement",
															"src": "15312:100:8",
															"trueBody": {
																"id": 1369,
																"nodeType": "Block",
																"src": "15342:70:8",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1366,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 719,
																				"src": "15367:28:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1367,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "15367:30:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1368,
																		"nodeType": "RevertStatement",
																		"src": "15360:37:8"
																	}
																]
															}
														},
														{
															"id": 1377,
															"nodeType": "UncheckedBlock",
															"src": "15425:75:8",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1371,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1280,
																			"src": "15460:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1375,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1374,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1372,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1259,
																				"src": "15467:13:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1373,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "15483:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "15467:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "15460:25:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1252,
																	"id": 1376,
																	"nodeType": "Return",
																	"src": "15453:32:8"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1229,
										"nodeType": "StructuredDocumentation",
										"src": "12202:1097:8",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1395,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProof",
									"nameLocation": "13313:17:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1232,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "13357:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "13340:22:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1230,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "13340:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1231,
													"nodeType": "ArrayTypeName",
													"src": "13340:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "13386:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "13372:24:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1233,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "13372:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1234,
													"nodeType": "ArrayTypeName",
													"src": "13372:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1238,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "13423:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "13406:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1236,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "13406:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1237,
													"nodeType": "ArrayTypeName",
													"src": "13406:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "13489:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "13439:56:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1247,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1243,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1240,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1247,
																"src": "13448:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1239,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13448:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1242,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1247,
																"src": "13457:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1241,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13457:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "13447:18:8"
													},
													"returnParameterTypes": {
														"id": 1246,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1245,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1247,
																"src": "13480:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1244,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "13480:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "13479:9:8"
													},
													"src": "13439:56:8",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "13330:171:8"
									},
									"returnParameters": {
										"id": 1252,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1251,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "13533:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1395,
												"src": "13525:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1250,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13525:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13524:20:8"
									},
									"scope": 1784,
									"src": "13304:2324:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1420,
										"nodeType": "Block",
										"src": "16436:84:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1418,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1413,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1399,
																"src": "16479:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 1414,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1402,
																"src": "16486:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																}
															},
															{
																"id": 1415,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1407,
																"src": "16498:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															],
															"id": 1412,
															"name": "processMultiProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1579,
																1783
															],
															"referencedDeclaration": 1579,
															"src": "16453:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"
															}
														},
														"id": 1416,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16453:52:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1417,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1404,
														"src": "16509:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "16453:60:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1411,
												"id": 1419,
												"nodeType": "Return",
												"src": "16446:67:8"
											}
										]
									},
									"documentation": {
										"id": 1396,
										"nodeType": "StructuredDocumentation",
										"src": "15634:603:8",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."
									},
									"id": 1421,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerifyCalldata",
									"nameLocation": "16251:24:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1399,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "16304:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1421,
												"src": "16285:24:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1397,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "16285:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1398,
													"nodeType": "ArrayTypeName",
													"src": "16285:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1402,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "16335:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1421,
												"src": "16319:26:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1400,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "16319:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1401,
													"nodeType": "ArrayTypeName",
													"src": "16319:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1404,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "16363:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1421,
												"src": "16355:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1403,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "16355:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1407,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "16394:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1421,
												"src": "16377:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1405,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "16377:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1406,
													"nodeType": "ArrayTypeName",
													"src": "16377:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16275:131:8"
									},
									"returnParameters": {
										"id": 1411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1410,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1421,
												"src": "16430:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1409,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16430:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16429:6:8"
									},
									"scope": 1784,
									"src": "16242:278:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1578,
										"nodeType": "Block",
										"src": "17820:2104:8",
										"statements": [
											{
												"assignments": [
													1437
												],
												"declarations": [
													{
														"constant": false,
														"id": 1437,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "18212:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 1578,
														"src": "18204:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1436,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18204:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1440,
												"initialValue": {
													"expression": {
														"id": 1438,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1431,
														"src": "18224:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "18231:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "18224:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18204:33:8"
											},
											{
												"assignments": [
													1442
												],
												"declarations": [
													{
														"constant": false,
														"id": 1442,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "18255:13:8",
														"nodeType": "VariableDeclaration",
														"scope": 1578,
														"src": "18247:21:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1441,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18247:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1445,
												"initialValue": {
													"expression": {
														"id": 1443,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1428,
														"src": "18271:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
															"typeString": "bool[] calldata"
														}
													},
													"id": 1444,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "18282:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "18271:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18247:41:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1453,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1449,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1446,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1437,
															"src": "18336:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1447,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1425,
																"src": "18348:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															"id": 1448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "18354:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "18348:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "18336:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1452,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1450,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1442,
															"src": "18364:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1451,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18380:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "18364:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "18336:45:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1458,
												"nodeType": "IfStatement",
												"src": "18332:113:8",
												"trueBody": {
													"id": 1457,
													"nodeType": "Block",
													"src": "18383:62:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1454,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 719,
																	"src": "18404:28:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1455,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "18404:30:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1456,
															"nodeType": "RevertStatement",
															"src": "18397:37:8"
														}
													]
												}
											},
											{
												"assignments": [
													1463
												],
												"declarations": [
													{
														"constant": false,
														"id": 1463,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "18706:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1578,
														"src": "18689:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1461,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "18689:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1462,
															"nodeType": "ArrayTypeName",
															"src": "18689:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1469,
												"initialValue": {
													"arguments": [
														{
															"id": 1467,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1442,
															"src": "18729:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1466,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "18715:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1464,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "18719:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1465,
															"nodeType": "ArrayTypeName",
															"src": "18719:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18715:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18689:54:8"
											},
											{
												"assignments": [
													1471
												],
												"declarations": [
													{
														"constant": false,
														"id": 1471,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "18761:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1578,
														"src": "18753:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1470,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18753:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1473,
												"initialValue": {
													"hexValue": "30",
													"id": 1472,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18771:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18753:19:8"
											},
											{
												"assignments": [
													1475
												],
												"declarations": [
													{
														"constant": false,
														"id": 1475,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "18790:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1578,
														"src": "18782:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1474,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18782:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1477,
												"initialValue": {
													"hexValue": "30",
													"id": 1476,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18800:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18782:19:8"
											},
											{
												"assignments": [
													1479
												],
												"declarations": [
													{
														"constant": false,
														"id": 1479,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "18819:8:8",
														"nodeType": "VariableDeclaration",
														"scope": 1578,
														"src": "18811:16:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1478,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "18811:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1481,
												"initialValue": {
													"hexValue": "30",
													"id": 1480,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "18830:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18811:20:8"
											},
											{
												"body": {
													"id": 1541,
													"nodeType": "Block",
													"src": "19251:310:8",
													"statements": [
														{
															"assignments": [
																1493
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1493,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "19273:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1541,
																	"src": "19265:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1492,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "19265:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1506,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1496,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1494,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1471,
																		"src": "19277:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1495,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1437,
																		"src": "19287:9:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "19277:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1501,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1463,
																		"src": "19319:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1504,
																	"indexExpression": {
																		"id": 1503,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19326:9:8",
																		"subExpression": {
																			"id": 1502,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1475,
																			"src": "19326:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19319:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1505,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "19277:59:8",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1497,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1431,
																		"src": "19299:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1500,
																	"indexExpression": {
																		"id": 1499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19306:9:8",
																		"subExpression": {
																			"id": 1498,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "19306:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19299:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "19265:71:8"
														},
														{
															"assignments": [
																1508
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1508,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "19358:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1541,
																	"src": "19350:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1507,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "19350:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1530,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1509,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1428,
																		"src": "19362:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																			"typeString": "bool[] calldata"
																		}
																	},
																	"id": 1511,
																	"indexExpression": {
																		"id": 1510,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1483,
																		"src": "19373:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19362:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1525,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1425,
																		"src": "19474:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1528,
																	"indexExpression": {
																		"id": 1527,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "19480:10:8",
																		"subExpression": {
																			"id": 1526,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1479,
																			"src": "19480:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19474:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1529,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "19362:129:8",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1514,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1512,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1471,
																					"src": "19395:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1513,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1437,
																					"src": "19405:9:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "19395:19:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1519,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1463,
																					"src": "19437:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1522,
																				"indexExpression": {
																					"id": 1521,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "19444:9:8",
																					"subExpression": {
																						"id": 1520,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1475,
																						"src": "19444:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "19437:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1523,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "19395:59:8",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1515,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1431,
																					"src": "19417:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1518,
																				"indexExpression": {
																					"id": 1517,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "19424:9:8",
																					"subExpression": {
																						"id": 1516,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1471,
																						"src": "19424:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "19417:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1524,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "19394:61:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "19350:141:8"
														},
														{
															"expression": {
																"id": 1539,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1531,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1463,
																		"src": "19505:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1533,
																	"indexExpression": {
																		"id": 1532,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1483,
																		"src": "19512:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "19505:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1536,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1493,
																			"src": "19545:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1537,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1508,
																			"src": "19548:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"expression": {
																			"id": 1534,
																			"name": "Hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 711,
																			"src": "19517:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_Hashes_$711_$",
																				"typeString": "type(library Hashes)"
																			}
																		},
																		"id": 1535,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "19524:20:8",
																		"memberName": "commutativeKeccak256",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 698,
																		"src": "19517:27:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
																		}
																	},
																	"id": 1538,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "19517:33:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "19505:45:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1540,
															"nodeType": "ExpressionStatement",
															"src": "19505:45:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1486,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1483,
														"src": "19227:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1487,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1442,
														"src": "19231:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "19227:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1542,
												"initializationExpression": {
													"assignments": [
														1483
													],
													"declarations": [
														{
															"constant": false,
															"id": 1483,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "19220:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1542,
															"src": "19212:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1482,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "19212:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1485,
													"initialValue": {
														"hexValue": "30",
														"id": 1484,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19224:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "19212:13:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1490,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "19246:3:8",
														"subExpression": {
															"id": 1489,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1483,
															"src": "19246:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1491,
													"nodeType": "ExpressionStatement",
													"src": "19246:3:8"
												},
												"nodeType": "ForStatement",
												"src": "19207:354:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1543,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1442,
														"src": "19575:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1544,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "19591:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "19575:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1565,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1563,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1437,
															"src": "19816:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1564,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "19828:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "19816:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1575,
														"nodeType": "Block",
														"src": "19878:40:8",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1571,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1425,
																		"src": "19899:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1573,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1572,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "19905:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19899:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1435,
																"id": 1574,
																"nodeType": "Return",
																"src": "19892:15:8"
															}
														]
													},
													"id": 1576,
													"nodeType": "IfStatement",
													"src": "19812:106:8",
													"trueBody": {
														"id": 1570,
														"nodeType": "Block",
														"src": "19831:41:8",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1566,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1431,
																		"src": "19852:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1568,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1567,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "19859:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "19852:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1435,
																"id": 1569,
																"nodeType": "Return",
																"src": "19845:16:8"
															}
														]
													}
												},
												"id": 1577,
												"nodeType": "IfStatement",
												"src": "19571:347:8",
												"trueBody": {
													"id": 1562,
													"nodeType": "Block",
													"src": "19594:212:8",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1549,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1546,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1479,
																	"src": "19612:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1547,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1425,
																		"src": "19624:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1548,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "19630:6:8",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "19624:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "19612:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1554,
															"nodeType": "IfStatement",
															"src": "19608:100:8",
															"trueBody": {
																"id": 1553,
																"nodeType": "Block",
																"src": "19638:70:8",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1550,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 719,
																				"src": "19663:28:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1551,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "19663:30:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1552,
																		"nodeType": "RevertStatement",
																		"src": "19656:37:8"
																	}
																]
															}
														},
														{
															"id": 1561,
															"nodeType": "UncheckedBlock",
															"src": "19721:75:8",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1555,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1463,
																			"src": "19756:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1559,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1558,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1556,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1442,
																				"src": "19763:13:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1557,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "19779:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "19763:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "19756:25:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1435,
																	"id": 1560,
																	"nodeType": "Return",
																	"src": "19749:32:8"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1422,
										"nodeType": "StructuredDocumentation",
										"src": "16526:1102:8",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1579,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProofCalldata",
									"nameLocation": "17642:25:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1425,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "17696:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "17677:24:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1423,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "17677:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1424,
													"nodeType": "ArrayTypeName",
													"src": "17677:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1428,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "17727:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "17711:26:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1426,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "17711:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1427,
													"nodeType": "ArrayTypeName",
													"src": "17711:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1431,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "17764:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "17747:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1429,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "17747:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1430,
													"nodeType": "ArrayTypeName",
													"src": "17747:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17667:109:8"
									},
									"returnParameters": {
										"id": 1435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1434,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "17808:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1579,
												"src": "17800:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1433,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17800:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17799:20:8"
									},
									"scope": 1784,
									"src": "17633:2291:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1615,
										"nodeType": "Block",
										"src": "20795:92:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1607,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1583,
																"src": "20838:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															{
																"id": 1608,
																"name": "proofFlags",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1586,
																"src": "20845:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																}
															},
															{
																"id": 1609,
																"name": "leaves",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1591,
																"src": "20857:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																}
															},
															{
																"id": 1610,
																"name": "hasher",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1601,
																"src": "20865:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																	"typeString": "bool[] calldata"
																},
																{
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																	"typeString": "bytes32[] memory"
																},
																{
																	"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																	"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																}
															],
															"id": 1606,
															"name": "processMultiProofCalldata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [
																1579,
																1783
															],
															"referencedDeclaration": 1783,
															"src": "20812:25:8",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$",
																"typeString": "function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"
															}
														},
														"id": 1611,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "20812:60:8",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"id": 1612,
														"name": "root",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1588,
														"src": "20876:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "20812:68:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1605,
												"id": 1614,
												"nodeType": "Return",
												"src": "20805:75:8"
											}
										]
									},
									"documentation": {
										"id": 1580,
										"nodeType": "StructuredDocumentation",
										"src": "19930:600:8",
										"text": " @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."
									},
									"id": 1616,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "multiProofVerifyCalldata",
									"nameLocation": "20544:24:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1602,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1583,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "20597:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "20578:24:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1581,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "20578:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1582,
													"nodeType": "ArrayTypeName",
													"src": "20578:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1586,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "20628:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "20612:26:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1584,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "20612:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1585,
													"nodeType": "ArrayTypeName",
													"src": "20612:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1588,
												"mutability": "mutable",
												"name": "root",
												"nameLocation": "20656:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "20648:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1587,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "20648:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1591,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "20687:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "20670:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1589,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "20670:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1590,
													"nodeType": "ArrayTypeName",
													"src": "20670:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1601,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "20753:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "20703:56:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1600,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1596,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1593,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1600,
																"src": "20712:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1592,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20712:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1595,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1600,
																"src": "20721:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1594,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20721:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "20711:18:8"
													},
													"returnParameterTypes": {
														"id": 1599,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1598,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1600,
																"src": "20744:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1597,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "20744:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "20743:9:8"
													},
													"src": "20703:56:8",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "20568:197:8"
									},
									"returnParameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1604,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1616,
												"src": "20789:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1603,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "20789:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "20788:6:8"
									},
									"scope": 1784,
									"src": "20535:352:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1782,
										"nodeType": "Block",
										"src": "22250:2083:8",
										"statements": [
											{
												"assignments": [
													1642
												],
												"declarations": [
													{
														"constant": false,
														"id": 1642,
														"mutability": "mutable",
														"name": "leavesLen",
														"nameLocation": "22642:9:8",
														"nodeType": "VariableDeclaration",
														"scope": 1782,
														"src": "22634:17:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1641,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "22634:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1645,
												"initialValue": {
													"expression": {
														"id": 1643,
														"name": "leaves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1626,
														"src": "22654:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"id": 1644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "22661:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "22654:13:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "22634:33:8"
											},
											{
												"assignments": [
													1647
												],
												"declarations": [
													{
														"constant": false,
														"id": 1647,
														"mutability": "mutable",
														"name": "proofFlagsLen",
														"nameLocation": "22685:13:8",
														"nodeType": "VariableDeclaration",
														"scope": 1782,
														"src": "22677:21:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1646,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "22677:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1650,
												"initialValue": {
													"expression": {
														"id": 1648,
														"name": "proofFlags",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1623,
														"src": "22701:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
															"typeString": "bool[] calldata"
														}
													},
													"id": 1649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "22712:6:8",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "22701:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "22677:41:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1658,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1654,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1651,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1642,
															"src": "22766:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"expression": {
																"id": 1652,
																"name": "proof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1620,
																"src": "22778:5:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																	"typeString": "bytes32[] calldata"
																}
															},
															"id": 1653,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "22784:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "22778:12:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "22766:24:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1657,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1655,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1647,
															"src": "22794:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1656,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "22810:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "22794:17:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "22766:45:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1663,
												"nodeType": "IfStatement",
												"src": "22762:113:8",
												"trueBody": {
													"id": 1662,
													"nodeType": "Block",
													"src": "22813:62:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1659,
																	"name": "MerkleProofInvalidMultiproof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 719,
																	"src": "22834:28:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1660,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "22834:30:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1661,
															"nodeType": "RevertStatement",
															"src": "22827:37:8"
														}
													]
												}
											},
											{
												"assignments": [
													1668
												],
												"declarations": [
													{
														"constant": false,
														"id": 1668,
														"mutability": "mutable",
														"name": "hashes",
														"nameLocation": "23136:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1782,
														"src": "23119:23:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[]"
														},
														"typeName": {
															"baseType": {
																"id": 1666,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "23119:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1667,
															"nodeType": "ArrayTypeName",
															"src": "23119:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1674,
												"initialValue": {
													"arguments": [
														{
															"id": 1672,
															"name": "proofFlagsLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1647,
															"src": "23159:13:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1671,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "23145:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes32[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 1669,
																"name": "bytes32",
																"nodeType": "ElementaryTypeName",
																"src": "23149:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1670,
															"nodeType": "ArrayTypeName",
															"src": "23149:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
																"typeString": "bytes32[]"
															}
														}
													},
													"id": 1673,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "23145:28:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23119:54:8"
											},
											{
												"assignments": [
													1676
												],
												"declarations": [
													{
														"constant": false,
														"id": 1676,
														"mutability": "mutable",
														"name": "leafPos",
														"nameLocation": "23191:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1782,
														"src": "23183:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1675,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23183:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1678,
												"initialValue": {
													"hexValue": "30",
													"id": 1677,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23201:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23183:19:8"
											},
											{
												"assignments": [
													1680
												],
												"declarations": [
													{
														"constant": false,
														"id": 1680,
														"mutability": "mutable",
														"name": "hashPos",
														"nameLocation": "23220:7:8",
														"nodeType": "VariableDeclaration",
														"scope": 1782,
														"src": "23212:15:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1679,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23212:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1682,
												"initialValue": {
													"hexValue": "30",
													"id": 1681,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23230:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23212:19:8"
											},
											{
												"assignments": [
													1684
												],
												"declarations": [
													{
														"constant": false,
														"id": 1684,
														"mutability": "mutable",
														"name": "proofPos",
														"nameLocation": "23249:8:8",
														"nodeType": "VariableDeclaration",
														"scope": 1782,
														"src": "23241:16:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1683,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "23241:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1686,
												"initialValue": {
													"hexValue": "30",
													"id": 1685,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "23260:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "23241:20:8"
											},
											{
												"body": {
													"id": 1745,
													"nodeType": "Block",
													"src": "23681:289:8",
													"statements": [
														{
															"assignments": [
																1698
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1698,
																	"mutability": "mutable",
																	"name": "a",
																	"nameLocation": "23703:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1745,
																	"src": "23695:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1697,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "23695:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1711,
															"initialValue": {
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1701,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1699,
																		"name": "leafPos",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1676,
																		"src": "23707:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<",
																	"rightExpression": {
																		"id": 1700,
																		"name": "leavesLen",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1642,
																		"src": "23717:9:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "23707:19:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1706,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1668,
																		"src": "23749:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1709,
																	"indexExpression": {
																		"id": 1708,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23756:9:8",
																		"subExpression": {
																			"id": 1707,
																			"name": "hashPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1680,
																			"src": "23756:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23749:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1710,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "23707:59:8",
																"trueExpression": {
																	"baseExpression": {
																		"id": 1702,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1626,
																		"src": "23729:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1705,
																	"indexExpression": {
																		"id": 1704,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23736:9:8",
																		"subExpression": {
																			"id": 1703,
																			"name": "leafPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1676,
																			"src": "23736:7:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23729:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "23695:71:8"
														},
														{
															"assignments": [
																1713
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1713,
																	"mutability": "mutable",
																	"name": "b",
																	"nameLocation": "23788:1:8",
																	"nodeType": "VariableDeclaration",
																	"scope": 1745,
																	"src": "23780:9:8",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1712,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "23780:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1735,
															"initialValue": {
																"condition": {
																	"baseExpression": {
																		"id": 1714,
																		"name": "proofFlags",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1623,
																		"src": "23792:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
																			"typeString": "bool[] calldata"
																		}
																	},
																	"id": 1716,
																	"indexExpression": {
																		"id": 1715,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1688,
																		"src": "23803:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23792:13:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"baseExpression": {
																		"id": 1730,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1620,
																		"src": "23904:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1733,
																	"indexExpression": {
																		"id": 1732,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "++",
																		"prefix": false,
																		"src": "23910:10:8",
																		"subExpression": {
																			"id": 1731,
																			"name": "proofPos",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1684,
																			"src": "23910:8:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "23904:17:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"id": 1734,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "23792:129:8",
																"trueExpression": {
																	"components": [
																		{
																			"condition": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1719,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 1717,
																					"name": "leafPos",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1676,
																					"src": "23825:7:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 1718,
																					"name": "leavesLen",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1642,
																					"src": "23835:9:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "23825:19:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"falseExpression": {
																				"baseExpression": {
																					"id": 1724,
																					"name": "hashes",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1668,
																					"src": "23867:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1727,
																				"indexExpression": {
																					"id": 1726,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "23874:9:8",
																					"subExpression": {
																						"id": 1725,
																						"name": "hashPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1680,
																						"src": "23874:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "23867:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"id": 1728,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "Conditional",
																			"src": "23825:59:8",
																			"trueExpression": {
																				"baseExpression": {
																					"id": 1720,
																					"name": "leaves",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1626,
																					"src": "23847:6:8",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																						"typeString": "bytes32[] memory"
																					}
																				},
																				"id": 1723,
																				"indexExpression": {
																					"id": 1722,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "UnaryOperation",
																					"operator": "++",
																					"prefix": false,
																					"src": "23854:9:8",
																					"subExpression": {
																						"id": 1721,
																						"name": "leafPos",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1676,
																						"src": "23854:7:8",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "23847:17:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"id": 1729,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "23824:61:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "23780:141:8"
														},
														{
															"expression": {
																"id": 1743,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1736,
																		"name": "hashes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1668,
																		"src": "23935:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1738,
																	"indexExpression": {
																		"id": 1737,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1688,
																		"src": "23942:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "23935:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1740,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1698,
																			"src": "23954:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		{
																			"id": 1741,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1713,
																			"src": "23957:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			},
																			{
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		],
																		"id": 1739,
																		"name": "hasher",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1636,
																		"src": "23947:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
																			"typeString": "function (bytes32,bytes32) view returns (bytes32)"
																		}
																	},
																	"id": 1742,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "23947:12:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"src": "23935:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"id": 1744,
															"nodeType": "ExpressionStatement",
															"src": "23935:24:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1693,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1691,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1688,
														"src": "23657:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1692,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1647,
														"src": "23661:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "23657:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1746,
												"initializationExpression": {
													"assignments": [
														1688
													],
													"declarations": [
														{
															"constant": false,
															"id": 1688,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "23650:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1746,
															"src": "23642:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1687,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "23642:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1690,
													"initialValue": {
														"hexValue": "30",
														"id": 1689,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "23654:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "23642:13:8"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1695,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "23676:3:8",
														"subExpression": {
															"id": 1694,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1688,
															"src": "23676:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1696,
													"nodeType": "ExpressionStatement",
													"src": "23676:3:8"
												},
												"nodeType": "ForStatement",
												"src": "23637:333:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1749,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1747,
														"name": "proofFlagsLen",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1647,
														"src": "23984:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1748,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "24000:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "23984:17:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1769,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1767,
															"name": "leavesLen",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1642,
															"src": "24225:9:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 1768,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "24237:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "24225:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"id": 1779,
														"nodeType": "Block",
														"src": "24287:40:8",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1775,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1620,
																		"src": "24308:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1777,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1776,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "24314:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "24308:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1640,
																"id": 1778,
																"nodeType": "Return",
																"src": "24301:15:8"
															}
														]
													},
													"id": 1780,
													"nodeType": "IfStatement",
													"src": "24221:106:8",
													"trueBody": {
														"id": 1774,
														"nodeType": "Block",
														"src": "24240:41:8",
														"statements": [
															{
																"expression": {
																	"baseExpression": {
																		"id": 1770,
																		"name": "leaves",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1626,
																		"src": "24261:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																			"typeString": "bytes32[] memory"
																		}
																	},
																	"id": 1772,
																	"indexExpression": {
																		"hexValue": "30",
																		"id": 1771,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "24268:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "24261:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"functionReturnParameters": 1640,
																"id": 1773,
																"nodeType": "Return",
																"src": "24254:16:8"
															}
														]
													}
												},
												"id": 1781,
												"nodeType": "IfStatement",
												"src": "23980:347:8",
												"trueBody": {
													"id": 1766,
													"nodeType": "Block",
													"src": "24003:212:8",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1753,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1750,
																	"name": "proofPos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1684,
																	"src": "24021:8:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "!=",
																"rightExpression": {
																	"expression": {
																		"id": 1751,
																		"name": "proof",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1620,
																		"src": "24033:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
																			"typeString": "bytes32[] calldata"
																		}
																	},
																	"id": 1752,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "24039:6:8",
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "24033:12:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "24021:24:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1758,
															"nodeType": "IfStatement",
															"src": "24017:100:8",
															"trueBody": {
																"id": 1757,
																"nodeType": "Block",
																"src": "24047:70:8",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1754,
																				"name": "MerkleProofInvalidMultiproof",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 719,
																				"src": "24072:28:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																					"typeString": "function () pure returns (error)"
																				}
																			},
																			"id": 1755,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "24072:30:8",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 1756,
																		"nodeType": "RevertStatement",
																		"src": "24065:37:8"
																	}
																]
															}
														},
														{
															"id": 1765,
															"nodeType": "UncheckedBlock",
															"src": "24130:75:8",
															"statements": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 1759,
																			"name": "hashes",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1668,
																			"src": "24165:6:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1763,
																		"indexExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1762,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1760,
																				"name": "proofFlagsLen",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1647,
																				"src": "24172:13:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 1761,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "24188:1:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "24172:17:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "24165:25:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"functionReturnParameters": 1640,
																	"id": 1764,
																	"nodeType": "Return",
																	"src": "24158:32:8"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1617,
										"nodeType": "StructuredDocumentation",
										"src": "20893:1099:8",
										"text": " @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."
									},
									"id": 1783,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "processMultiProofCalldata",
									"nameLocation": "22006:25:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1620,
												"mutability": "mutable",
												"name": "proof",
												"nameLocation": "22060:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "22041:24:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1618,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "22041:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1619,
													"nodeType": "ArrayTypeName",
													"src": "22041:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1623,
												"mutability": "mutable",
												"name": "proofFlags",
												"nameLocation": "22091:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "22075:26:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bool_$dyn_calldata_ptr",
													"typeString": "bool[]"
												},
												"typeName": {
													"baseType": {
														"id": 1621,
														"name": "bool",
														"nodeType": "ElementaryTypeName",
														"src": "22075:4:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1622,
													"nodeType": "ArrayTypeName",
													"src": "22075:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
														"typeString": "bool[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1626,
												"mutability": "mutable",
												"name": "leaves",
												"nameLocation": "22128:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "22111:23:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1624,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "22111:7:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1625,
													"nodeType": "ArrayTypeName",
													"src": "22111:9:8",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1636,
												"mutability": "mutable",
												"name": "hasher",
												"nameLocation": "22194:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "22144:56:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
													"typeString": "function (bytes32,bytes32) view returns (bytes32)"
												},
												"typeName": {
													"id": 1635,
													"nodeType": "FunctionTypeName",
													"parameterTypes": {
														"id": 1631,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1628,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1635,
																"src": "22153:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1627,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22153:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															},
															{
																"constant": false,
																"id": 1630,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1635,
																"src": "22162:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1629,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22162:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "22152:18:8"
													},
													"returnParameterTypes": {
														"id": 1634,
														"nodeType": "ParameterList",
														"parameters": [
															{
																"constant": false,
																"id": 1633,
																"mutability": "mutable",
																"name": "",
																"nameLocation": "-1:-1:-1",
																"nodeType": "VariableDeclaration",
																"scope": 1635,
																"src": "22185:7:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1632,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "22185:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"src": "22184:9:8"
													},
													"src": "22144:56:8",
													"stateMutability": "view",
													"typeDescriptions": {
														"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
														"typeString": "function (bytes32,bytes32) view returns (bytes32)"
													},
													"visibility": "internal"
												},
												"visibility": "internal"
											}
										],
										"src": "22031:175:8"
									},
									"returnParameters": {
										"id": 1640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1639,
												"mutability": "mutable",
												"name": "merkleRoot",
												"nameLocation": "22238:10:8",
												"nodeType": "VariableDeclaration",
												"scope": 1783,
												"src": "22230:18:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1638,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "22230:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22229:20:8"
									},
									"scope": 1784,
									"src": "21997:2336:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1785,
							"src": "1353:22982:8",
							"usedErrors": [
								719
							],
							"usedEvents": []
						}
					],
					"src": "206:24130:8"
				},
				"id": 8
			},
			"src/CharityRaffle.sol": {
				"ast": {
					"absolutePath": "src/CharityRaffle.sol",
					"exportedSymbols": {
						"CharityRaffle": [
							2308
						],
						"ContextUpgradeable": [
							671
						],
						"Hashes": [
							711
						],
						"IVRFCoordinatorV2Plus": [
							17
						],
						"IVRFMigratableConsumerV2Plus": [
							31
						],
						"Initializable": [
							625
						],
						"MerkleProof": [
							1784
						],
						"OwnableUpgradeable": [
							357
						],
						"VRFConsumerBaseV2PlusCustom": [
							2444
						],
						"VRFV2PlusClient": [
							162
						]
					},
					"id": 2309,
					"license": "UNLICENSED",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1786,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".26"
							],
							"nodeType": "PragmaDirective",
							"src": "39:24:9"
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1787,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2309,
							"sourceUnit": 358,
							"src": "65:75:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/openzeppelin-contracts-upgradeable/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol",
							"file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
							"id": 1788,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2309,
							"sourceUnit": 1785,
							"src": "141:68:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol",
							"file": "@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol",
							"id": 1790,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2309,
							"sourceUnit": 163,
							"src": "210:100:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1789,
										"name": "VRFV2PlusClient",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 162,
										"src": "218:15:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "src/VRFConsumerBaseV2PlusCustom.sol",
							"file": "./VRFConsumerBaseV2PlusCustom.sol",
							"id": 1791,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2309,
							"sourceUnit": 2445,
							"src": "311:43:9",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1792,
										"name": "OwnableUpgradeable",
										"nameLocations": [
											"382:18:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 357,
										"src": "382:18:9"
									},
									"id": 1793,
									"nodeType": "InheritanceSpecifier",
									"src": "382:18:9"
								},
								{
									"baseName": {
										"id": 1794,
										"name": "VRFConsumerBaseV2PlusCustom",
										"nameLocations": [
											"402:27:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2444,
										"src": "402:27:9"
									},
									"id": 1795,
									"nodeType": "InheritanceSpecifier",
									"src": "402:27:9"
								}
							],
							"canonicalName": "CharityRaffle",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 2308,
							"linearizedBaseContracts": [
								2308,
								2444,
								31,
								357,
								671,
								625
							],
							"name": "CharityRaffle",
							"nameLocation": "365:13:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"functionSelector": "918f8674",
									"id": 1798,
									"mutability": "constant",
									"name": "DENOMINATOR",
									"nameLocation": "460:11:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "436:43:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1796,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "436:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "3130303030",
										"id": 1797,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "474:5:9",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_10000_by_1",
											"typeString": "int_const 10000"
										},
										"value": "10000"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "1209b1f6",
									"id": 1800,
									"mutability": "mutable",
									"name": "ticketPrice",
									"nameLocation": "524:11:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "509:26:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1799,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "509:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c7383be8",
									"id": 1802,
									"mutability": "mutable",
									"name": "numOfWinners",
									"nameLocation": "556:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "541:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1801,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "541:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "98617e2a",
									"id": 1804,
									"mutability": "mutable",
									"name": "pricePersentageBPS",
									"nameLocation": "589:18:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "574:33:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1803,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "574:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "7b208769",
									"id": 1806,
									"mutability": "mutable",
									"name": "charityWallet",
									"nameLocation": "628:13:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "613:28:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1805,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "613:7:9",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8b39989b",
									"id": 1808,
									"mutability": "mutable",
									"name": "vrfSubsciptionId",
									"nameLocation": "662:16:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "647:31:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1807,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "647:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "041d443e",
									"id": 1810,
									"mutability": "mutable",
									"name": "vrfKeyHash",
									"nameLocation": "699:10:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "684:25:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1809,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "684:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "18a7ea5f",
									"id": 1812,
									"mutability": "mutable",
									"name": "vrfRequestId",
									"nameLocation": "730:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "715:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1811,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "715:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "2eb4a7ab",
									"id": 1814,
									"mutability": "mutable",
									"name": "merkleRoot",
									"nameLocation": "763:10:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "748:25:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1813,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "748:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b9705a03",
									"id": 1816,
									"mutability": "mutable",
									"name": "winnerReward",
									"nameLocation": "795:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "780:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1815,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "780:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e17901d8",
									"id": 1818,
									"mutability": "mutable",
									"name": "charityFunds",
									"nameLocation": "828:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "813:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1817,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "813:7:9",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "35c1d349",
									"id": 1821,
									"mutability": "mutable",
									"name": "participants",
									"nameLocation": "864:12:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "847:29:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_address_$dyn_storage",
										"typeString": "address[]"
									},
									"typeName": {
										"baseType": {
											"id": 1819,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "847:7:9",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"id": 1820,
										"nodeType": "ArrayTypeName",
										"src": "847:9:9",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
											"typeString": "address[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "6bd5450a",
									"id": 1825,
									"mutability": "mutable",
									"name": "winners",
									"nameLocation": "914:7:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "882:39:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1824,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1822,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "890:7:9",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "882:24:9",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1823,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "901:4:9",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8bc53285",
									"id": 1827,
									"mutability": "mutable",
									"name": "winnersSelected",
									"nameLocation": "939:15:9",
									"nodeType": "VariableDeclaration",
									"scope": 2308,
									"src": "927:27:9",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 1826,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "927:4:9",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"eventSelector": "32a1b5731a757f192a06ca973715ca4dbc42c2d15323cabaa74e0a2d5dc088e4",
									"id": 1832,
									"name": "WinnersSelected",
									"nameLocation": "967:15:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1830,
												"indexed": false,
												"mutability": "mutable",
												"name": "winners",
												"nameLocation": "993:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1832,
												"src": "983:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1828,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "983:7:9",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1829,
													"nodeType": "ArrayTypeName",
													"src": "983:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "982:19:9"
									},
									"src": "961:41:9"
								},
								{
									"anonymous": false,
									"eventSelector": "0668f5b446eb814fe35b3206f43f14bd8567ba04ddaf7a3ee56516929ab22ccb",
									"id": 1838,
									"name": "TicketPurchased",
									"nameLocation": "1013:15:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1834,
												"indexed": true,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "1045:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1838,
												"src": "1029:21:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1833,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1029:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1836,
												"indexed": false,
												"mutability": "mutable",
												"name": "quantity",
												"nameLocation": "1060:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1838,
												"src": "1052:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1835,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1052:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1028:41:9"
									},
									"src": "1007:63:9"
								},
								{
									"anonymous": false,
									"eventSelector": "9ac10fb18c93d33ad7b0a941897aef048d0f8d30756684e82b4552ba12764d45",
									"id": 1842,
									"name": "RandomnessRequested",
									"nameLocation": "1081:19:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1840,
												"indexed": false,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "1109:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 1842,
												"src": "1101:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1839,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1101:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1100:19:9"
									},
									"src": "1075:45:9"
								},
								{
									"anonymous": false,
									"eventSelector": "09f058359c5a4d11027ce8027f5f0f4df210cb3ebac92f2c584170ed78624dd8",
									"id": 1846,
									"name": "PrizeClaimed",
									"nameLocation": "1131:12:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1845,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1844,
												"indexed": true,
												"mutability": "mutable",
												"name": "winner",
												"nameLocation": "1160:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1846,
												"src": "1144:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1843,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1144:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1143:24:9"
									},
									"src": "1125:43:9"
								},
								{
									"anonymous": false,
									"eventSelector": "5689f9ef5be164071958e27dca7a9df000791288fb23c621501d67b6a808848b",
									"id": 1850,
									"name": "CharityWithdrawal",
									"nameLocation": "1179:17:9",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1849,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1848,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1205:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1850,
												"src": "1197:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1847,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1197:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1196:16:9"
									},
									"src": "1173:40:9"
								},
								{
									"errorSelector": "11011294",
									"id": 1852,
									"name": "InsufficientValue",
									"nameLocation": "1225:17:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1851,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1242:2:9"
									},
									"src": "1219:26:9"
								},
								{
									"errorSelector": "09bde339",
									"id": 1854,
									"name": "InvalidProof",
									"nameLocation": "1256:12:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1853,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1268:2:9"
									},
									"src": "1250:21:9"
								},
								{
									"errorSelector": "0d5bae95",
									"id": 1856,
									"name": "VRFRequestAlreadyMade",
									"nameLocation": "1282:21:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1855,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1303:2:9"
									},
									"src": "1276:30:9"
								},
								{
									"errorSelector": "41abc801",
									"id": 1858,
									"name": "InvalidRequest",
									"nameLocation": "1317:14:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1857,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1331:2:9"
									},
									"src": "1311:23:9"
								},
								{
									"errorSelector": "3f3df5b6",
									"id": 1860,
									"name": "InvalidRandomWords",
									"nameLocation": "1345:18:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1859,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1363:2:9"
									},
									"src": "1339:27:9"
								},
								{
									"errorSelector": "b19a9f82",
									"id": 1862,
									"name": "NotAWinner",
									"nameLocation": "1377:10:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1861,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1387:2:9"
									},
									"src": "1371:19:9"
								},
								{
									"errorSelector": "90b8ec18",
									"id": 1864,
									"name": "TransferFailed",
									"nameLocation": "1401:14:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1863,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1415:2:9"
									},
									"src": "1395:23:9"
								},
								{
									"errorSelector": "356680b7",
									"id": 1866,
									"name": "InsufficientFunds",
									"nameLocation": "1429:17:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1865,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1446:2:9"
									},
									"src": "1423:26:9"
								},
								{
									"errorSelector": "c35d1fe4",
									"id": 1868,
									"name": "WinnersNotSelected",
									"nameLocation": "1460:18:9",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1867,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1478:2:9"
									},
									"src": "1454:27:9"
								},
								{
									"body": {
										"id": 1921,
										"nodeType": "Block",
										"src": "1681:564:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1884,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1870,
															"src": "1706:6:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1883,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 217,
														"src": "1691:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1885,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1691:22:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1886,
												"nodeType": "ExpressionStatement",
												"src": "1691:22:9"
											},
											{
												"expression": {
													"id": 1891,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1887,
														"name": "s_vrfCoordinator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2336,
														"src": "1723:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
															"typeString": "contract IVRFCoordinatorV2Plus"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "307839446466614361383138336334316164353533323942646565443946364138643533313638423142",
																"id": 1889,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1777:42:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"value": "0x9DdfaCa8183c41ad55329BdeeD9F6A8d53168B1B"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1888,
															"name": "IVRFCoordinatorV2Plus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 17,
															"src": "1742:21:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IVRFCoordinatorV2Plus_$17_$",
																"typeString": "type(contract IVRFCoordinatorV2Plus)"
															}
														},
														"id": 1890,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1742:87:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
															"typeString": "contract IVRFCoordinatorV2Plus"
														}
													},
													"src": "1723:106:9",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
														"typeString": "contract IVRFCoordinatorV2Plus"
													}
												},
												"id": 1892,
												"nodeType": "ExpressionStatement",
												"src": "1723:106:9"
											},
											{
												"expression": {
													"id": 1895,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1893,
														"name": "ticketPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1800,
														"src": "1886:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "302e303031",
														"id": 1894,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1900:11:9",
														"subdenomination": "ether",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1000000000000000_by_1",
															"typeString": "int_const 1000000000000000"
														},
														"value": "0.001"
													},
													"src": "1886:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1896,
												"nodeType": "ExpressionStatement",
												"src": "1886:25:9"
											},
											{
												"expression": {
													"id": 1899,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1897,
														"name": "numOfWinners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1802,
														"src": "1951:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "32",
														"id": 1898,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1966:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "1951:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1900,
												"nodeType": "ExpressionStatement",
												"src": "1951:16:9"
											},
											{
												"expression": {
													"id": 1903,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1901,
														"name": "pricePersentageBPS",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1804,
														"src": "2012:18:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "33303030",
														"id": 1902,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2033:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3000_by_1",
															"typeString": "int_const 3000"
														},
														"value": "3000"
													},
													"src": "2012:25:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1904,
												"nodeType": "ExpressionStatement",
												"src": "2012:25:9"
											},
											{
												"expression": {
													"id": 1907,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1905,
														"name": "charityWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1806,
														"src": "2094:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1906,
														"name": "_charityWallet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1872,
														"src": "2110:14:9",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2094:30:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1908,
												"nodeType": "ExpressionStatement",
												"src": "2094:30:9"
											},
											{
												"expression": {
													"id": 1911,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1909,
														"name": "vrfSubsciptionId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1808,
														"src": "2134:16:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1910,
														"name": "_vrfSubsciptionId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1874,
														"src": "2153:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2134:36:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1912,
												"nodeType": "ExpressionStatement",
												"src": "2134:36:9"
											},
											{
												"expression": {
													"id": 1915,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1913,
														"name": "vrfKeyHash",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1810,
														"src": "2180:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1914,
														"name": "_vrfKeyHash",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1876,
														"src": "2193:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2180:24:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1916,
												"nodeType": "ExpressionStatement",
												"src": "2180:24:9"
											},
											{
												"expression": {
													"id": 1919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1917,
														"name": "merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1814,
														"src": "2214:10:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1918,
														"name": "_merkleRoot",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1878,
														"src": "2227:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "2214:24:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 1920,
												"nodeType": "ExpressionStatement",
												"src": "2214:24:9"
											}
										]
									},
									"functionSelector": "f9f23186",
									"id": 1922,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1881,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1880,
												"name": "initializer",
												"nameLocations": [
													"1669:11:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 465,
												"src": "1669:11:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "1669:11:9"
										}
									],
									"name": "initialize",
									"nameLocation": "1496:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1870,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "1524:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "1516:14:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1869,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1516:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1872,
												"mutability": "mutable",
												"name": "_charityWallet",
												"nameLocation": "1548:14:9",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "1540:22:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1540:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1874,
												"mutability": "mutable",
												"name": "_vrfSubsciptionId",
												"nameLocation": "1580:17:9",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "1572:25:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1572:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1876,
												"mutability": "mutable",
												"name": "_vrfKeyHash",
												"nameLocation": "1615:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "1607:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1875,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1607:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "_merkleRoot",
												"nameLocation": "1644:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1922,
												"src": "1636:19:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1877,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1636:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1506:155:9"
									},
									"returnParameters": {
										"id": 1882,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1681:0:9"
									},
									"scope": 2308,
									"src": "1487:758:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1992,
										"nodeType": "Block",
										"src": "2326:489:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1936,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1931,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "2344:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1932,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2348:5:9",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "2344:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1935,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1933,
																	"name": "ticketPrice",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1800,
																	"src": "2357:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1934,
																	"name": "_qty",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1924,
																	"src": "2371:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2357:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2344:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1937,
																"name": "InsufficientValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1852,
																"src": "2377:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1938,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2377:19:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1930,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2336:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1939,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2336:61:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1940,
												"nodeType": "ExpressionStatement",
												"src": "2336:61:9"
											},
											{
												"assignments": [
													1942
												],
												"declarations": [
													{
														"constant": false,
														"id": 1942,
														"mutability": "mutable",
														"name": "leaf",
														"nameLocation": "2416:4:9",
														"nodeType": "VariableDeclaration",
														"scope": 1992,
														"src": "2408:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1941,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2408:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1950,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1946,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2444:3:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1947,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2448:6:9",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "2444:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1944,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2433:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1945,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2437:6:9",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2433:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1948,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2433:22:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1943,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2423:9:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2423:33:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2408:48:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1954,
																	"name": "_proof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1927,
																	"src": "2523:6:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	}
																},
																{
																	"id": 1955,
																	"name": "merkleRoot",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1814,
																	"src": "2547:10:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1959,
																					"name": "leaf",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1942,
																					"src": "2602:4:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"expression": {
																					"id": 1957,
																					"name": "abi",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967295,
																					"src": "2585:3:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_abi",
																						"typeString": "abi"
																					}
																				},
																				"id": 1958,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"memberLocation": "2589:12:9",
																				"memberName": "encodePacked",
																				"nodeType": "MemberAccess",
																				"src": "2585:16:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																					"typeString": "function () pure returns (bytes memory)"
																				}
																			},
																			"id": 1960,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2585:22:9",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 1956,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "2575:9:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 1961,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2575:33:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1952,
																	"name": "MerkleProof",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1784,
																	"src": "2487:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_MerkleProof_$1784_$",
																		"typeString": "type(library MerkleProof)"
																	}
																},
																"id": 1953,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2499:6:9",
																"memberName": "verify",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 740,
																"src": "2487:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
																	"typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
																}
															},
															"id": 1962,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2487:135:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1963,
																"name": "InvalidProof",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1854,
																"src": "2636:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 1964,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2636:14:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1951,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2466:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 1965,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2466:194:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1966,
												"nodeType": "ExpressionStatement",
												"src": "2466:194:9"
											},
											{
												"body": {
													"id": 1984,
													"nodeType": "Block",
													"src": "2706:54:9",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 1980,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "2738:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 1981,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "2742:6:9",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "2738:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"expression": {
																		"id": 1977,
																		"name": "participants",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1821,
																		"src": "2720:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_storage",
																			"typeString": "address[] storage ref"
																		}
																	},
																	"id": 1979,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2733:4:9",
																	"memberName": "push",
																	"nodeType": "MemberAccess",
																	"src": "2720:17:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$",
																		"typeString": "function (address[] storage pointer,address)"
																	}
																},
																"id": 1982,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2720:29:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1983,
															"nodeType": "ExpressionStatement",
															"src": "2720:29:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1973,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1971,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1968,
														"src": "2691:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 1972,
														"name": "_qty",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1924,
														"src": "2695:4:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2691:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1985,
												"initializationExpression": {
													"assignments": [
														1968
													],
													"declarations": [
														{
															"constant": false,
															"id": 1968,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2684:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 1985,
															"src": "2676:9:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1967,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2676:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1970,
													"initialValue": {
														"hexValue": "30",
														"id": 1969,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2688:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2676:13:9"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1975,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "2701:3:9",
														"subExpression": {
															"id": 1974,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1968,
															"src": "2701:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1976,
													"nodeType": "ExpressionStatement",
													"src": "2701:3:9"
												},
												"nodeType": "ForStatement",
												"src": "2671:89:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1987,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2791:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1988,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2795:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2791:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1989,
															"name": "_qty",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1924,
															"src": "2803:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1986,
														"name": "TicketPurchased",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1838,
														"src": "2775:15:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1990,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2775:33:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1991,
												"nodeType": "EmitStatement",
												"src": "2770:38:9"
											}
										]
									},
									"functionSelector": "8a89c8c9",
									"id": 1993,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "buyTicket",
									"nameLocation": "2260:9:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1924,
												"mutability": "mutable",
												"name": "_qty",
												"nameLocation": "2278:4:9",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "2270:12:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1923,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2270:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1927,
												"mutability": "mutable",
												"name": "_proof",
												"nameLocation": "2301:6:9",
												"nodeType": "VariableDeclaration",
												"scope": 1993,
												"src": "2284:23:9",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1925,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2284:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1926,
													"nodeType": "ArrayTypeName",
													"src": "2284:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2269:39:9"
									},
									"returnParameters": {
										"id": 1929,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2326:0:9"
									},
									"scope": 2308,
									"src": "2251:564:9",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2059,
										"nodeType": "Block",
										"src": "2872:931:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2001,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1999,
																"name": "vrfRequestId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1812,
																"src": "2890:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2000,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2906:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2890:17:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2002,
																"name": "VRFRequestAlreadyMade",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1856,
																"src": "2909:21:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2003,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2909:23:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 1998,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2882:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2004,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2882:51:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2005,
												"nodeType": "ExpressionStatement",
												"src": "2882:51:9"
											},
											{
												"expression": {
													"id": 2028,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2006,
														"name": "vrfRequestId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1812,
														"src": "2943:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2011,
																		"name": "vrfKeyHash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1810,
																		"src": "3069:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2012,
																		"name": "vrfSubsciptionId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1808,
																		"src": "3104:16:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"hexValue": "33",
																		"id": 2013,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3160:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_3_by_1",
																			"typeString": "int_const 3"
																		},
																		"value": "3"
																	},
																	{
																		"hexValue": "31303030303030",
																		"id": 2014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3197:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1000000_by_1",
																			"typeString": "int_const 1000000"
																		},
																		"value": "1000000"
																	},
																	{
																		"arguments": [
																			{
																				"id": 2017,
																				"name": "numOfWinners",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1802,
																				"src": "3239:12:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2016,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3232:6:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint32_$",
																				"typeString": "type(uint32)"
																			},
																			"typeName": {
																				"id": 2015,
																				"name": "uint32",
																				"nodeType": "ElementaryTypeName",
																				"src": "3232:6:9",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2018,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3232:20:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"hexValue": "66616c7365",
																						"id": 2023,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "bool",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "3481:5:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						},
																						"value": "false"
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					],
																					"expression": {
																						"id": 2021,
																						"name": "VRFV2PlusClient",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 162,
																						"src": "3437:15:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_VRFV2PlusClient_$162_$",
																							"typeString": "type(library VRFV2PlusClient)"
																						}
																					},
																					"id": 2022,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "3453:11:9",
																					"memberName": "ExtraArgsV1",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 133,
																					"src": "3437:27:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_struct$_ExtraArgsV1_$133_storage_ptr_$",
																						"typeString": "type(struct VRFV2PlusClient.ExtraArgsV1 storage pointer)"
																					}
																				},
																				"id": 2024,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "structConstructorCall",
																				"lValueRequested": false,
																				"nameLocations": [
																					"3466:13:9"
																				],
																				"names": [
																					"nativePayment"
																				],
																				"nodeType": "FunctionCall",
																				"src": "3437:51:9",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_ExtraArgsV1_$133_memory_ptr",
																					"typeString": "struct VRFV2PlusClient.ExtraArgsV1 memory"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_struct$_ExtraArgsV1_$133_memory_ptr",
																					"typeString": "struct VRFV2PlusClient.ExtraArgsV1 memory"
																				}
																			],
																			"expression": {
																				"id": 2019,
																				"name": "VRFV2PlusClient",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 162,
																				"src": "3281:15:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_VRFV2PlusClient_$162_$",
																					"typeString": "type(library VRFV2PlusClient)"
																				}
																			},
																			"id": 2020,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3297:12:9",
																			"memberName": "_argsToBytes",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 161,
																			"src": "3281:28:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_struct$_ExtraArgsV1_$133_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function (struct VRFV2PlusClient.ExtraArgsV1 memory) pure returns (bytes memory)"
																			}
																		},
																		"id": 2025,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3281:225:9",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_rational_3_by_1",
																			"typeString": "int_const 3"
																		},
																		{
																			"typeIdentifier": "t_rational_1000000_by_1",
																			"typeString": "int_const 1000000"
																		},
																		{
																			"typeIdentifier": "t_uint32",
																			"typeString": "uint32"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"id": 2009,
																		"name": "VRFV2PlusClient",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 162,
																		"src": "3007:15:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_VRFV2PlusClient_$162_$",
																			"typeString": "type(library VRFV2PlusClient)"
																		}
																	},
																	"id": 2010,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3023:18:9",
																	"memberName": "RandomWordsRequest",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 146,
																	"src": "3007:34:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_struct$_RandomWordsRequest_$146_storage_ptr_$",
																		"typeString": "type(struct VRFV2PlusClient.RandomWordsRequest storage pointer)"
																	}
																},
																"id": 2026,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "structConstructorCall",
																"lValueRequested": false,
																"nameLocations": [
																	"3060:7:9",
																	"3097:5:9",
																	"3138:20:9",
																	"3179:16:9",
																	"3222:8:9",
																	"3270:9:9"
																],
																"names": [
																	"keyHash",
																	"subId",
																	"requestConfirmations",
																	"callbackGasLimit",
																	"numWords",
																	"extraArgs"
																],
																"nodeType": "FunctionCall",
																"src": "3007:514:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_RandomWordsRequest_$146_memory_ptr",
																	"typeString": "struct VRFV2PlusClient.RandomWordsRequest memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_struct$_RandomWordsRequest_$146_memory_ptr",
																	"typeString": "struct VRFV2PlusClient.RandomWordsRequest memory"
																}
															],
															"expression": {
																"id": 2007,
																"name": "s_vrfCoordinator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2336,
																"src": "2958:16:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
																	"typeString": "contract IVRFCoordinatorV2Plus"
																}
															},
															"id": 2008,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2975:18:9",
															"memberName": "requestRandomWords",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 16,
															"src": "2958:35:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_struct$_RandomWordsRequest_$146_memory_ptr_$returns$_t_uint256_$",
																"typeString": "function (struct VRFV2PlusClient.RandomWordsRequest memory) external returns (uint256)"
															}
														},
														"id": 2027,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2958:573:9",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2943:588:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2029,
												"nodeType": "ExpressionStatement",
												"src": "2943:588:9"
											},
											{
												"assignments": [
													2031
												],
												"declarations": [
													{
														"constant": false,
														"id": 2031,
														"mutability": "mutable",
														"name": "fundsCollected",
														"nameLocation": "3550:14:9",
														"nodeType": "VariableDeclaration",
														"scope": 2059,
														"src": "3542:22:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2030,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3542:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2036,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2032,
															"name": "participants",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1821,
															"src": "3567:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage",
																"typeString": "address[] storage ref"
															}
														},
														"id": 2033,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3580:6:9",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3567:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 2034,
														"name": "ticketPrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1800,
														"src": "3589:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3567:33:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3542:58:9"
											},
											{
												"expression": {
													"id": 2044,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2037,
														"name": "winnerReward",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1816,
														"src": "3610:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2043,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2040,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2038,
																		"name": "fundsCollected",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2031,
																		"src": "3626:14:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2039,
																		"name": "pricePersentageBPS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1804,
																		"src": "3643:18:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3626:35:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2041,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3625:37:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 2042,
															"name": "DENOMINATOR",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1798,
															"src": "3665:11:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3625:51:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3610:66:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2045,
												"nodeType": "ExpressionStatement",
												"src": "3610:66:9"
											},
											{
												"expression": {
													"id": 2053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2046,
														"name": "charityFunds",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1818,
														"src": "3686:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2052,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2047,
															"name": "fundsCollected",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2031,
															"src": "3701:14:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "-",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2050,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2048,
																		"name": "winnerReward",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1816,
																		"src": "3719:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2049,
																		"name": "numOfWinners",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1802,
																		"src": "3734:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3719:27:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2051,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3718:29:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3701:46:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3686:61:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2054,
												"nodeType": "ExpressionStatement",
												"src": "3686:61:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2056,
															"name": "vrfRequestId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1812,
															"src": "3783:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2055,
														"name": "RandomnessRequested",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1842,
														"src": "3763:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2057,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3763:33:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2058,
												"nodeType": "EmitStatement",
												"src": "3758:38:9"
											}
										]
									},
									"functionSelector": "98afca73",
									"id": 2060,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1996,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1995,
												"name": "onlyOwner",
												"nameLocations": [
													"2862:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 252,
												"src": "2862:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "2862:9:9"
										}
									],
									"name": "requestRandomWinners",
									"nameLocation": "2830:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1994,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2850:2:9"
									},
									"returnParameters": {
										"id": 1997,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2872:0:9"
									},
									"scope": 2308,
									"src": "2821:982:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										268,
										2443
									],
									"body": {
										"id": 2072,
										"nodeType": "Block",
										"src": "3950:50:9",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"expression": {
															"id": 2068,
															"name": "OwnableUpgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "3967:18:9",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_OwnableUpgradeable_$357_$",
																"typeString": "type(contract OwnableUpgradeable)"
															}
														},
														"id": 2069,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3986:5:9",
														"memberName": "owner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 268,
														"src": "3967:24:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 2070,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3967:26:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2067,
												"id": 2071,
												"nodeType": "Return",
												"src": "3960:33:9"
											}
										]
									},
									"functionSelector": "8da5cb5b",
									"id": 2073,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "3818:5:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2064,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 2062,
												"name": "OwnableUpgradeable",
												"nameLocations": [
													"3871:18:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 357,
												"src": "3871:18:9"
											},
											{
												"id": 2063,
												"name": "VRFConsumerBaseV2PlusCustom",
												"nameLocations": [
													"3891:27:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2444,
												"src": "3891:27:9"
											}
										],
										"src": "3862:57:9"
									},
									"parameters": {
										"id": 2061,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3823:2:9"
									},
									"returnParameters": {
										"id": 2067,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2066,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2073,
												"src": "3937:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2065,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3937:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3936:9:9"
									},
									"scope": 2308,
									"src": "3809:191:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2345
									],
									"body": {
										"id": 2184,
										"nodeType": "Block",
										"src": "4125:865:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2085,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2083,
																"name": "requestId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2075,
																"src": "4143:9:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2084,
																"name": "vrfRequestId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1812,
																"src": "4156:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4143:25:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2086,
																"name": "InvalidRequest",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1858,
																"src": "4170:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2087,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4170:16:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2082,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4135:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2088,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4135:52:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2089,
												"nodeType": "ExpressionStatement",
												"src": "4135:52:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2094,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 2091,
																	"name": "randomWords",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2078,
																	"src": "4205:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 2092,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4217:6:9",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4205:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 2093,
																"name": "numOfWinners",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1802,
																"src": "4227:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4205:34:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2095,
																"name": "InvalidRandomWords",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1860,
																"src": "4241:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2096,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4241:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2090,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4197:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2097,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4197:65:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2098,
												"nodeType": "ExpressionStatement",
												"src": "4197:65:9"
											},
											{
												"assignments": [
													2103
												],
												"declarations": [
													{
														"constant": false,
														"id": 2103,
														"mutability": "mutable",
														"name": "winnersArray",
														"nameLocation": "4290:12:9",
														"nodeType": "VariableDeclaration",
														"scope": 2184,
														"src": "4273:29:9",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[]"
														},
														"typeName": {
															"baseType": {
																"id": 2101,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "4273:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2102,
															"nodeType": "ArrayTypeName",
															"src": "4273:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2109,
												"initialValue": {
													"arguments": [
														{
															"id": 2107,
															"name": "numOfWinners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1802,
															"src": "4319:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2106,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "4305:13:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (address[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 2104,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "4309:7:9",
																"stateMutability": "nonpayable",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 2105,
															"nodeType": "ArrayTypeName",
															"src": "4309:9:9",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																"typeString": "address[]"
															}
														}
													},
													"id": 2108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4305:27:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4273:59:9"
											},
											{
												"body": {
													"id": 2182,
													"nodeType": "Block",
													"src": "4386:598:9",
													"statements": [
														{
															"assignments": [
																2121
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2121,
																	"mutability": "mutable",
																	"name": "randomWord",
																	"nameLocation": "4408:10:9",
																	"nodeType": "VariableDeclaration",
																	"scope": 2182,
																	"src": "4400:18:9",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2120,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "4400:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2125,
															"initialValue": {
																"baseExpression": {
																	"id": 2122,
																	"name": "randomWords",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2078,
																	"src": "4421:11:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																		"typeString": "uint256[] calldata"
																	}
																},
																"id": 2124,
																"indexExpression": {
																	"id": 2123,
																	"name": "i",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2111,
																	"src": "4433:1:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "4421:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "4400:35:9"
														},
														{
															"body": {
																"id": 2172,
																"nodeType": "Block",
																"src": "4463:425:9",
																"statements": [
																	{
																		"assignments": [
																			2128
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 2128,
																				"mutability": "mutable",
																				"name": "winnerIndex",
																				"nameLocation": "4489:11:9",
																				"nodeType": "VariableDeclaration",
																				"scope": 2172,
																				"src": "4481:19:9",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"typeName": {
																					"id": 2127,
																					"name": "uint256",
																					"nodeType": "ElementaryTypeName",
																					"src": "4481:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 2133,
																		"initialValue": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2132,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2129,
																				"name": "randomWord",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2121,
																				"src": "4503:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "%",
																			"rightExpression": {
																				"expression": {
																					"id": 2130,
																					"name": "participants",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1821,
																					"src": "4516:12:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_address_$dyn_storage",
																						"typeString": "address[] storage ref"
																					}
																				},
																				"id": 2131,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "4529:6:9",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "4516:19:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4503:32:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "4481:54:9"
																	},
																	{
																		"assignments": [
																			2135
																		],
																		"declarations": [
																			{
																				"constant": false,
																				"id": 2135,
																				"mutability": "mutable",
																				"name": "winner",
																				"nameLocation": "4561:6:9",
																				"nodeType": "VariableDeclaration",
																				"scope": 2172,
																				"src": "4553:14:9",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				"typeName": {
																					"id": 2134,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "4553:7:9",
																					"stateMutability": "nonpayable",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"id": 2139,
																		"initialValue": {
																			"baseExpression": {
																				"id": 2136,
																				"name": "participants",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1821,
																				"src": "4570:12:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_address_$dyn_storage",
																					"typeString": "address[] storage ref"
																				}
																			},
																			"id": 2138,
																			"indexExpression": {
																				"id": 2137,
																				"name": "winnerIndex",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2128,
																				"src": "4583:11:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4570:25:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "VariableDeclarationStatement",
																		"src": "4553:42:9"
																	},
																	{
																		"condition": {
																			"id": 2143,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "4618:16:9",
																			"subExpression": {
																				"baseExpression": {
																					"id": 2140,
																					"name": "winners",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1825,
																					"src": "4619:7:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																						"typeString": "mapping(address => bool)"
																					}
																				},
																				"id": 2142,
																				"indexExpression": {
																					"id": 2141,
																					"name": "winner",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2135,
																					"src": "4627:6:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "4619:15:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"id": 2158,
																		"nodeType": "IfStatement",
																		"src": "4614:158:9",
																		"trueBody": {
																			"id": 2157,
																			"nodeType": "Block",
																			"src": "4636:136:9",
																			"statements": [
																				{
																					"expression": {
																						"id": 2148,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"baseExpression": {
																								"id": 2144,
																								"name": "winners",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1825,
																								"src": "4658:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																									"typeString": "mapping(address => bool)"
																								}
																							},
																							"id": 2146,
																							"indexExpression": {
																								"id": 2145,
																								"name": "winner",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2135,
																								"src": "4666:6:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_address",
																									"typeString": "address"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": true,
																							"nodeType": "IndexAccess",
																							"src": "4658:15:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "=",
																						"rightHandSide": {
																							"hexValue": "74727565",
																							"id": 2147,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"kind": "bool",
																							"lValueRequested": false,
																							"nodeType": "Literal",
																							"src": "4676:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bool",
																								"typeString": "bool"
																							},
																							"value": "true"
																						},
																						"src": "4658:22:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bool",
																							"typeString": "bool"
																						}
																					},
																					"id": 2149,
																					"nodeType": "ExpressionStatement",
																					"src": "4658:22:9"
																				},
																				{
																					"expression": {
																						"id": 2154,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"leftHandSide": {
																							"baseExpression": {
																								"id": 2150,
																								"name": "winnersArray",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2103,
																								"src": "4702:12:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																									"typeString": "address[] memory"
																								}
																							},
																							"id": 2152,
																							"indexExpression": {
																								"id": 2151,
																								"name": "i",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2111,
																								"src": "4715:1:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"isConstant": false,
																							"isLValue": true,
																							"isPure": false,
																							"lValueRequested": true,
																							"nodeType": "IndexAccess",
																							"src": "4702:15:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"nodeType": "Assignment",
																						"operator": "=",
																						"rightHandSide": {
																							"id": 2153,
																							"name": "winner",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2135,
																							"src": "4720:6:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						},
																						"src": "4702:24:9",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					"id": 2155,
																					"nodeType": "ExpressionStatement",
																					"src": "4702:24:9"
																				},
																				{
																					"id": 2156,
																					"nodeType": "Break",
																					"src": "4748:5:9"
																				}
																			]
																		}
																	},
																	{
																		"expression": {
																			"id": 2170,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2159,
																				"name": "randomWord",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2121,
																				"src": "4790:10:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2169,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 2162,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"id": 2160,
																								"name": "randomWord",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2121,
																								"src": "4804:10:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "+",
																							"rightExpression": {
																								"hexValue": "31",
																								"id": 2161,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"kind": "number",
																								"lValueRequested": false,
																								"nodeType": "Literal",
																								"src": "4817:1:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_rational_1_by_1",
																									"typeString": "int_const 1"
																								},
																								"value": "1"
																							},
																							"src": "4804:14:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 2163,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "4803:16:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "%",
																				"rightExpression": {
																					"expression": {
																						"arguments": [
																							{
																								"id": 2166,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": true,
																								"lValueRequested": false,
																								"nodeType": "ElementaryTypeNameExpression",
																								"src": "4827:7:9",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_uint256_$",
																									"typeString": "type(uint256)"
																								},
																								"typeName": {
																									"id": 2165,
																									"name": "uint256",
																									"nodeType": "ElementaryTypeName",
																									"src": "4827:7:9",
																									"typeDescriptions": {}
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_type$_t_uint256_$",
																									"typeString": "type(uint256)"
																								}
																							],
																							"id": 2164,
																							"name": "type",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967269,
																							"src": "4822:4:9",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																								"typeString": "function () pure"
																							}
																						},
																						"id": 2167,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "functionCall",
																						"lValueRequested": false,
																						"nameLocations": [],
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "4822:13:9",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_magic_meta_type_t_uint256",
																							"typeString": "type(uint256)"
																						}
																					},
																					"id": 2168,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"memberLocation": "4836:3:9",
																					"memberName": "max",
																					"nodeType": "MemberAccess",
																					"src": "4822:17:9",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "4803:36:9",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4790:49:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2171,
																		"nodeType": "ExpressionStatement",
																		"src": "4790:49:9"
																	}
																]
															},
															"condition": {
																"hexValue": "74727565",
																"id": 2126,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4457:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"id": 2173,
															"nodeType": "WhileStatement",
															"src": "4450:438:9"
														},
														{
															"expression": {
																"id": 2176,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2174,
																	"name": "winnersSelected",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1827,
																	"src": "4902:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 2175,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "4920:4:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "4902:22:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2177,
															"nodeType": "ExpressionStatement",
															"src": "4902:22:9"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 2179,
																		"name": "winnersArray",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2103,
																		"src": "4960:12:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																			"typeString": "address[] memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																			"typeString": "address[] memory"
																		}
																	],
																	"id": 2178,
																	"name": "WinnersSelected",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1832,
																	"src": "4944:15:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$returns$__$",
																		"typeString": "function (address[] memory)"
																	}
																},
																"id": 2180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4944:29:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2181,
															"nodeType": "EmitStatement",
															"src": "4939:34:9"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2114,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2111,
														"src": "4363:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 2115,
														"name": "numOfWinners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1802,
														"src": "4367:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4363:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2183,
												"initializationExpression": {
													"assignments": [
														2111
													],
													"declarations": [
														{
															"constant": false,
															"id": 2111,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4356:1:9",
															"nodeType": "VariableDeclaration",
															"scope": 2183,
															"src": "4348:9:9",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 2110,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4348:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 2113,
													"initialValue": {
														"hexValue": "30",
														"id": 2112,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4360:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4348:13:9"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 2118,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4381:3:9",
														"subExpression": {
															"id": 2117,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2111,
															"src": "4381:1:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2119,
													"nodeType": "ExpressionStatement",
													"src": "4381:3:9"
												},
												"nodeType": "ForStatement",
												"src": "4343:641:9"
											}
										]
									},
									"id": 2185,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "fulfillRandomWords",
									"nameLocation": "4015:18:9",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2080,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4116:8:9"
									},
									"parameters": {
										"id": 2079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2075,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "4051:9:9",
												"nodeType": "VariableDeclaration",
												"scope": 2185,
												"src": "4043:17:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2074,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4043:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2078,
												"mutability": "mutable",
												"name": "randomWords",
												"nameLocation": "4089:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 2185,
												"src": "4070:30:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2076,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "4070:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2077,
													"nodeType": "ArrayTypeName",
													"src": "4070:9:9",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4033:73:9"
									},
									"returnParameters": {
										"id": 2081,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4125:0:9"
									},
									"scope": 2308,
									"src": "4006:984:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2239,
										"nodeType": "Block",
										"src": "5027:409:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"baseExpression": {
																"id": 2189,
																"name": "winners",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1825,
																"src": "5045:7:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																	"typeString": "mapping(address => bool)"
																}
															},
															"id": 2192,
															"indexExpression": {
																"expression": {
																	"id": 2190,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5053:3:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 2191,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5057:6:9",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5053:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5045:19:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2193,
																"name": "NotAWinner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1862,
																"src": "5066:10:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2194,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5066:12:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2188,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5037:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2195,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5037:42:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2196,
												"nodeType": "ExpressionStatement",
												"src": "5037:42:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2204,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2200,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5118:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_CharityRaffle_$2308",
																				"typeString": "contract CharityRaffle"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_CharityRaffle_$2308",
																				"typeString": "contract CharityRaffle"
																			}
																		],
																		"id": 2199,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5110:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2198,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5110:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2201,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5110:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2202,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5124:7:9",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5110:21:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2203,
																"name": "winnerReward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1816,
																"src": "5135:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5110:37:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420636f6e74726163742062616c616e6365",
															"id": 2205,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5161:31:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749",
																"typeString": "literal_string \"Insufficient contract balance\""
															},
															"value": "Insufficient contract balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ec83fd00432662dbf5dd2aac1f81c346fbe87acecf7cd3f016ab25f549f71749",
																"typeString": "literal_string \"Insufficient contract balance\""
															}
														],
														"id": 2197,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5089:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5089:113:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2207,
												"nodeType": "ExpressionStatement",
												"src": "5089:113:9"
											},
											{
												"expression": {
													"id": 2213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 2208,
															"name": "winners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1825,
															"src": "5213:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 2211,
														"indexExpression": {
															"expression": {
																"id": 2209,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5221:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2210,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5225:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5221:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5213:19:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 2212,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5235:5:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "5213:27:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2214,
												"nodeType": "ExpressionStatement",
												"src": "5213:27:9"
											},
											{
												"assignments": [
													2216,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2216,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5283:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2239,
														"src": "5278:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2215,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5278:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2227,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2225,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5342:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 2219,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "5304:3:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 2220,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5308:6:9",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "5304:10:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2218,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5296:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_payable_$",
																		"typeString": "type(address payable)"
																	},
																	"typeName": {
																		"id": 2217,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5296:8:9",
																		"stateMutability": "payable",
																		"typeDescriptions": {}
																	}
																},
																"id": 2221,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5296:19:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2222,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5316:4:9",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5296:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2224,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2223,
																"name": "winnerReward",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1816,
																"src": "5328:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5296:45:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5296:49:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5277:68:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2229,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2216,
															"src": "5363:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2230,
																"name": "TransferFailed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1864,
																"src": "5372:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2231,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5372:16:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2228,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5355:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5355:34:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2233,
												"nodeType": "ExpressionStatement",
												"src": "5355:34:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 2235,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5418:3:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2236,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5422:6:9",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5418:10:9",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2234,
														"name": "PrizeClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1846,
														"src": "5405:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 2237,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5405:24:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2238,
												"nodeType": "EmitStatement",
												"src": "5400:29:9"
											}
										]
									},
									"functionSelector": "70740ac9",
									"id": 2240,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimPrize",
									"nameLocation": "5005:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2186,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5015:2:9"
									},
									"returnParameters": {
										"id": 2187,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5027:0:9"
									},
									"scope": 2308,
									"src": "4996:440:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2306,
										"nodeType": "Block",
										"src": "5490:569:9",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2248,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2246,
																"name": "charityFunds",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1818,
																"src": "5508:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2247,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5523:1:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "5508:16:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2249,
																"name": "InsufficientFunds",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1866,
																"src": "5526:17:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5526:19:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2245,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5500:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5500:46:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2252,
												"nodeType": "ExpressionStatement",
												"src": "5500:46:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2254,
															"name": "winnersSelected",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1827,
															"src": "5564:15:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2255,
																"name": "WinnersNotSelected",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1868,
																"src": "5581:18:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2256,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5581:20:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2253,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5556:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5556:46:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2258,
												"nodeType": "ExpressionStatement",
												"src": "5556:46:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2266,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 2262,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5641:4:9",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_CharityRaffle_$2308",
																				"typeString": "contract CharityRaffle"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_CharityRaffle_$2308",
																				"typeString": "contract CharityRaffle"
																			}
																		],
																		"id": 2261,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5633:7:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2260,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5633:7:9",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2263,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5633:13:9",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 2264,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5647:7:9",
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5633:21:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 2265,
																"name": "charityFunds",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1818,
																"src": "5658:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5633:37:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e7420636f6e74726163742062616c616e636520666f7220636861726974792066756e6473",
															"id": 2267,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5684:49:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9e66679dd142e7bfe5615f7a974a7ccf1ef97cb86476e3fc5363e2978ff885d6",
																"typeString": "literal_string \"Insufficient contract balance for charity funds\""
															},
															"value": "Insufficient contract balance for charity funds"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9e66679dd142e7bfe5615f7a974a7ccf1ef97cb86476e3fc5363e2978ff885d6",
																"typeString": "literal_string \"Insufficient contract balance for charity funds\""
															}
														],
														"id": 2259,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5612:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5612:131:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2269,
												"nodeType": "ExpressionStatement",
												"src": "5612:131:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2276,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2271,
																"name": "charityWallet",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1806,
																"src": "5761:13:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 2274,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5786:1:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 2273,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5778:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 2272,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5778:7:9",
																		"typeDescriptions": {}
																	}
																},
																"id": 2275,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5778:10:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "5761:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "436861726974792077616c6c6574206e6f7420736574",
															"id": 2277,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5790:24:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_054e9420ae094609b2fb28f0984f9340d854d5e5ae603d494443da43c5ddbd46",
																"typeString": "literal_string \"Charity wallet not set\""
															},
															"value": "Charity wallet not set"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_054e9420ae094609b2fb28f0984f9340d854d5e5ae603d494443da43c5ddbd46",
																"typeString": "literal_string \"Charity wallet not set\""
															}
														],
														"id": 2270,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5753:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5753:62:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2279,
												"nodeType": "ExpressionStatement",
												"src": "5753:62:9"
											},
											{
												"assignments": [
													2281,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 2281,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5832:7:9",
														"nodeType": "VariableDeclaration",
														"scope": 2306,
														"src": "5827:12:9",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 2280,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5827:4:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 2291,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 2289,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5894:2:9",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"arguments": [
																	{
																		"id": 2284,
																		"name": "charityWallet",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1806,
																		"src": "5853:13:9",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2283,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5845:8:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_payable_$",
																		"typeString": "type(address payable)"
																	},
																	"typeName": {
																		"id": 2282,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "5845:8:9",
																		"stateMutability": "payable",
																		"typeDescriptions": {}
																	}
																},
																"id": 2285,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5845:22:9",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 2286,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5868:4:9",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5845:27:9",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 2288,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 2287,
																"name": "charityFunds",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1818,
																"src": "5880:12:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5845:48:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 2290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5845:52:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5826:71:9"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2293,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2281,
															"src": "5915:7:9",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2294,
																"name": "TransferFailed",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1864,
																"src": "5924:14:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																	"typeString": "function () pure returns (error)"
																}
															},
															"id": 2295,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5924:16:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_error",
																"typeString": "error"
															}
														],
														"id": 2292,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5907:7:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_error_$returns$__$",
															"typeString": "function (bool,error) pure"
														}
													},
													"id": 2296,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5907:34:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2297,
												"nodeType": "ExpressionStatement",
												"src": "5907:34:9"
											},
											{
												"expression": {
													"id": 2300,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2298,
														"name": "charityFunds",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1818,
														"src": "5951:12:9",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 2299,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5966:1:9",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5951:16:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2301,
												"nodeType": "ExpressionStatement",
												"src": "5951:16:9"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2303,
															"name": "charityFunds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1818,
															"src": "6039:12:9",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2302,
														"name": "CharityWithdrawal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1850,
														"src": "6021:17:9",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 2304,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6021:31:9",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2305,
												"nodeType": "EmitStatement",
												"src": "6016:36:9"
											}
										]
									},
									"functionSelector": "74552552",
									"id": 2307,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2243,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2242,
												"name": "onlyOwner",
												"nameLocations": [
													"5480:9:9"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 252,
												"src": "5480:9:9"
											},
											"nodeType": "ModifierInvocation",
											"src": "5480:9:9"
										}
									],
									"name": "claimCharityFunds",
									"nameLocation": "5451:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2241,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5468:2:9"
									},
									"returnParameters": {
										"id": 2244,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5490:0:9"
									},
									"scope": 2308,
									"src": "5442:617:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2309,
							"src": "356:5705:9",
							"usedErrors": [
								193,
								198,
								374,
								377,
								1852,
								1854,
								1856,
								1858,
								1860,
								1862,
								1864,
								1866,
								1868,
								2323,
								2331,
								2333
							],
							"usedEvents": [
								24,
								204,
								382,
								1832,
								1838,
								1842,
								1846,
								1850
							]
						}
					],
					"src": "39:6023:9"
				},
				"id": 9
			},
			"src/VRFConsumerBaseV2PlusCustom.sol": {
				"ast": {
					"absolutePath": "src/VRFConsumerBaseV2PlusCustom.sol",
					"exportedSymbols": {
						"IVRFCoordinatorV2Plus": [
							17
						],
						"IVRFMigratableConsumerV2Plus": [
							31
						],
						"VRFConsumerBaseV2PlusCustom": [
							2444
						]
					},
					"id": 2445,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2310,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".4"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:10"
						},
						{
							"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol",
							"file": "@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol",
							"id": 2312,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2445,
							"sourceUnit": 18,
							"src": "57:113:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2311,
										"name": "IVRFCoordinatorV2Plus",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 17,
										"src": "65:21:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol",
							"file": "@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol",
							"id": 2314,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2445,
							"sourceUnit": 32,
							"src": "171:127:10",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2313,
										"name": "IVRFMigratableConsumerV2Plus",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 31,
										"src": "179:28:10",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2316,
										"name": "IVRFMigratableConsumerV2Plus",
										"nameLocations": [
											"5719:28:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 31,
										"src": "5719:28:10"
									},
									"id": 2317,
									"nodeType": "InheritanceSpecifier",
									"src": "5719:28:10"
								}
							],
							"canonicalName": "VRFConsumerBaseV2PlusCustom",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2315,
								"nodeType": "StructuredDocumentation",
								"src": "300:5369:10",
								"text": "****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinatorV2Plus.\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBaseV2Plus, and can\n @dev initialize VRFConsumerBaseV2Plus's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumerV2Plus is VRFConsumerBaseV2Plus {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _subOwner)\n @dev       VRFConsumerBaseV2Plus(_vrfCoordinator, _subOwner) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create a subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords, extraArgs),\n @dev see (IVRFCoordinatorV2Plus for a description of the arguments).\n @dev Once the VRFCoordinatorV2Plus has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBaseV2Plus.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."
							},
							"fullyImplemented": false,
							"id": 2444,
							"linearizedBaseContracts": [
								2444,
								31
							],
							"name": "VRFConsumerBaseV2PlusCustom",
							"nameLocation": "5688:27:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"errorSelector": "1cf993f4",
									"id": 2323,
									"name": "OnlyCoordinatorCanFulfill",
									"nameLocation": "5760:25:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2322,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2319,
												"mutability": "mutable",
												"name": "have",
												"nameLocation": "5794:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2323,
												"src": "5786:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2318,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5786:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2321,
												"mutability": "mutable",
												"name": "want",
												"nameLocation": "5808:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2323,
												"src": "5800:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2320,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5800:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5785:28:10"
									},
									"src": "5754:60:10"
								},
								{
									"errorSelector": "061db9c1",
									"id": 2331,
									"name": "OnlyOwnerOrCoordinator",
									"nameLocation": "5825:22:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2325,
												"mutability": "mutable",
												"name": "have",
												"nameLocation": "5865:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "5857:12:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2324,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5857:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2327,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5887:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "5879:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2326,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5879:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2329,
												"mutability": "mutable",
												"name": "coordinator",
												"nameLocation": "5910:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2331,
												"src": "5902:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2328,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5902:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5847:80:10"
									},
									"src": "5819:109:10"
								},
								{
									"errorSelector": "d92e233d",
									"id": 2333,
									"name": "ZeroAddress",
									"nameLocation": "5939:11:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5950:2:10"
									},
									"src": "5933:20:10"
								},
								{
									"constant": false,
									"functionSelector": "9eccacf6",
									"id": 2336,
									"mutability": "mutable",
									"name": "s_vrfCoordinator",
									"nameLocation": "6139:16:10",
									"nodeType": "VariableDeclaration",
									"scope": 2444,
									"src": "6110:45:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
										"typeString": "contract IVRFCoordinatorV2Plus"
									},
									"typeName": {
										"id": 2335,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2334,
											"name": "IVRFCoordinatorV2Plus",
											"nameLocations": [
												"6110:21:10"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 17,
											"src": "6110:21:10"
										},
										"referencedDeclaration": 17,
										"src": "6110:21:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
											"typeString": "contract IVRFCoordinatorV2Plus"
										}
									},
									"visibility": "public"
								},
								{
									"documentation": {
										"id": 2337,
										"nodeType": "StructuredDocumentation",
										"src": "6162:716:10",
										"text": " @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2Plus expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"
									},
									"id": 2345,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "fulfillRandomWords",
									"nameLocation": "6986:18:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "7022:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 2345,
												"src": "7014:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7014:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2342,
												"mutability": "mutable",
												"name": "randomWords",
												"nameLocation": "7060:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2345,
												"src": "7041:30:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2340,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "7041:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2341,
													"nodeType": "ArrayTypeName",
													"src": "7041:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7004:73:10"
									},
									"returnParameters": {
										"id": 2344,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7094:0:10"
									},
									"scope": 2444,
									"src": "6977:118:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2376,
										"nodeType": "Block",
										"src": "7411:255:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2359,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2353,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "7425:3:10",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 2354,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7429:6:10",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "7425:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"id": 2357,
																"name": "s_vrfCoordinator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2336,
																"src": "7447:16:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
																	"typeString": "contract IVRFCoordinatorV2Plus"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
																	"typeString": "contract IVRFCoordinatorV2Plus"
																}
															],
															"id": 2356,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7439:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2355,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7439:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 2358,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7439:25:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7425:39:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2370,
												"nodeType": "IfStatement",
												"src": "7421:187:10",
												"trueBody": {
													"id": 2369,
													"nodeType": "Block",
													"src": "7466:142:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"id": 2361,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "7530:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 2362,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7534:6:10",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "7530:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 2365,
																				"name": "s_vrfCoordinator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2336,
																				"src": "7566:16:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
																					"typeString": "contract IVRFCoordinatorV2Plus"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
																					"typeString": "contract IVRFCoordinatorV2Plus"
																				}
																			],
																			"id": 2364,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7558:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2363,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7558:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2366,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7558:25:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2360,
																	"name": "OnlyCoordinatorCanFulfill",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2323,
																	"src": "7487:25:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$",
																		"typeString": "function (address,address) pure returns (error)"
																	}
																},
																"id": 2367,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7487:110:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 2368,
															"nodeType": "RevertStatement",
															"src": "7480:117:10"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2372,
															"name": "requestId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2347,
															"src": "7636:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2373,
															"name": "randomWords",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2350,
															"src": "7647:11:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
																"typeString": "uint256[] calldata"
															}
														],
														"id": 2371,
														"name": "fulfillRandomWords",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2345,
														"src": "7617:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$",
															"typeString": "function (uint256,uint256[] calldata)"
														}
													},
													"id": 2374,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7617:42:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2375,
												"nodeType": "ExpressionStatement",
												"src": "7617:42:10"
											}
										]
									},
									"functionSelector": "1fe543e3",
									"id": 2377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "rawFulfillRandomWords",
									"nameLocation": "7307:21:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2347,
												"mutability": "mutable",
												"name": "requestId",
												"nameLocation": "7346:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 2377,
												"src": "7338:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2346,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7338:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2350,
												"mutability": "mutable",
												"name": "randomWords",
												"nameLocation": "7384:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2377,
												"src": "7365:30:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_calldata_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2348,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "7365:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2349,
													"nodeType": "ArrayTypeName",
													"src": "7365:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7328:73:10"
									},
									"returnParameters": {
										"id": 2352,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7411:0:10"
									},
									"scope": 2444,
									"src": "7298:368:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										30
									],
									"body": {
										"id": 2407,
										"nodeType": "Block",
										"src": "7840:210:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2391,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2386,
														"name": "_vrfCoordinator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2380,
														"src": "7854:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2389,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7881:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2388,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7873:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2387,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7873:7:10",
																"typeDescriptions": {}
															}
														},
														"id": 2390,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7873:10:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7854:29:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2396,
												"nodeType": "IfStatement",
												"src": "7850:80:10",
												"trueBody": {
													"id": 2395,
													"nodeType": "Block",
													"src": "7885:45:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2392,
																	"name": "ZeroAddress",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2333,
																	"src": "7906:11:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 2393,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7906:13:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 2394,
															"nodeType": "RevertStatement",
															"src": "7899:20:10"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2397,
														"name": "s_vrfCoordinator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2336,
														"src": "7939:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
															"typeString": "contract IVRFCoordinatorV2Plus"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2399,
																"name": "_vrfCoordinator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2380,
																"src": "7980:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 2398,
															"name": "IVRFCoordinatorV2Plus",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 17,
															"src": "7958:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IVRFCoordinatorV2Plus_$17_$",
																"typeString": "type(contract IVRFCoordinatorV2Plus)"
															}
														},
														"id": 2400,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7958:38:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
															"typeString": "contract IVRFCoordinatorV2Plus"
														}
													},
													"src": "7939:57:10",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
														"typeString": "contract IVRFCoordinatorV2Plus"
													}
												},
												"id": 2402,
												"nodeType": "ExpressionStatement",
												"src": "7939:57:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 2404,
															"name": "_vrfCoordinator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2380,
															"src": "8027:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 2403,
														"name": "CoordinatorSet",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "8012:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 2405,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8012:31:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2406,
												"nodeType": "EmitStatement",
												"src": "8007:36:10"
											}
										]
									},
									"documentation": {
										"id": 2378,
										"nodeType": "StructuredDocumentation",
										"src": "7672:59:10",
										"text": " @inheritdoc IVRFMigratableConsumerV2Plus"
									},
									"functionSelector": "8ea98117",
									"id": 2408,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 2384,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 2383,
												"name": "onlyOwnerOrCoordinator",
												"nameLocations": [
													"7817:22:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2438,
												"src": "7817:22:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "7817:22:10"
										}
									],
									"name": "setCoordinator",
									"nameLocation": "7745:14:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 2382,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7808:8:10"
									},
									"parameters": {
										"id": 2381,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2380,
												"mutability": "mutable",
												"name": "_vrfCoordinator",
												"nameLocation": "7777:15:10",
												"nodeType": "VariableDeclaration",
												"scope": 2408,
												"src": "7769:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7769:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7759:39:10"
									},
									"returnParameters": {
										"id": 2385,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7840:0:10"
									},
									"scope": 2444,
									"src": "7736:314:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 2437,
										"nodeType": "Block",
										"src": "8090:261:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2414,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2410,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8104:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8108:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8104:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2412,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2443,
																"src": "8118:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 2413,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8118:7:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "8104:21:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2421,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2415,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8129:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2416,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8133:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8129:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"id": 2419,
																	"name": "s_vrfCoordinator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2336,
																	"src": "8151:16:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
																		"typeString": "contract IVRFCoordinatorV2Plus"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
																		"typeString": "contract IVRFCoordinatorV2Plus"
																	}
																],
																"id": 2418,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8143:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2417,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8143:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 2420,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8143:25:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "8129:39:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8104:64:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2435,
												"nodeType": "IfStatement",
												"src": "8100:234:10",
												"trueBody": {
													"id": 2434,
													"nodeType": "Block",
													"src": "8170:164:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"expression": {
																			"id": 2424,
																			"name": "msg",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967281,
																			"src": "8231:3:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_message",
																				"typeString": "msg"
																			}
																		},
																		"id": 2425,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "8235:6:10",
																		"memberName": "sender",
																		"nodeType": "MemberAccess",
																		"src": "8231:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2426,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2443,
																			"src": "8259:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 2427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8259:7:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"id": 2430,
																				"name": "s_vrfCoordinator",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2336,
																				"src": "8292:16:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
																					"typeString": "contract IVRFCoordinatorV2Plus"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IVRFCoordinatorV2Plus_$17",
																					"typeString": "contract IVRFCoordinatorV2Plus"
																				}
																			],
																			"id": 2429,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8284:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2428,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8284:7:10",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2431,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8284:25:10",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 2423,
																	"name": "OnlyOwnerOrCoordinator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2331,
																	"src": "8191:22:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$_t_address_$returns$_t_error_$",
																		"typeString": "function (address,address,address) pure returns (error)"
																	}
																},
																"id": 2432,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8191:132:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 2433,
															"nodeType": "RevertStatement",
															"src": "8184:139:10"
														}
													]
												}
											},
											{
												"id": 2436,
												"nodeType": "PlaceholderStatement",
												"src": "8343:1:10"
											}
										]
									},
									"id": 2438,
									"name": "onlyOwnerOrCoordinator",
									"nameLocation": "8065:22:10",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 2409,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8087:2:10"
									},
									"src": "8056:295:10",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"functionSelector": "8da5cb5b",
									"id": 2443,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "8366:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2439,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8371:2:10"
									},
									"returnParameters": {
										"id": 2442,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2441,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2443,
												"src": "8403:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2440,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8403:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8402:9:10"
									},
									"scope": 2444,
									"src": "8357:55:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 2445,
							"src": "5670:2744:10",
							"usedErrors": [
								2323,
								2331,
								2333
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "32:8383:10"
				},
				"id": 10
			}
		}
	}
}